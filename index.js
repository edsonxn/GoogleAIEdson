import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import { GoogleGenerativeAI } from '@google/generative-ai';
import OpenAI from 'openai';
import wav from 'wav';
import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import ApplioClient from "./applio-client.js";
import { transcribeAudio, getAudioTracks } from "./transcriber.js";
import multer from 'multer';
import axios from 'axios';
import * as cheerio from 'cheerio';
import ffmpeg from 'fluent-ffmpeg';
import { spawn, exec } from 'child_process';
import { createCanvas, loadImage } from 'canvas';
import ComfyUIClient from './comfyui-client.js';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// Obtener __dirname equivalente en m√≥dulos ES6
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const PORT = 3000;

// Configurar cliente Applio
const applioClient = new ApplioClient();

// Variables para control de proceso ComfyUI
let comfyUIProcess = null;
const COMFYUI_PATH = 'C:\\comfy\\ComfyUI';
const COMFYUI_START_BAT = path.join(COMFYUI_PATH, 'start.bat');

// Variables para control de proceso Applio
let applioProcess = null;
let applioStarted = false; // Nueva variable para rastrear si ya se inici√≥
const APPLIO_PATH = 'C:\\applio2\\Applio';
const APPLIO_START_BAT = path.join(APPLIO_PATH, 'run-applio.bat');

// Variable para rastrear progreso de proyectos
const projectProgressTracker = {};

/**
 * Extrae solo el contenido del gui√≥n de un archivo TXT completo
 * @param {string} fullContent - Contenido completo del archivo TXT con metadatos
 * @returns {object} - Objeto con el contenido del gui√≥n y informaci√≥n adicional
 */
function extractScriptContent(fullContent) {
  try {
    if (!fullContent || typeof fullContent !== 'string') {
      return { content: '', isEmpty: true, hasStructure: false };
    }
    
    // Verificar si tiene la estructura esperada de metadatos
    const hasStructure = fullContent.includes('CONTENIDO DEL GUI√ìN:') || 
                        fullContent.includes('===============================');
    
    // Buscar el marcador de inicio del contenido
    const contentStart = fullContent.indexOf('CONTENIDO DEL GUI√ìN:');
    if (contentStart === -1) {
      // Si no encuentra el marcador, intentar buscar patrones alternativos
      const altPatterns = [
        'CONTENIDO:',
        'GUI√ìN:',
        'SCRIPT:',
        'TEXTO:'
      ];
      
      let startIndex = -1;
      for (const pattern of altPatterns) {
        const index = fullContent.indexOf(pattern);
        if (index !== -1) {
          startIndex = index + pattern.length;
          break;
        }
      }
      
      if (startIndex === -1) {
        // Si no encuentra ning√∫n patr√≥n, devolver todo el contenido limpio
        console.warn('‚ö†Ô∏è No se encontr√≥ marcador de inicio del gui√≥n, devolviendo contenido limpio');
        const cleanContent = fullContent.trim();
        return { 
          content: cleanContent, 
          isEmpty: cleanContent.length === 0, 
          hasStructure: hasStructure 
        };
      }
      
      const textAfterMarker = fullContent.substring(startIndex);
      const endMarker = textAfterMarker.indexOf('===============================');
      
      const extractedContent = endMarker !== -1 
        ? textAfterMarker.substring(0, endMarker).trim()
        : textAfterMarker.trim();
        
      return { 
        content: extractedContent, 
        isEmpty: extractedContent.length === 0, 
        hasStructure: hasStructure 
      };
    }
    
    // Extraer texto despu√©s del marcador "CONTENIDO DEL GUI√ìN:"
    const startIndex = contentStart + 'CONTENIDO DEL GUI√ìN:'.length;
    const textAfterMarker = fullContent.substring(startIndex);
    
    // Buscar el marcador de fin (l√≠nea de separaci√≥n)
    const endMarker = textAfterMarker.indexOf('===============================');
    
    let scriptContent;
    if (endMarker !== -1) {
      // Extraer solo hasta el marcador de fin
      scriptContent = textAfterMarker.substring(0, endMarker);
    } else {
      // Si no hay marcador de fin, tomar todo despu√©s del inicio
      scriptContent = textAfterMarker;
    }
    
    // Limpiar el contenido
    scriptContent = scriptContent
      .replace(/Gui√≥n generado autom√°ticamente por IA.*$/g, '') // Remover pie de p√°gina si qued√≥
      .replace(/^\s*\n+/, '') // Remover l√≠neas vac√≠as al inicio
      .replace(/\n+\s*$/, '') // Remover l√≠neas vac√≠as al final
      .trim();
    
    const isEmpty = scriptContent.length === 0;
    
    console.log(`üìù Script extra√≠do: ${scriptContent.length} caracteres (de ${fullContent.length} originales)${isEmpty ? ' - CONTENIDO VAC√çO' : ''}`);
    
    return { 
      content: scriptContent, 
      isEmpty: isEmpty, 
      hasStructure: hasStructure 
    };
    
  } catch (error) {
    console.error('‚ùå Error extrayendo contenido del script:', error);
    return { 
      content: fullContent.trim(), 
      isEmpty: fullContent.trim().length === 0, 
      hasStructure: false 
    }; // Devolver contenido original como fallback
  }
}

/**
 * Genera un gui√≥n faltante para una secci√≥n espec√≠fica usando IA
 * @param {string} topic - Tema del proyecto
 * @param {number} sectionNumber - N√∫mero de la secci√≥n
 * @param {number} totalSections - Total de secciones del proyecto
 * @param {string} chapterTitle - T√≠tulo del cap√≠tulo si est√° disponible
 * @param {Array} previousSections - Secciones anteriores para contexto
 * @param {string} scriptStyle - Estilo del script ('professional', 'comedy', 'custom')
 * @param {string} customStyleInstructions - Instrucciones personalizadas si es estilo custom
 * @param {number} wordsMin - M√≠nimo de palabras
 * @param {number} wordsMax - M√°ximo de palabras
 * @returns {Promise<object>} - Resultado de la generaci√≥n
 */
async function generateMissingScript(topic, sectionNumber, totalSections, chapterTitle = null, previousSections = [], scriptStyle = 'professional', customStyleInstructions = '', wordsMin = 800, wordsMax = 1100) {
  try {
    console.log(`üìù Generando gui√≥n faltante para secci√≥n ${sectionNumber}/${totalSections}:`);
    console.log(`üéØ Tema: ${topic}`);
    console.log(`üìñ Cap√≠tulo: ${chapterTitle || 'Sin t√≠tulo espec√≠fico'}`);
    console.log(`üé® Estilo: ${scriptStyle}`);
    
    // Preparar contexto de secciones anteriores en el formato correcto
    let previousChapterContent = [];
    if (previousSections && previousSections.length > 0) {
      previousChapterContent = previousSections.map(section => {
        const content = typeof section.script === 'string' ? section.script : section.script?.content || '';
        return content;
      });
    }
    
    // Preparar estructura de cap√≠tulos si hay t√≠tulo
    let chapterStructure = null;
    if (chapterTitle) {
      // Crear una estructura simple con el t√≠tulo actual
      chapterStructure = Array(totalSections).fill().map((_, index) => {
        if (index + 1 === sectionNumber) {
          return chapterTitle;
        }
        return `Cap√≠tulo ${index + 1}`;
      });
    }

    // Generar prompt usando las funciones existentes seg√∫n el estilo
    let prompt;
    switch (scriptStyle) {
      case 'comedy':
        prompt = generateComedyPrompt(topic, totalSections, sectionNumber, chapterStructure, previousChapterContent, wordsMin, wordsMax);
        break;
      case 'custom':
        prompt = generateCustomPrompt(topic, totalSections, sectionNumber, chapterStructure, previousChapterContent, wordsMin, wordsMax, customStyleInstructions);
        break;
      case 'professional':
      default:
        prompt = generateProfessionalPrompt(topic, totalSections, sectionNumber, chapterStructure, previousChapterContent, wordsMin, wordsMax);
        break;
    }

    // Validar que la API key est√© disponible
    if (!process.env.GOOGLE_API_KEY) {
      throw new Error('GOOGLE_API_KEY no est√° configurada en las variables de entorno');
    }

    // Usar el cliente de IA configurado (Gemini o similar)
    const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    
    console.log('ü§ñ Enviando prompt al modelo de IA...');
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const generatedScript = response.text();
    
    if (!generatedScript || generatedScript.trim().length < 200) {
      throw new Error('El gui√≥n generado es demasiado corto o est√° vac√≠o');
    }
    
    console.log(`‚úÖ Gui√≥n generado: ${generatedScript.length} caracteres`);
    
    return {
      success: true,
      script: generatedScript.trim(),
      length: generatedScript.trim().length,
      sectionNumber: sectionNumber,
      topic: topic
    };
    
  } catch (error) {
    console.error(`‚ùå Error generando gui√≥n para secci√≥n ${sectionNumber}:`, error);
    return {
      success: false,
      error: error.message,
      sectionNumber: sectionNumber,
      topic: topic
    };
  }
}

// Funciones para controlar ComfyUI autom√°ticamente
async function startComfyUI() {
  try {
    console.log('üöÄ Iniciando ComfyUI en nueva ventana CMD...');
    
    // Verificar si ya est√° ejecut√°ndose
    const client = new ComfyUIClient('http://127.0.0.1:8188');
    const connectionCheck = await client.checkConnection();
    if (connectionCheck.success) {
      console.log('‚úÖ ComfyUI ya est√° ejecut√°ndose');
      return true;
    }
    
    // Cerrar Applio antes de iniciar ComfyUI para evitar conflictos de recursos
    console.log('üõë Cerrando Applio antes de iniciar ComfyUI para liberar recursos...');
    await stopApplio();
    console.log('‚úÖ Applio cerrado, iniciando ComfyUI...');
    
    // Verificar que el archivo start.bat existe
    if (!fs.existsSync(COMFYUI_START_BAT)) {
      throw new Error(`No se encontr√≥ start.bat en: ${COMFYUI_START_BAT}`);
    }
    
    console.log(`üìÇ Abriendo nueva ventana CMD para ComfyUI...`);
    
    // Crear un archivo temporal .bat para evitar problemas con comillas
    const tempBatPath = path.join(__dirname, 'temp_start_comfyui.bat');
    const batContent = `@echo off
title ComfyUI Server - AutoRestart
cd /d "${COMFYUI_PATH}"
start.bat`;
    
    fs.writeFileSync(tempBatPath, batContent);
    
    // Ejecutar el archivo .bat en una nueva ventana
    comfyUIProcess = spawn('cmd', ['/c', 'start', tempBatPath], {
      detached: true,
      stdio: 'ignore',
      windowsHide: false
    });
    
    // Desacoplar el proceso del proceso padre
    comfyUIProcess.unref();
    
    console.log(`ü™ü Nueva ventana CMD abierta para ComfyUI`);
    
    // Limpiar el archivo temporal despu√©s de un momento
    setTimeout(() => {
      try {
        if (fs.existsSync(tempBatPath)) {
          fs.unlinkSync(tempBatPath);
        }
      } catch (error) {
        console.log('‚ÑπÔ∏è No se pudo eliminar archivo temporal:', tempBatPath);
      }
    }, 10000);
    
    // Esperar a que ComfyUI est√© listo (m√°ximo 90 segundos para dar tiempo al inicio)
    console.log('‚è≥ Esperando a que ComfyUI est√© listo en la nueva ventana...');
    const maxAttempts = 90;
    let attempt = 0;
    
    while (attempt < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      attempt++;
      
      try {
        const check = await client.checkConnection();
        if (check.success) {
          console.log(`‚úÖ ComfyUI listo despu√©s de ${attempt} segundos en nueva ventana`);
          return true;
        }
      } catch (error) {
        // Continuar intentando
      }
      
      if (attempt % 15 === 0) {
        console.log(`‚è≥ Intento ${attempt}/${maxAttempts}... (ComfyUI inici√°ndose en ventana separada)`);
      }
    }
    
    throw new Error('Timeout: ComfyUI no respondi√≥ despu√©s de 90 segundos');
    
  } catch (error) {
    console.error('‚ùå Error iniciando ComfyUI:', error.message);
    return false;
  }
}

async function stopComfyUI() {
  try {
    console.log('üõë Cerrando ventana CMD de ComfyUI...');
    
    // Buscar y cerrar todos los procesos relacionados con ComfyUI
    // Esto cerrar√° tanto el proceso Python como la ventana CMD
    const killCommand = spawn('taskkill', [
      '/F',  // Forzar cierre
      '/IM', 'python.exe',  // Cerrar procesos Python (ComfyUI)
      '/T'   // Terminar √°rbol de procesos
    ], {
      stdio: 'ignore'
    });
    
    // Tambi√©n cerrar cualquier proceso CMD que tenga "ComfyUI" en el t√≠tulo
    const killCmdCommand = spawn('taskkill', [
      '/F',
      '/FI', 'WINDOWTITLE eq ComfyUI Server*'
    ], {
      stdio: 'ignore'
    });
    
    // Esperar a que los comandos de cierre terminen
    await Promise.all([
      new Promise(resolve => killCommand.on('close', resolve)),
      new Promise(resolve => killCmdCommand.on('close', resolve))
    ]);
    
    console.log('‚úÖ Ventana CMD de ComfyUI cerrada');
    
    // Limpiar referencia del proceso
    comfyUIProcess = null;
    
    // Esperar un momento para que el proceso se cierre completamente
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    return true;
  } catch (error) {
    console.error('‚ùå Error cerrando ComfyUI:', error.message);
    return false;
  }
}

// Funci√≥n para generar imagen con reinicio autom√°tico en caso de timeout
async function generateImageWithAutoRestart(prompt, options = {}, maxRetries = 2) {
  let attempt = 1;
  
  while (attempt <= maxRetries) {
    try {
      console.log(`üé® [ATTEMPT ${attempt}/${maxRetries}] Generando imagen: "${prompt}"`);
      
      // Verificar si ComfyUI est√° disponible
      const client = new ComfyUIClient('http://127.0.0.1:8188');
      const connectionCheck = await client.checkConnection();
      
      if (!connectionCheck.success) {
        console.log(`‚ö†Ô∏è ComfyUI no disponible en intento ${attempt}, iniciando...`);
        const started = await startComfyUI();
        if (!started) {
          throw new Error('No se pudo iniciar ComfyUI');
        }
      }
      
      // Intentar generar imagen
      const result = await client.generateImage(prompt, options);
      console.log(`‚úÖ Imagen generada exitosamente en intento ${attempt}`);
      return result;
      
    } catch (error) {
      console.error(`‚ùå Error en intento ${attempt}:`, error.message);
      
      // Si es timeout de ComfyUI y no es el √∫ltimo intento
      if (error.message.includes('COMFYUI_TIMEOUT') && attempt < maxRetries) {
        console.log(`‚è±Ô∏è Timeout detectado (>90s), reiniciando ComfyUI...`);
        
        // Cerrar Applio y ComfyUI para liberar todos los recursos
        console.log('üõë Cerrando Applio para liberar recursos GPU/VRAM...');
        await stopApplio();
        console.log('üõë Cerrando ComfyUI que se colg√≥...');
        await stopComfyUI();
        
        // Esperar un momento antes de reiniciar
        console.log('‚è≥ Esperando 5 segundos antes de reiniciar...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // Reiniciar ComfyUI
        console.log('üîÑ Reiniciando ComfyUI en nueva ventana...');
        const restarted = await startComfyUI();
        
        if (!restarted) {
          console.error('‚ùå No se pudo reiniciar ComfyUI');
          if (attempt === maxRetries) {
            throw new Error('No se pudo reiniciar ComfyUI despu√©s del timeout');
          }
        } else {
          console.log('‚úÖ ComfyUI reiniciado exitosamente, reintentando generaci√≥n...');
        }
        
        attempt++;
        continue;
      }
      
      // Si no es timeout o es el √∫ltimo intento, lanzar error
      if (attempt === maxRetries) {
        throw error;
      }
      
      attempt++;
    }
  }
  
  throw new Error('Se agotaron los intentos de generaci√≥n');
}

// Funciones para controlar Applio autom√°ticamente
async function startApplio() {
  try {
    // Si ya est√° marcado como iniciado, solo verificar conexi√≥n
    if (applioStarted) {
      console.log('‚ÑπÔ∏è Applio ya fue iniciado anteriormente, verificando conexi√≥n...');
      const connectionCheck = await applioClient.checkConnection();
      if (connectionCheck) {
        console.log('‚úÖ Applio sigue ejecut√°ndose y listo');
        return true;
      } else {
        console.log('‚ö†Ô∏è Applio fue iniciado pero no responde, intentando reiniciar...');
        console.log('üîç [DEBUG] Reseteando estado de Applio...');
        applioStarted = false; // Reset para permitir reinicio
      }
    }
    
    console.log('üöÄ Iniciando Applio en nueva ventana CMD (primera vez)...');
    
    // Verificar si ya est√° ejecut√°ndose
    const connectionCheck = await applioClient.checkConnection();
    if (connectionCheck) {
      console.log('‚úÖ Applio ya est√° ejecut√°ndose');
      applioStarted = true;
      return true;
    }
    
    // Verificar que el archivo run-applio.bat existe
    if (!fs.existsSync(APPLIO_START_BAT)) {
      throw new Error(`No se encontr√≥ run-applio.bat en: ${APPLIO_START_BAT}`);
    }
    
    console.log(`üìÇ Abriendo nueva ventana CMD para Applio...`);
    
    // Crear un archivo temporal .bat para evitar problemas con comillas
    const tempBatPath = path.join(__dirname, 'temp_start_applio.bat');
    const batContent = `@echo off
title Applio Server - PERMANENTE
cd /d "${APPLIO_PATH}"
run-applio.bat`;
    
    fs.writeFileSync(tempBatPath, batContent);
    
    // Ejecutar el archivo .bat en una nueva ventana
    applioProcess = spawn('cmd', ['/c', 'start', tempBatPath], {
      detached: true,
      stdio: 'ignore',
      windowsHide: false
    });
    
    // Desacoplar el proceso del proceso padre
    applioProcess.unref();
    
    console.log(`ü™ü Nueva ventana CMD abierta para Applio - PERMANENTE`);
    
    // Limpiar el archivo temporal despu√©s de un momento
    setTimeout(() => {
      try {
        if (fs.existsSync(tempBatPath)) {
          fs.unlinkSync(tempBatPath);
        }
      } catch (error) {
        console.log('‚ÑπÔ∏è No se pudo eliminar archivo temporal:', tempBatPath);
      }
    }, 10000);
    
    // Esperar a que Applio est√© listo (m√°ximo 120 segundos para dar tiempo al inicio)
    console.log('‚è≥ Esperando a que Applio est√© listo en la nueva ventana...');
    const maxAttempts = 120;
    let attempt = 0;
    
    while (attempt < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      attempt++;
      
      try {
        const check = await applioClient.checkConnection();
        if (check) {
          console.log(`‚úÖ Applio listo despu√©s de ${attempt} segundos en nueva ventana`);
          applioStarted = true; // Marcar como iniciado
          return true;
        }
      } catch (error) {
        // Continuar intentando
      }
      
      if (attempt % 20 === 0) {
        console.log(`‚è≥ Intento ${attempt}/${maxAttempts}... (Applio inici√°ndose en ventana separada)`);
      }
    }
    
    throw new Error('Timeout: Applio no respondi√≥ despu√©s de 120 segundos');
    
  } catch (error) {
    console.error('‚ùå Error iniciando Applio:', error.message);
    console.log('üîç [DEBUG] Reseteando estado debido a error');
    applioStarted = false;
    return false;
  }
}

async function stopApplio() {
  try {
    console.log('üõë Cerrando ventana CMD de Applio...');
    
    // Buscar y cerrar todos los procesos relacionados con Applio
    // Esto cerrar√° tanto el proceso Python como la ventana CMD
    const killCommand = spawn('taskkill', [
      '/F',  // Forzar cierre
      '/IM', 'python.exe',  // Cerrar procesos Python (Applio)
      '/T'   // Terminar √°rbol de procesos
    ], {
      stdio: 'ignore'
    });
    
    // Tambi√©n cerrar cualquier proceso CMD que tenga "Applio" en el t√≠tulo
    const killCmdCommand = spawn('taskkill', [
      '/F',
      '/FI', 'WINDOWTITLE eq Applio Server*'
    ], {
      stdio: 'ignore'
    });
    
    // Esperar a que los comandos de cierre terminen
    await Promise.all([
      new Promise(resolve => killCommand.on('close', resolve)),
      new Promise(resolve => killCmdCommand.on('close', resolve))
    ]);
    
    console.log('‚úÖ Ventana CMD de Applio cerrada');
    
    // Limpiar referencia del proceso y estado
    applioProcess = null;
    applioStarted = false; // Reset del estado
    
    // Esperar un momento para que el proceso se cierre completamente
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    return true;
  } catch (error) {
    console.error('‚ùå Error cerrando Applio:', error.message);
    return false;
  }
}

app.use(cors());
app.use(bodyParser.json({ limit: '50mb' })); // Aumentar l√≠mite para payloads grandes
app.use(bodyParser.urlencoded({ limit: '50mb', extended: true })); // Para formularios grandes
app.use(express.static('public')); // Servir HTML y assets

// Configurar multer para subida de archivos
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const tempDir = './temp';
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    cb(null, tempDir);
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '_' + file.originalname);
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 * 1024 // 5GB m√°ximo para videos grandes
  },
  fileFilter: function (req, file, cb) {
    const allowedTypes = ['audio/mp3', 'audio/wav', 'audio/mpeg', 'audio/m4a', 'video/mp4'];
    const allowedExtensions = ['.mp3', '.wav', '.m4a', '.mp4'];
    
    const isValidType = allowedTypes.includes(file.mimetype) || 
                       allowedExtensions.some(ext => file.originalname.toLowerCase().endsWith(ext));
    
    if (isValidType) {
      cb(null, true);
    } else {
      cb(new Error('Formato de archivo no soportado'));
    }
  }
});

const ai = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

// Configurar cliente OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Almac√©n de conversaciones en memoria (historial por proyecto)
const conversationStore = new Map();

// Funci√≥n helper para retry autom√°tico con Google AI
async function generateContentWithRetry(ai, params, maxRetries = 3, delay = 2000) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`ü§ñ Intento ${attempt}/${maxRetries} de generar contenido...`);
      const response = await ai.models.generateContent(params);
      console.log(`‚úÖ Contenido generado exitosamente en el intento ${attempt}`);
      return response;
    } catch (error) {
      console.error(`‚ùå Error en intento ${attempt}/${maxRetries}:`, error.message);
      
      if (error.status === 503 && attempt < maxRetries) {
        console.log(`‚è≥ Esperando ${delay}ms antes del siguiente intento...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        delay *= 1.5; // Incrementar delay exponencialmente
      } else {
        throw error; // Si no es error 503 o es el √∫ltimo intento, lanzar error
      }
    }
  }
}

// Funci√≥n universal para generar contenido con m√∫ltiples proveedores LLM
async function generateUniversalContent(model, promptOrHistory, systemInstruction = null, maxRetries = 3) {
  console.log(`ü§ñ Generando contenido con modelo: ${model}`);
  
  // Determinar el proveedor basado en el modelo
  const isOpenAI = model.includes('gpt') || model.includes('openai');
  const isGoogle = model.includes('gemini') || model.includes('google');
  
  console.log(`üîç Proveedor detectado: ${isOpenAI ? 'OpenAI' : 'Google AI'} para modelo "${model}"`);
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ Intento ${attempt}/${maxRetries} con ${isOpenAI ? 'OpenAI' : 'Google AI'}...`);
      
      if (isOpenAI) {
        // Usar OpenAI
        const messages = [];
        
        if (systemInstruction) {
          messages.push({
            role: "system",
            content: systemInstruction
          });
        }
        
        // Si promptOrHistory es un array (historial de conversaci√≥n)
        if (Array.isArray(promptOrHistory)) {
          // OPTIMIZACI√ìN PARA OPENAI: Solo usar los √∫ltimos 2 mensajes para ahorrar tokens
          const recentHistory = promptOrHistory.slice(-2);
          console.log(`üîÑ OPTIMIZACI√ìN OpenAI - Usando solo los √∫ltimos ${recentHistory.length} mensajes de ${promptOrHistory.length} total`);
          
          recentHistory.forEach(h => {
            if (h.role === 'user') {
              messages.push({
                role: "user",
                content: h.parts[0].text
              });
            } else if (h.role === 'model') {
              messages.push({
                role: "assistant", 
                content: h.parts[0].text
              });
            }
          });
        } else {
          // Si es un string simple
          messages.push({
            role: "user", 
            content: promptOrHistory
          });
        }
        
        // Configurar par√°metros seg√∫n el modelo
        const requestConfig = {
          model: model,
          messages: messages
        };
        
        // NO configurar max_completion_tokens - usar l√≠mites por defecto como Gemini
        // Esto permite m√°xima memoria disponible para cada modelo
        
        // Solo agregar temperature si NO es un modelo GPT-5 (todos los GPT-5 solo soportan valor por defecto)
        if (!model.startsWith('gpt-5')) {
          requestConfig.temperature = 0.7;
        }
        
        const response = await openai.chat.completions.create(requestConfig);
        
        console.log(`‚úÖ Contenido generado exitosamente con OpenAI en intento ${attempt}`);
        
        const result = {
          text: response.choices[0].message.content
        };
        
        return result;
        
      } else {
        // Usar Google AI (comportamiento existente)
        const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
        const model_instance = genAI.getGenerativeModel({ model: model });
        
        // Si promptOrHistory es un array (historial de conversaci√≥n)
        if (Array.isArray(promptOrHistory)) {
          const result = await model_instance.generateContent({
            contents: promptOrHistory,
            systemInstruction: systemInstruction
          });
          const response = await result.response;
          console.log(`‚úÖ Contenido generado exitosamente con Google AI en intento ${attempt}`);
          return await response.text();
        } else {
          const result = await model_instance.generateContent(promptOrHistory);
          const response = await result.response;
          console.log(`‚úÖ Contenido generado exitosamente con Google AI en intento ${attempt}`);
          return await response.text();
        }
      }
      
    } catch (error) {
      console.error(`‚ùå Error en intento ${attempt}/${maxRetries}:`, error.message);
      
      const isRetryableError = (isOpenAI && error.status >= 500) || 
                              (!isOpenAI && error.status === 503);
      
      if (isRetryableError && attempt < maxRetries) {
        const delay = 2000 * Math.pow(1.5, attempt - 1);
        console.log(`‚è≥ Esperando ${delay}ms antes del siguiente intento...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        throw error;
      }
    }
  }
  
  // Si llegamos aqu√≠, todos los intentos fallaron
  throw new Error(`No se pudo generar contenido despu√©s de ${maxRetries} intentos`);
}

// Funci√≥n para optimizar historial manteniendo continuidad narrativa
function optimizeConversationHistory(conversation) {
  const historialAntes = conversation.history.length;
  
  // No optimizar si el historial es peque√±o
  if (historialAntes <= 6) {
    return;
  }
  
  console.log(`üß† OPTIMIZACI√ìN INTELIGENTE - Manteniendo continuidad narrativa...`);
  
  if (historialAntes > 8) {
    // Para series largas: mantener contexto inicial + contexto reciente
    const contextoInicial = conversation.history.slice(0, 2); // Primer cap√≠tulo
    const contextoReciente = conversation.history.slice(-6);   // √öltimos 3 cap√≠tulos
    
    conversation.history = [...contextoInicial, ...contextoReciente];
    
    console.log(`üîÑ OPTIMIZACI√ìN - Historial reestructurado de ${historialAntes} a ${conversation.history.length} mensajes`);
    console.log(`üìö ESTRATEGIA - Manteniendo: cap√≠tulo inicial (contexto base) + √∫ltimos 3 cap√≠tulos (continuidad)`);
  } else {
    // Para series medianas: mantener √∫ltimos 3 cap√≠tulos
    conversation.history = conversation.history.slice(-6);
    console.log(`üîÑ OPTIMIZACI√ìN - Historial reducido de ${historialAntes} a ${conversation.history.length} mensajes (√∫ltimos 3 cap√≠tulos)`);
  }
  
  console.log(`üí∞ AHORRO DE TOKENS - Eliminados ${historialAntes - conversation.history.length} mensajes intermedios`);
}

// Funci√≥n para estimar tokens aproximadamente (1 token ‚âà 4 caracteres en espa√±ol)
function estimateTokens(text) {
  if (!text || typeof text !== 'string') return 0;
  return Math.ceil(text.length / 4);
}

// Funci√≥n para obtener o crear una conversaci√≥n
function getOrCreateConversation(projectKey) {
  if (!conversationStore.has(projectKey)) {
    conversationStore.set(projectKey, {
      history: [],
      topic: '',
      totalSections: 0,
      currentSection: 0,
      chapterStructure: [],
      createdAt: Date.now()
    });
  }
  return conversationStore.get(projectKey);
}

// Funci√≥n para limpiar conversaciones antiguas (m√°s de 24 horas)
function cleanOldConversations() {
  const now = Date.now();
  const oneDayInMs = 24 * 60 * 60 * 1000;
  
  for (const [key, conversation] of conversationStore.entries()) {
    if (now - conversation.createdAt > oneDayInMs) {
      conversationStore.delete(key);
    }
  }
}

// Funci√≥n para obtener las voces disponibles de Applio
function getAvailableVoices() {
  try {
    const voicesPath = path.join('C:', 'applio2', 'Applio', 'logs', 'VOCES');
    console.log(`üîç Buscando voces en: ${voicesPath}`);
    
    if (!fs.existsSync(voicesPath)) {
      console.warn(`‚ö†Ô∏è Carpeta de voces no encontrada: ${voicesPath}`);
      return [{
        name: 'RemyOriginal (Default)',
        path: 'logs\\VOCES\\RemyOriginal.pth',
        displayName: 'RemyOriginal'
      }];
    }
    
    const files = fs.readdirSync(voicesPath);
    const voiceFiles = files.filter(file => file.endsWith('.pth'));
    
    console.log(`üìÇ Archivos .pth encontrados: ${voiceFiles.length}`);
    
    const voices = voiceFiles.map(file => {
      const baseName = path.basename(file, '.pth');
      return {
        name: baseName,
        path: `logs\\VOCES\\${file}`,
        displayName: baseName
      };
    });
    
    // Si no hay voces, agregar la por defecto
    if (voices.length === 0) {
      voices.push({
        name: 'RemyOriginal (Default)',
        path: 'logs\\VOCES\\RemyOriginal.pth',
        displayName: 'RemyOriginal'
      });
    }
    
    console.log(`‚úÖ Voces disponibles: ${voices.map(v => v.displayName).join(', ')}`);
    return voices;
    
  } catch (error) {
    console.error('‚ùå Error leyendo voces:', error);
    return [{
      name: 'RemyOriginal (Default)',
      path: 'logs\\VOCES\\RemyOriginal.pth',
      displayName: 'RemyOriginal'
    }];
  }
}

// Estilos predeterminados de miniatura
const defaultThumbnailStyles = {
  'default': {
    name: 'Amarillo y Blanco (Predeterminado)',
    description: 'Estilo cl√°sico con texto amarillo y blanco',
    primaryColor: 'amarillo',
    secondaryColor: 'blanco',
    instructions: 'El texto que se muestre debe de tener 2 colores, letras llamativas y brillosas con efecto luminoso, la frase menos importante de color blanco, la frase importante color amarillo, todo con contorno negro, letras brillosas con resplandor'
  },
  'gaming_red': {
    name: 'Rojo Gaming',
    description: 'Estilo gaming agresivo con rojos brillantes',
    primaryColor: 'rojo brillante',
    secondaryColor: 'blanco',
    instructions: 'El texto debe tener un estilo gaming agresivo con la frase principal en rojo brillante intenso y la secundaria en blanco, ambas con contorno negro grueso y efecto de resplandor rojo'
  },
  'neon_blue': {
    name: 'Azul Ne√≥n',
    description: 'Estilo futurista con azul ne√≥n y efectos cyberpunk',
    primaryColor: 'azul ne√≥n',
    secondaryColor: 'cyan claro',
    instructions: 'El texto debe tener un estilo futurista cyberpunk con la frase principal en azul ne√≥n brillante y la secundaria en cyan claro, con contorno oscuro y efectos de resplandor azul ne√≥n'
  },
  'retro_purple': {
    name: 'P√∫rpura Retro',
    description: 'Estilo retro gaming con p√∫rpura y rosa',
    primaryColor: 'p√∫rpura brillante',
    secondaryColor: 'rosa',
    instructions: 'El texto debe tener un estilo retro gaming de los 80s con la frase principal en p√∫rpura brillante y la secundaria en rosa, con contorno negro y efectos de resplandor p√∫rpura'
  }
};

// Funci√≥n para obtener instrucciones de estilo de miniatura
function getThumbnailStyleInstructions(styleId) {
  // Si es un estilo personalizado (enviado desde el frontend)
  if (typeof styleId === 'object' && styleId) {
    // Construir instrucciones completas usando los colores espec√≠ficos
    const primaryColor = styleId.primaryColor || 'amarillo';
    const secondaryColor = styleId.secondaryColor || 'blanco';
    const customInstructions = styleId.instructions || '';
    
    const fullInstructions = `El texto debe tener la frase principal en color ${primaryColor} brillante y la frase secundaria en color ${secondaryColor}, ambas con contorno negro grueso, letras brillosas con efecto luminoso y resplandor. Estilo visual: ${customInstructions}`;
    
    return fullInstructions;
  }
  
  // Si es un estilo predeterminado
  if (typeof styleId === 'string' && defaultThumbnailStyles[styleId]) {
    return defaultThumbnailStyles[styleId].instructions;
  }
  
  // Fallback al estilo predeterminado
  return defaultThumbnailStyles.default.instructions;
}

// Limpiar conversaciones antiguas cada hora
setInterval(cleanOldConversations, 60 * 60 * 1000);

// ================================
// SISTEMA DE GUARDADO Y CARGA DE PROYECTOS
// ================================

// Funci√≥n para guardar el estado completo del proyecto
function saveProjectState(projectData) {
  try {
    const { 
      topic, 
      folderName, 
      totalSections, 
      currentSection, 
      voice, 
      imageModel, 
      scriptStyle, 
      customStyleInstructions,
      promptModifier,
      imageCount,
      minWords,
      maxWords,
      skipImages,
      googleImages,
      applioVoice
    } = projectData;
    
    const safeFolderName = folderName && folderName.trim() 
      ? createSafeFolderName(folderName.trim())
      : createSafeFolderName(topic);
    
    const outputsDir = path.join('./public/outputs');
    const projectDir = path.join(outputsDir, safeFolderName);
    
    // Crear carpetas si no existen
    if (!fs.existsSync(outputsDir)) {
      fs.mkdirSync(outputsDir, { recursive: true });
    }
    if (!fs.existsSync(projectDir)) {
      fs.mkdirSync(projectDir, { recursive: true });
    }
    
    const projectStateFile = path.join(projectDir, 'project_state.json');
    
    const projectState = {
      topic,
      folderName: safeFolderName,
      originalFolderName: folderName,
      totalSections,
      currentSection,
      voice,
      imageModel,
      scriptStyle,
      customStyleInstructions,
      promptModifier: promptModifier || '',
      imageCount: imageCount || 3,
      minWords: minWords || 800,
      maxWords: maxWords || 1100,
      skipImages: skipImages || false,
      googleImages: googleImages || false,
      applioVoice: applioVoice || 'logs\\VOCES\\RemyOriginal.pth',
      createdAt: new Date().toISOString(),
      lastModified: new Date().toISOString(),
      completedSections: []
    };
    
    // Si ya existe un archivo de estado, preservar secciones completadas
    if (fs.existsSync(projectStateFile)) {
      const existingState = JSON.parse(fs.readFileSync(projectStateFile, 'utf8'));
      projectState.completedSections = existingState.completedSections || [];
      projectState.createdAt = existingState.createdAt || projectState.createdAt;
    }
    
    fs.writeFileSync(projectStateFile, JSON.stringify(projectState, null, 2), 'utf8');
    console.log(`üíæ Estado del proyecto guardado: ${projectStateFile}`);
    
    return projectState;
  } catch (error) {
    console.error('‚ùå Error guardando estado del proyecto:', error);
    return null;
  }
}

// Funci√≥n para generar metadatos de YouTube autom√°ticamente para un proyecto completo
async function generateYouTubeMetadataForProject(projectState) {
  try {
    console.log(`üé¨ Iniciando generaci√≥n autom√°tica de metadatos para: ${projectState.topic}`);
    
    const safeFolderName = projectState.folderName;
    const projectDir = path.join('./public/outputs', safeFolderName);
    const projectStateFile = path.join(projectDir, 'project_state.json');
    
    // Recopilar todos los scripts de las secciones completadas
    const allSections = [];
    for (const section of projectState.completedSections.sort((a, b) => a.section - b.section)) {
      if (section.script) {
        allSections.push(section.script);
      }
    }
    
    if (allSections.length === 0) {
      console.log(`‚ö†Ô∏è No hay secciones con script para generar metadatos`);
      return;
    }
    
    console.log(`üìù Generando metadatos con ${allSections.length} secciones`);
    
    // Combinar todas las secciones
    const fullScript = allSections.join('\n\n--- SECCI√ìN ---\n\n');
    
    // Obtener instrucciones de estilo de miniatura (usar default si no est√° especificado)
    const thumbnailStyle = projectState.thumbnailStyle || 'default';
    const thumbnailInstructions = getThumbnailStyleInstructions(thumbnailStyle);
    
    console.log(`üé® Usando estilo de miniatura: ${thumbnailStyle}`);
    
    // Generar prompt para metadatos
    const prompt = `
Bas√°ndote en el siguiente tema y gui√≥n completo del video, genera metadata optimizada para YouTube:

**TEMA:** ${projectState.topic}

**GUI√ìN COMPLETO:**
${fullScript}

Por favor genera:

1. **10 T√çTULOS CLICKBAIT** (cada uno en una l√≠nea, numerados):
   - Usa palabras que generen curiosidad como "QUE PASA CUANDO", "POR QUE", "HICE ESTO Y PASO ESTO", "NO VAS A CREER", "ESTO CAMBI√ì TODO"
   - Que sean pol√©micos pero relacionados al contenido
   - maximo 15 palabras, minimo 10.

2. **DESCRIPCI√ìN PARA VIDEO** (optimizada para SEO):
   - Entre 150-300 palabras
   - Incluye palabras clave relevantes del tema
   - Menciona el contenido principal del video
   - Incluye call-to-action para suscribirse
   - Formato atractivo con emojis

3. **25 ETIQUETAS** (separadas por comas):
   - Palabras clave relacionadas al tema
   - Tags populares del nicho correspondiente
   - T√©rminos de b√∫squeda relevantes
   - Sin espacios en tags compuestos (usar guiones o camelCase)

4. **5 PROMPTS PARA MINIATURAS DE YOUTUBE** (cada uno en una l√≠nea, numerados):
   
   FORMATO OBLIGATORIO - DEBES SEGUIR ESTA ESTRUCTURA EXACTA PARA CADA UNO DE LOS 5 PROMPTS:
   
   "Miniatura de YouTube 16:9 mostrando [descripci√≥n visual muy detallada del contenido relacionado al tema, m√≠nimo 15 palabras] con texto superpuesto '[frase clickbait espec√≠fica relacionada al contenido]' con el texto aplicando el siguiente estilo: ${thumbnailInstructions}"
   
   REGLAS ESTRICTAS - NO GENERAR PROMPTS CORTOS O INCOMPLETOS:
   - CADA prompt debe tener m√≠nimo 25 palabras de descripci√≥n visual
   - CADA prompt debe incluir una frase clickbait espec√≠fica entre comillas
   - CADA prompt debe terminar con la frase completa del estilo
   - NO generar prompts como "el texto con contorno negro" - ESO EST√Å PROHIBIDO
   - TODOS los prompts deben seguir el formato completo

REGLAS ESTRICTAS:
- EXACTAMENTE 5 prompts numerados del 1 al 5
- Cada prompt debe incluir la frase completa del estilo al final
- NO hacer referencias a estilos anteriores
`;

    // Validar que la API key est√© disponible
    if (!process.env.GOOGLE_API_KEY) {
      throw new Error('GOOGLE_API_KEY no est√° configurada en las variables de entorno');
    }

    // Llamar a la IA para generar metadatos
    const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });
    
    console.log(`ü§ñ Enviando request a Gemini para generar metadatos...`);
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const generatedMetadata = response.text();
    
    console.log(`‚úÖ Metadatos generados exitosamente`);
    
    // Guardar metadatos en archivo separado
    const metadataFile = path.join(projectDir, `${safeFolderName}_youtube_metadata.txt`);
    const metadataContent = `METADATA DE YOUTUBE PARA: ${projectState.topic}
Generado autom√°ticamente: ${new Date().toLocaleString()}
Proyecto: ${projectState.originalFolderName || projectState.topic}
Secciones: ${projectState.completedSections.length}/${projectState.totalSections}

====================================

${generatedMetadata}

====================================
GUI√ìN COMPLETO UTILIZADO:
====================================

${fullScript}`;
    
    fs.writeFileSync(metadataFile, metadataContent, 'utf8');
    console.log(`üíæ Metadatos guardados en: ${metadataFile}`);
    
    // Actualizar estado del proyecto con los metadatos
    const updatedProjectState = JSON.parse(fs.readFileSync(projectStateFile, 'utf8'));
    updatedProjectState.youtubeMetadata = {
      generatedAt: new Date().toISOString(),
      content: generatedMetadata,
      thumbnailStyle: thumbnailStyle,
      filename: `${safeFolderName}_youtube_metadata.txt`
    };
    updatedProjectState.lastModified = new Date().toISOString();
    
    fs.writeFileSync(projectStateFile, JSON.stringify(updatedProjectState, null, 2), 'utf8');
    
    console.log(`üé¨ ¬°Metadatos de YouTube generados autom√°ticamente para el proyecto completado!`);
    
    return updatedProjectState;
    
  } catch (error) {
    console.error(`‚ùå Error generando metadatos autom√°ticos:`, error);
    throw error;
  }
}

// Funci√≥n para actualizar secci√≥n completada
function updateCompletedSection(projectData, sectionNumber, sectionData) {
  try {
    const { topic, folderName } = projectData;
    
    const safeFolderName = folderName && folderName.trim() 
      ? createSafeFolderName(folderName.trim())
      : createSafeFolderName(topic);
    
    const projectStateFile = path.join('./public/outputs', safeFolderName, 'project_state.json');
    
    if (fs.existsSync(projectStateFile)) {
      const projectState = JSON.parse(fs.readFileSync(projectStateFile, 'utf8'));
      
      // Actualizar o agregar secci√≥n completada
      const existingSectionIndex = projectState.completedSections.findIndex(s => s.section === sectionNumber);
      
      const sectionInfo = {
        section: sectionNumber,
        script: sectionData.script,
        imageCount: sectionData.images ? sectionData.images.length : 0,
        hasImages: !sectionData.imagesSkipped && !sectionData.googleImagesMode,
        googleImagesMode: sectionData.googleImagesMode || false,
        imagesSkipped: sectionData.imagesSkipped || false,
        imagePrompts: sectionData.imagePrompts || [],
        completedAt: new Date().toISOString(),
        scriptFile: sectionData.scriptFile,
        promptsFile: sectionData.promptsFile
      };
      
      if (existingSectionIndex >= 0) {
        projectState.completedSections[existingSectionIndex] = sectionInfo;
      } else {
        projectState.completedSections.push(sectionInfo);
      }
      
      // Ordenar secciones por n√∫mero
      projectState.completedSections.sort((a, b) => a.section - b.section);
      
      projectState.lastModified = new Date().toISOString();
      projectState.currentSection = Math.max(projectState.currentSection, sectionNumber);
      
      fs.writeFileSync(projectStateFile, JSON.stringify(projectState, null, 2), 'utf8');
      console.log(`‚úÖ Secci√≥n ${sectionNumber} marcada como completada en el proyecto`);
      
      // üé¨ VERIFICAR SI EL PROYECTO EST√Å COMPLETO Y GENERAR METADATOS DE YOUTUBE
      const isProjectComplete = projectState.completedSections.length >= projectState.totalSections;
      console.log(`üìä Progreso del proyecto: ${projectState.completedSections.length}/${projectState.totalSections} - Completo: ${isProjectComplete}`);
      
      if (isProjectComplete && !projectState.youtubeMetadata) {
        console.log(`üé¨ ¬°Proyecto completo! Generando metadatos de YouTube autom√°ticamente...`);
        
        // Generar metadatos autom√°ticamente en background
        setTimeout(() => {
          generateYouTubeMetadataForProject(projectState).catch(error => {
            console.error('‚ùå Error generando metadatos autom√°ticos:', error);
          });
        }, 1000); // Peque√±o delay para que la respuesta HTTP se complete primero
      }
      
      return projectState;
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå Error actualizando secci√≥n completada:', error);
    return null;
  }
}

// Funci√≥n para reconstruir el estado de un proyecto desde las carpetas existentes
function reconstructProjectState(folderName) {
  try {
    console.log(`üîß Reconstruyendo estado del proyecto: ${folderName}`);
    
    const projectDir = path.join('./public/outputs', folderName);
    
    if (!fs.existsSync(projectDir)) {
      console.error(`‚ùå Directorio del proyecto no existe: ${projectDir}`);
      return null;
    }
    
    // Buscar carpetas de secciones
    const sectionDirs = fs.readdirSync(projectDir)
      .filter(item => {
        const itemPath = path.join(projectDir, item);
        return fs.statSync(itemPath).isDirectory() && item.startsWith('seccion_');
      })
      .sort((a, b) => {
        const numA = parseInt(a.replace('seccion_', ''));
        const numB = parseInt(b.replace('seccion_', ''));
        return numA - numB;
      });
    
    console.log(`üìÅ Carpetas de secciones encontradas: ${sectionDirs.join(', ')}`);
    
    if (sectionDirs.length === 0) {
      console.error(`‚ùå No se encontraron carpetas de secciones en ${projectDir}`);
      return null;
    }
    
    const completedSections = [];
    let totalSections = 0;
    let projectTopic = folderName; // Usar el nombre de la carpeta como fallback
    
    // Analizar cada secci√≥n
    for (const sectionDir of sectionDirs) {
      const sectionNumber = parseInt(sectionDir.replace('seccion_', ''));
      totalSections = Math.max(totalSections, sectionNumber);
      
      const sectionPath = path.join(projectDir, sectionDir);
      const files = fs.readdirSync(sectionPath);
      
      console.log(`üîç Analizando secci√≥n ${sectionNumber}: ${files.length} archivos`);
      
      // Buscar archivos de texto (script)
      const scriptFiles = files.filter(file => 
        file.endsWith('.txt') && !file.includes('metadata') && !file.includes('keywords')
      );
      
      // Buscar archivos de audio
      const audioFiles = files.filter(file => 
        file.endsWith('.wav') || file.endsWith('.mp3') || 
        file.endsWith('.m4a') || file.endsWith('.ogg')
      );
      
      // Buscar archivos de im√°genes
      const imageFiles = files.filter(file => 
        file.endsWith('.png') || file.endsWith('.jpg') || 
        file.endsWith('.jpeg') || file.endsWith('.webp')
      );
      
      // Buscar archivo de keywords
      const keywordFiles = files.filter(file => 
        file.includes('keywords') && file.endsWith('.txt')
      );
      
      let sectionScript = '';
      let sectionTitle = `Secci√≥n ${sectionNumber}`;
      
      // Leer el script si existe
      if (scriptFiles.length > 0) {
        try {
          const scriptFilePath = path.join(sectionPath, scriptFiles[0]);
          const fullScriptContent = fs.readFileSync(scriptFilePath, 'utf8');
          
          // Extraer solo el contenido del gui√≥n sin metadatos
          const scriptResult = extractScriptContent(fullScriptContent);
          sectionScript = scriptResult.content;
          
          // Si el script est√° vac√≠o, marcarlo para regeneraci√≥n posterior
          if (scriptResult.isEmpty && scriptResult.hasStructure) {
            console.warn(`‚ö†Ô∏è Secci√≥n ${sectionNumber} tiene estructura pero contenido vac√≠o - necesita regeneraci√≥n`);
            sectionScript = ''; // Marcar como vac√≠o para regenerar despu√©s
          }
          
          // Para el t√≠tulo, usar el contenido del archivo completo para extraer metadatos
          const firstLine = fullScriptContent.split('\n')[0];
          if (firstLine && firstLine.length > 0 && firstLine.length < 200) {
            sectionTitle = firstLine.trim();
          } else {
            // Usar las primeras 50 caracteres del script limpio como t√≠tulo (si no est√° vac√≠o)
            if (sectionScript.length > 0) {
              sectionTitle = sectionScript.substring(0, 50).trim() + '...';
            } else {
              sectionTitle = `Secci√≥n ${sectionNumber} (sin contenido)`;
            }
          }
          
          console.log(`üìù Script encontrado para secci√≥n ${sectionNumber}: ${sectionScript.length} caracteres (limpio), ${fullScriptContent.length} caracteres (completo)${scriptResult.isEmpty ? ' - VAC√çO' : ''}`);
        } catch (readError) {
          console.warn(`‚ö†Ô∏è Error leyendo script de secci√≥n ${sectionNumber}:`, readError.message);
        }
      }
      
      // Si es la primera secci√≥n, intentar inferir el tema del proyecto
      if (sectionNumber === 1 && sectionScript) {
        // Usar las primeras palabras del script como tema del proyecto
        const words = sectionScript.split(' ').slice(0, 10).join(' ');
        if (words.length > 10) {
          projectTopic = words.trim();
        }
      }
      
      const sectionData = {
        section: sectionNumber,
        title: sectionTitle,
        script: sectionScript,
        hasScript: scriptFiles.length > 0,
        hasAudio: audioFiles.length > 0,
        hasImages: imageFiles.length > 0,
        hasKeywords: keywordFiles.length > 0,
        scriptFile: scriptFiles[0] || null,
        audioFiles: audioFiles,
        imageFiles: imageFiles.map(file => `outputs/${folderName}/${sectionDir}/${file}`),
        keywordFile: keywordFiles[0] || null,
        fileCount: files.length
      };
      
      completedSections.push(sectionData);
      console.log(`‚úÖ Secci√≥n ${sectionNumber} reconstruida: script=${sectionData.hasScript}, audio=${sectionData.hasAudio}, im√°genes=${sectionData.hasImages}`);
    }
    
    // Construir el estado del proyecto
    const reconstructedState = {
      topic: projectTopic,
      originalFolderName: folderName,
      folderName: folderName,
      totalSections: totalSections,
      completedSections: completedSections,
      sectionsCompleted: completedSections.length,
      lastModified: new Date().toISOString(),
      reconstructed: true,
      reconstructedAt: new Date().toISOString(),
      voice: 'shimmer', // Valor por defecto
      imageModel: 'gemini2', // Valor por defecto
      llmModel: 'gemini-2.5-flash', // Valor por defecto (Flash m√°s r√°pido)
      scriptStyle: 'professional', // Valor por defecto
      imageCount: 5, // Valor por defecto
      minWords: 800,
      maxWords: 1100,
      skipImages: false,
      googleImages: false,
      localAIImages: false
    };
    
    console.log(`üîß Estado del proyecto reconstruido:`, {
      topic: reconstructedState.topic,
      totalSections: reconstructedState.totalSections,
      sectionsCompleted: reconstructedState.sectionsCompleted,
      carpetasAnalizadas: sectionDirs.length
    });
    
    return reconstructedState;
    
  } catch (error) {
    console.error(`‚ùå Error reconstruyendo estado del proyecto ${folderName}:`, error);
    return null;
  }
}

// Funci√≥n para obtener lista de proyectos disponibles
function getAvailableProjects() {
  try {
    const outputsDir = path.join('./public/outputs');
    
    if (!fs.existsSync(outputsDir)) {
      return [];
    }
    
    const projects = [];
    const folders = fs.readdirSync(outputsDir);
    
    for (const folder of folders) {
      const projectDir = path.join(outputsDir, folder);
      const projectStateFile = path.join(projectDir, 'project_state.json');
      
      if (fs.existsSync(projectStateFile) && fs.statSync(projectDir).isDirectory()) {
        try {
          const fileContent = fs.readFileSync(projectStateFile, 'utf8');
          
          // Verificar si el archivo est√° vac√≠o o incompleto
          if (!fileContent.trim()) {
            console.warn(`‚ö†Ô∏è Archivo JSON vac√≠o para proyecto ${folder}, intentando reconstruir...`);
            
            // Intentar reconstruir el estado del proyecto
            const reconstructedState = reconstructProjectState(folder);
            
            if (reconstructedState) {
              // Guardar el estado reconstruido
              fs.writeFileSync(projectStateFile, JSON.stringify(reconstructedState, null, 2), 'utf8');
              console.log(`‚úÖ Estado del proyecto ${folder} reconstruido y guardado`);
              
              projects.push({
                ...reconstructedState,
                folderPath: folder,
                sectionsCompleted: reconstructedState.completedSections?.length || 0,
                lastModifiedDate: new Date(reconstructedState.lastModified || Date.now()).toLocaleString()
              });
              continue;
            } else {
              console.error(`‚ùå No se pudo reconstruir el proyecto ${folder}`);
              continue;
            }
          }
          
          // Verificar si el JSON parece estar incompleto
          if (!fileContent.trim().endsWith('}') && !fileContent.trim().endsWith(']')) {
            console.warn(`‚ö†Ô∏è Archivo JSON parece incompleto para proyecto ${folder}: termina con '${fileContent.slice(-10)}'`);
            console.warn(`üìã Intentando reparar archivo JSON para proyecto ${folder}...`);
            
            // Intentar agregar llaves faltantes si es necesario
            let repairedContent = fileContent.trim();
            
            // Contar llaves abiertas vs cerradas
            const openBraces = (repairedContent.match(/\{/g) || []).length;
            const closeBraces = (repairedContent.match(/\}/g) || []).length;
            
            if (openBraces > closeBraces) {
              // Agregar llaves faltantes
              for (let i = 0; i < openBraces - closeBraces; i++) {
                repairedContent += '}';
              }
              console.log(`üîß Agregadas ${openBraces - closeBraces} llaves faltantes para proyecto ${folder}`);
            }
            
            try {
              const projectState = JSON.parse(repairedContent);
              
              // Si la reparaci√≥n fue exitosa, guardar el archivo corregido
              fs.writeFileSync(projectStateFile, JSON.stringify(projectState, null, 2), 'utf8');
              console.log(`‚úÖ Archivo JSON reparado y guardado para proyecto ${folder}`);
              
              projects.push({
                ...projectState,
                folderPath: folder,
                sectionsCompleted: projectState.completedSections?.length || 0,
                lastModifiedDate: new Date(projectState.lastModified || Date.now()).toLocaleString()
              });
              continue;
            } catch (repairError) {
              console.error(`‚ùå No se pudo reparar JSON para proyecto ${folder}:`, repairError.message);
              console.log(`üìÑ Contenido problem√°tico (primeros 200 chars): ${fileContent.substring(0, 200)}...`);
              continue;
            }
          }
          
          const projectState = JSON.parse(fileContent);
          projects.push({
            ...projectState,
            folderPath: folder,
            sectionsCompleted: projectState.completedSections?.length || 0,
            lastModifiedDate: new Date(projectState.lastModified || Date.now()).toLocaleString()
          });
        } catch (parseError) {
          console.warn(`‚ö†Ô∏è Error leyendo proyecto ${folder}:`, parseError);
          
          // Intentar crear un backup del archivo corrupto
          try {
            const backupPath = projectStateFile + '.corrupted.' + Date.now();
            fs.copyFileSync(projectStateFile, backupPath);
            console.log(`üóÉÔ∏è Backup del archivo corrupto creado: ${backupPath}`);
          } catch (backupError) {
            console.warn(`‚ö†Ô∏è No se pudo crear backup para ${folder}:`, backupError.message);
          }
        }
      }
    }
    
    console.log(`üìä Total proyectos v√°lidos: ${projects.length}`);
    
    // Ordenar por √∫ltima modificaci√≥n (m√°s recientes primero)
    projects.sort((a, b) => new Date(b.lastModified) - new Date(a.lastModified));
    
    return projects;
  } catch (error) {
    console.error('‚ùå Error obteniendo proyectos disponibles:', error);
    return [];
  }
}

// Funci√≥n para cargar estado completo de un proyecto
function loadProjectState(folderName) {
  try {
    const projectStateFile = path.join('./public/outputs', folderName, 'project_state.json');
    console.log(`üîç Buscando archivo de estado: ${projectStateFile}`);
    
    if (!fs.existsSync(projectStateFile)) {
      console.log(`‚ùå Archivo project_state.json no existe para proyecto "${folderName}"`);
      return null;
    }
    
    console.log(`‚úÖ Archivo de estado encontrado, leyendo contenido...`);
    
    let projectState;
    try {
      const fileContent = fs.readFileSync(projectStateFile, 'utf8');
      
      // Verificar si el archivo est√° vac√≠o o incompleto
      if (!fileContent.trim()) {
        console.warn(`‚ö†Ô∏è Archivo JSON vac√≠o para proyecto "${folderName}", intentando reconstruir...`);
        
        // Intentar reconstruir el estado del proyecto
        const reconstructedState = reconstructProjectState(folderName);
        
        if (reconstructedState) {
          // Guardar el estado reconstruido
          fs.writeFileSync(projectStateFile, JSON.stringify(reconstructedState, null, 2), 'utf8');
          console.log(`‚úÖ Estado del proyecto "${folderName}" reconstruido y guardado`);
          projectState = reconstructedState;
        } else {
          console.error(`‚ùå No se pudo reconstruir el proyecto "${folderName}"`);
          return null;
        }
      }
      
      // Intentar parsear directamente primero
      try {
        projectState = JSON.parse(fileContent);
      } catch (initialParseError) {
        console.warn(`‚ö†Ô∏è Error inicial parseando JSON, intentando reparar...`);
        
        // Verificar si el JSON parece estar incompleto
        if (!fileContent.trim().endsWith('}') && !fileContent.trim().endsWith(']')) {
          console.warn(`‚ö†Ô∏è Archivo JSON parece incompleto para proyecto "${folderName}": termina con '${fileContent.slice(-10)}'`);
          
          // Intentar agregar llaves faltantes si es necesario
          let repairedContent = fileContent.trim();
          
          // Contar llaves abiertas vs cerradas
          const openBraces = (repairedContent.match(/\{/g) || []).length;
          const closeBraces = (repairedContent.match(/\}/g) || []).length;
          
          if (openBraces > closeBraces) {
            // Agregar llaves faltantes
            for (let i = 0; i < openBraces - closeBraces; i++) {
              repairedContent += '}';
            }
            console.log(`üîß Agregadas ${openBraces - closeBraces} llaves faltantes para proyecto "${folderName}"`);
            
            try {
              projectState = JSON.parse(repairedContent);
              
              // Si la reparaci√≥n fue exitosa, guardar el archivo corregido
              fs.writeFileSync(projectStateFile, JSON.stringify(projectState, null, 2), 'utf8');
              console.log(`‚úÖ Archivo JSON reparado y guardado para proyecto "${folderName}"`);
            } catch (repairError) {
              console.error(`‚ùå No se pudo reparar JSON para proyecto "${folderName}":`, repairError.message);
              
              // Crear backup del archivo corrupto
              try {
                const backupPath = projectStateFile + '.corrupted.' + Date.now();
                fs.copyFileSync(projectStateFile, backupPath);
                console.log(`üóÉÔ∏è Backup del archivo corrupto creado: ${backupPath}`);
              } catch (backupError) {
                console.warn(`‚ö†Ô∏è No se pudo crear backup: ${backupError.message}`);
              }
              
              return null;
            }
          } else {
            // No se pudo determinar c√≥mo reparar
            console.error(`‚ùå No se pudo reparar JSON para proyecto "${folderName}"`);
            console.log(`üìÑ Contenido problem√°tico (primeros 200 chars): ${fileContent.substring(0, 200)}...`);
            return null;
          }
        } else {
          // El archivo parece completo pero a√∫n no se puede parsear
          throw initialParseError;
        }
      }
      
      console.log(`üìä Estado del proyecto "${folderName}" cargado:`, {
        topic: projectState.topic,
        totalSections: projectState.totalSections,
        completedSections: projectState.completedSections?.length || 0
      });
    } catch (parseError) {
      console.error(`‚ùå Error parseando JSON del proyecto "${folderName}":`, parseError.message);
      console.log(`üìÑ Contenido del archivo (primeros 500 chars):`);
      console.log(fs.readFileSync(projectStateFile, 'utf8').substring(0, 500) + '...');
      return null;
    }
    
    // Cargar datos adicionales de cada secci√≥n completada
    // Usar 'sections' si existe, o 'completedSections' si es un array
    let sectionsToProcess = [];
    
    if (projectState.sections && Array.isArray(projectState.sections)) {
      console.log(`üìö Proyecto "${folderName}" tiene ${projectState.sections.length} secciones en formato nuevo`);
      sectionsToProcess = projectState.sections;
      // Asegurar que completedSections apunte a las secciones reales
      projectState.completedSections = projectState.sections;
    } else if (projectState.completedSections && Array.isArray(projectState.completedSections)) {
      console.log(`üìö Proyecto "${folderName}" tiene ${projectState.completedSections.length} secciones en formato legacy`);
      sectionsToProcess = projectState.completedSections;
    } else {
      console.log(`‚ö†Ô∏è Proyecto "${folderName}" no tiene secciones completadas o completedSections no es un array`);
      // Asegurar que completedSections sea un array vac√≠o si no existe o no es v√°lido
      projectState.completedSections = [];
      sectionsToProcess = [];
    }
    
    // Procesar cada secci√≥n para agregar informaci√≥n de archivos
    for (const section of sectionsToProcess) {
      const sectionDir = path.join('./public/outputs', folderName, `seccion_${section.section}`);
      
      // üìù CARGAR SCRIPT DESDE ARCHIVO
      const scriptFileName = `${folderName}_seccion_${section.section}_guion.txt`;
      const scriptFilePath = path.join(sectionDir, scriptFileName);
      
      if (fs.existsSync(scriptFilePath)) {
        try {
          const scriptContent = fs.readFileSync(scriptFilePath, 'utf8');
          section.script = scriptContent.trim();
          console.log(`üìù Script cargado para secci√≥n ${section.section}: ${scriptContent.length} caracteres`);
        } catch (error) {
          console.error(`‚ùå Error leyendo script de secci√≥n ${section.section}:`, error);
        }
      } else {
        console.log(`üìù Archivo de script no encontrado para secci√≥n ${section.section}: ${scriptFilePath}`);
        // Verificar si el script est√° guardado en el project_state.json (formato legacy)
        if (section.script) {
          console.log(`üìù Script encontrado en project_state.json para secci√≥n ${section.section}`);
        }
      }
      
      // üé® CARGAR PROMPTS DE IMAGEN DESDE ARCHIVO
      const promptsFileName = `${folderName}_seccion_${section.section}_prompts_imagenes.txt`;
      const promptsFilePath = path.join(sectionDir, promptsFileName);
      
      if (fs.existsSync(promptsFilePath)) {
        try {
          const promptsContent = fs.readFileSync(promptsFilePath, 'utf8');
          
          // Parsear el archivo de prompts que tiene formato espec√≠fico
          const lines = promptsContent.split('\n');
          const prompts = [];
          let isInPromptsSection = false;
          
          lines.forEach(line => {
            const trimmedLine = line.trim();
            
            // Comenzar a leer prompts despu√©s de "PROMPTS GENERADOS:"
            if (trimmedLine === 'PROMPTS GENERADOS:') {
              isInPromptsSection = true;
              return;
            }
            
            // Si estamos en la secci√≥n de prompts y la l√≠nea no est√° vac√≠a
            if (isInPromptsSection && trimmedLine.length > 0) {
              // Filtrar l√≠neas que no son prompts (l√≠neas separadoras, etc.)
              if (!trimmedLine.startsWith('=') && !trimmedLine.startsWith('Prompts generados autom√°ticamente')) {
                // Remover numeraci√≥n (ej: "1. ") del inicio del prompt
                const prompt = trimmedLine.replace(/^\d+\.\s*/, '').trim();
                if (prompt.length > 0) {
                  prompts.push(prompt);
                }
              }
            }
          });
          
          if (prompts.length > 0) {
            section.imagePrompts = prompts;
            console.log(`üé® Prompts cargados para secci√≥n ${section.section}: ${prompts.length} prompts`);
          } else {
            console.log(`‚ö†Ô∏è Archivo de prompts encontrado pero no se pudieron extraer prompts v√°lidos para secci√≥n ${section.section}`);
          }
        } catch (error) {
          console.error(`‚ùå Error leyendo prompts de secci√≥n ${section.section}:`, error);
        }
      } else {
        console.log(`üé® Archivo de prompts no encontrado para secci√≥n ${section.section}: ${promptsFilePath}`);
        // Verificar si los prompts est√°n en el project_state.json (formato legacy)
        if (section.imagePrompts && section.imagePrompts.length > 0) {
          console.log(`üé® Prompts encontrados en project_state.json para secci√≥n ${section.section}: ${section.imagePrompts.length} prompts`);
        }
      }
      
      // Verificar si existen archivos de audio
      if (fs.existsSync(sectionDir)) {
        const audioFiles = fs.readdirSync(sectionDir).filter(file => 
          file.endsWith('.wav') || file.endsWith('.mp3')
        );
        if (audioFiles.length > 0) {
          section.hasAudio = true;
          section.audioFiles = audioFiles.map(file => `outputs/${folderName}/seccion_${section.section}/${file}`);
          console.log(`üéµ Secci√≥n ${section.section}: ${audioFiles.length} archivo(s) de audio encontrado(s)`);
        }
        
        // Verificar si existen las im√°genes
        const imageFiles = fs.readdirSync(sectionDir).filter(file => 
          file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.jpeg')
        );
        if (imageFiles.length > 0) {
          section.hasImages = true;
          section.imageFiles = imageFiles.map(file => `outputs/${folderName}/seccion_${section.section}/${file}`);
          console.log(`üñºÔ∏è Secci√≥n ${section.section}: ${imageFiles.length} archivo(s) de imagen encontrado(s)`);
        }
        
        // Verificar archivos de texto (guiones y prompts)
        const textFiles = fs.readdirSync(sectionDir).filter(file => 
          file.endsWith('.txt')
        );
        if (textFiles.length > 0) {
          section.textFiles = textFiles.map(file => `outputs/${folderName}/seccion_${section.section}/${file}`);
          console.log(`üìù Secci√≥n ${section.section}: ${textFiles.length} archivo(s) de texto encontrado(s)`);
        }
      } else {
        console.log(`üìÅ Directorio de secci√≥n ${section.section} no encontrado: ${sectionDir}`);
      }
    }
    
    // üé¨ CARGAR METADATOS DE YOUTUBE SI EXISTEN
    // Intentar ambos formatos de nombre de archivo para compatibilidad
    const metadataFile1 = path.join('./public/outputs', folderName, `${folderName}_metadata_youtube.txt`);
    const metadataFile2 = path.join('./public/outputs', folderName, `${folderName}_youtube_metadata.txt`);
    
    let metadataFile = null;
    if (fs.existsSync(metadataFile1)) {
      metadataFile = metadataFile1;
      console.log(`üìΩÔ∏è Metadatos de YouTube encontrados (formato 1): ${metadataFile1}`);
    } else if (fs.existsSync(metadataFile2)) {
      metadataFile = metadataFile2;
      console.log(`üìΩÔ∏è Metadatos de YouTube encontrados (formato 2): ${metadataFile2}`);
    } else {
      console.log(`üìΩÔ∏è No se encontraron metadatos de YouTube para ${folderName}`);
    }
    
    if (metadataFile) {
      try {
        const metadataContent = fs.readFileSync(metadataFile, 'utf8');
        const metadataFileName = path.basename(metadataFile);
        console.log(`üìΩÔ∏è Metadatos de YouTube encontrados para ${folderName}`);
        
        // Si no hay metadatos en el estado pero s√≠ en archivo, agregarlos
        if (!projectState.youtubeMetadata) {
          projectState.youtubeMetadata = {
            generatedAt: fs.statSync(metadataFile).mtime.toISOString(),
            content: metadataContent,
            filename: metadataFileName,
            fileExists: true
          };
          
          console.log(`‚úÖ Metadatos cargados desde archivo para proyecto ${folderName}`);
        } else {
          // Asegurar que el flag de archivo existe est√© presente
          projectState.youtubeMetadata.fileExists = true;
          projectState.youtubeMetadata.filename = metadataFileName;
        }
      } catch (error) {
        console.error(`‚ùå Error cargando metadatos de YouTube:`, error);
      }
    }
    
    // üìÅ Agregar el nombre de la carpeta al estado del proyecto
    projectState.folderName = folderName;
    
    return projectState;
  } catch (error) {
    console.error('‚ùå Error cargando estado del proyecto:', error);
    return null;
  }
}

// Funci√≥n para crear nombre de carpeta seguro basado en el tema
function createSafeFolderName(topic) {
  if (!topic || typeof topic !== 'string') {
    console.warn('‚ö†Ô∏è createSafeFolderName recibi√≥ valor inv√°lido:', topic);
    return 'proyecto_sin_nombre';
  }
  
  const safeName = topic
    .toLowerCase()
    .replace(/[^a-z0-9\s]/g, '') // Remover caracteres especiales
    .replace(/\s+/g, '_') // Reemplazar espacios con guiones bajos
    .substring(0, 50); // Limitar longitud
    
  console.log(`üìÅ createSafeFolderName: "${topic}" ‚Üí "${safeName}"`);
  return safeName;
}

// Funci√≥n para limpiar el texto del gui√≥n de contenido no deseado
function cleanScriptText(text) {
  // Validar que text sea una string
  if (!text || typeof text !== 'string') {
    console.log(`‚ö†Ô∏è WARNING - cleanScriptText recibi√≥:`, typeof text, text);
    return String(text || '').trim();
  }
  
  let cleanText = text.trim();
  
  // Remover patrones comunes de texto no deseado
  const unwantedPatterns = [
    /^Secci√≥n \d+:/gi,
    /^Gui√≥n:/gi,
    /^Texto del gui√≥n:/gi,
    /^Contenido:/gi,
    /^\*\*Secci√≥n \d+\*\*/gi,
    /^\# Secci√≥n \d+/gi,
    /^---+/g,
    /^\*\*Gui√≥n para TTS:\*\*/gi,
    /^\*\*Respuesta:\*\*/gi,
    /^Aqu√≠ est√° el gui√≥n:/gi,
    /^El gui√≥n para la secci√≥n \d+ es:/gi,
  ];
  
  // Aplicar limpieza de patrones
  unwantedPatterns.forEach(pattern => {
    cleanText = cleanText.replace(pattern, '').trim();
  });
  
  // Remover l√≠neas que parezcan comentarios o explicaciones
  const lines = cleanText.split('\n');
  const filteredLines = lines.filter(line => {
    const trimmedLine = line.trim();
    // Filtrar l√≠neas que parezcan comentarios o explicaciones
    return !trimmedLine.startsWith('*') && 
           !trimmedLine.startsWith('#') && 
           !trimmedLine.startsWith('//') &&
           !trimmedLine.startsWith('Nota:') &&
           !trimmedLine.startsWith('Aclaraci√≥n:') &&
           trimmedLine.length > 0;
  });
  
  return filteredLines.join('\n').trim();
}

// Funci√≥n para crear estructura de carpetas
function createProjectStructure(topic, section, customFolderName = null) {
  // Si hay customFolderName, usarlo directamente (ya viene normalizado del projectKey)
  // Sino, normalizar el topic
  const folderName = customFolderName && customFolderName.trim() 
    ? customFolderName.trim()  // Ya viene normalizado, no aplicar createSafeFolderName otra vez
    : createSafeFolderName(topic);
    
  const outputsDir = path.join('./public/outputs');
  const projectDir = path.join(outputsDir, folderName);
  const sectionDir = path.join(projectDir, `seccion_${section}`);
  
  // Crear todas las carpetas necesarias
  if (!fs.existsSync(outputsDir)) {
    fs.mkdirSync(outputsDir, { recursive: true });
  }
  if (!fs.existsSync(projectDir)) {
    fs.mkdirSync(projectDir, { recursive: true });
  }
  if (!fs.existsSync(sectionDir)) {
    fs.mkdirSync(sectionDir, { recursive: true });
  }
  
  return {
    outputsDir,
    projectDir,
    sectionDir,
    safeTopicName: folderName, // Este es el nombre real de la carpeta que se est√° usando
    folderName: folderName     // Agregar tambi√©n como folderName para consistencia
  };
}

// Funci√≥n para guardar archivo de audio WAV
async function saveWaveFile(filename, pcmData, channels = 1, rate = 24000, sampleWidth = 2) {
  return new Promise((resolve, reject) => {
    const writer = new wav.FileWriter(filename, {
      channels,
      sampleRate: rate,
      bitDepth: sampleWidth * 8,
    });

    writer.on('finish', resolve);
    writer.on('error', reject);

    writer.write(pcmData);
    writer.end();
  });
}

// Funci√≥n para determinar el tono de narraci√≥n basado en el tema
function getNarrationTone(topic) {
  // Tono fijo: c√°lido y amigable para todos los temas
  return " ";
}

// Funci√≥n para generar audio del gui√≥n
async function generateStoryAudio(script, voiceName = 'Orus', sectionDir, topic, section, customNarrationStyle = null) {
  try {
    console.log(`üéµ Generando narraci√≥n del gui√≥n con voz: ${voiceName}...`);
    console.log(`üìù Script a narrar (primeros 100 caracteres): ${script.substring(0, 100)}...`);
    console.log(`üìè Longitud del script: ${script.length} caracteres`);
    
    // Verificar si el script es demasiado largo
    if (script.length > 5000) {
      console.log(`‚ö†Ô∏è Script muy largo (${script.length} caracteres), truncando a 5000...`);
      script = script.substring(0, 5000) + "...";
    }
    
    // Usar estilo de narraci√≥n personalizado si se proporciona, sino usar el tono por defecto
    let narrationTone;
    if (customNarrationStyle && customNarrationStyle.trim()) {
      narrationTone = `${customNarrationStyle.trim()}: `;
      console.log(`üé≠ Estilo de narraci√≥n personalizado: ${narrationTone}`);
    } else {
      narrationTone = getNarrationTone(topic);
      console.log(`üé≠ Tono de narraci√≥n por defecto: ${narrationTone}`);
    }
    
    // Intentar con configuraci√≥n m√°s simple
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash-preview-tts",
      contents: [{ 
        parts: [{ 
          text: `Narra el siguiente gui√≥n ${narrationTone}:

${script}`
        }] 
      }],
      config: {
        responseModalities: ['AUDIO'],
        speechConfig: {
          voiceConfig: {
            prebuiltVoiceConfig: { 
              voiceName: voiceName 
            }
          }
        }
      }
    });

    console.log(`üîç Respuesta recibida:`, {
      candidates: response.candidates?.length || 0,
      hasContent: !!response.candidates?.[0]?.content,
      hasParts: !!response.candidates?.[0]?.content?.parts,
      partsLength: response.candidates?.[0]?.content?.parts?.length || 0
    });

    const audioData = response.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;
    
    if (!audioData) {
      console.log(`‚ùå Estructura de respuesta completa:`, JSON.stringify(response, null, 2));
      throw new Error('No se gener√≥ audio - revisa los logs para m√°s detalles');
    }

    console.log(`‚úÖ Audio data recibido, tama√±o: ${audioData.length} caracteres`);

    const audioBuffer = Buffer.from(audioData, 'base64');
    const safeTopicName = createSafeFolderName(topic);
    const fileName = `${safeTopicName}_seccion_${section}_${Date.now()}.wav`;
    const filePath = path.join(sectionDir, fileName);
    
    await saveWaveFile(filePath, audioBuffer);
    console.log(`‚úÖ Audio generado exitosamente con voz ${voiceName} en: ${filePath}`);
    
    // Retornar la ruta relativa para acceso web
    const relativePath = path.relative('./public', filePath).replace(/\\/g, '/');
    return relativePath;
  } catch (error) {
    console.error('‚ùå Error generando audio:', error.message);
    console.error('‚ùå Error completo:', error);
    
    // Si es un error de API, intentar diagnosticar
    if (error.message && error.message.includes('API')) {
      console.error('‚ùå Posible problema con la API de Gemini TTS');
    }
    
    // Crear un archivo de texto como fallback
    console.log('üìù Generando archivo de texto como alternativa...');
    const safeTopicName = createSafeFolderName(topic);
    const textFileName = `${safeTopicName}_seccion_${section}_guion_audio_fallback.txt`;
    const textFilePath = path.join(sectionDir, textFileName);
    
    const textContent = `GUI√ìN PARA AUDIO - SECCI√ìN ${section}
===============================
Tema: ${topic}
Voz solicitada: ${voiceName}
Fecha: ${new Date().toLocaleString()}
Estado: Audio no disponible (usando texto como fallback)

CONTENIDO DEL GUI√ìN:
${script}

===============================
NOTA: Este archivo se gener√≥ porque el servicio de Text-to-Speech 
no est√° disponible temporalmente. El contenido del gui√≥n se ha 
guardado para referencia futura.
`;
    
    try {
      fs.writeFileSync(textFilePath, textContent, 'utf8');
      const textRelativePath = path.relative('./public', textFilePath).replace(/\\/g, '/');
      console.log(`üìù Archivo de texto fallback generado: ${textRelativePath}`);
    } catch (writeError) {
      console.error('‚ùå Error creando archivo de texto:', writeError);
    }
    
    throw new Error(`Error al generar audio: ${error.message}. El servicio TTS puede estar temporalmente no disponible.`);
  }
}

// Funci√≥n para generar im√°genes con diferentes modelos
async function generateImageWithModel(ai, prompt, modelType) {
  if (modelType === 'gemini2') {
    console.log(`ü§ñ Usando Gemini 2.0 Flash nativo...`);
    // Usar Gemini 2.0 nativo con responseModalities
    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-preview-image-generation",
      contents: prompt,
      config: {
        responseModalities: [Modality.TEXT, Modality.IMAGE],
      },
    });

    const images = [];
    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData && part.inlineData.mimeType?.includes('image')) {
        images.push({
          image: {
            imageBytes: part.inlineData.data
          }
        });
      }
    }
    
    return {
      generatedImages: images
    };
  } else {
    console.log(`ü§ñ Usando Imagen 4.0 tradicional...`);
    // Usar Imagen 4.0 (m√©todo tradicional)
    return await ai.models.generateImages({
      model: 'imagen-4.0-generate-preview-06-06',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        aspectRatio: "16:9",
      },
    });
  }
}

// =====================================
// FUNCIONES PARA IA LOCAL (COMFYUI + FLUX)
// =====================================

// Inicializar cliente ComfyUI
const comfyUIClient = new ComfyUIClient('http://127.0.0.1:8188');

// Funci√≥n para generar im√°genes usando IA Local (ComfyUI + Flux)
async function generateLocalAIImages(imagePrompts, additionalInstructions, sectionDir, sectionNumber, customSettings = null, keepAlive = false) {
  const generatedImages = [];
  
  try {
    console.log(`ü§ñ Iniciando generaci√≥n de ${imagePrompts.length} im√°genes con ComfyUI + Flux...`);
    
    // 1. Iniciar ComfyUI autom√°ticamente
    console.log('üöÄ Iniciando ComfyUI para la secci√≥n...');
    const comfyUIStarted = await startComfyUI();
    if (!comfyUIStarted) {
      throw new Error('No se pudo iniciar ComfyUI autom√°ticamente');
    }
    
    // 2. Verificar conexi√≥n con ComfyUI (ya deber√≠a estar listo por startComfyUI)
    const connectionCheck = await comfyUIClient.checkConnection();
    if (!connectionCheck.success) {
      throw new Error(`No se puede conectar a ComfyUI: ${connectionCheck.error}`);
    }
    
    console.log('‚úÖ ComfyUI iniciado y listo para generar im√°genes');
    
    for (let index = 0; index < imagePrompts.length; index++) {
      const basePrompt = imagePrompts[index].trim();
      
      // Usar el prompt directamente ya que las instrucciones adicionales est√°n integradas desde el LLM
      const finalPrompt = basePrompt;
      console.log(`‚úÖ Las instrucciones adicionales ya est√°n integradas en el prompt desde el LLM`);
      
      console.log(`üé® Generando imagen ${index + 1}/${imagePrompts.length} con ComfyUI + Flux...`);
      console.log(`üìù Prompt final: ${finalPrompt.substring(0, 100)}...`);
      
      try {
        // Configurar opciones (usar configuraci√≥n personalizada si est√° disponible)
        const options = customSettings ? {
          width: parseInt(customSettings.width) || 1280,
          height: parseInt(customSettings.height) || 720,
          steps: parseInt(customSettings.steps) || 25,
          cfg: 1,
          guidance: parseFloat(customSettings.guidance) || 3.5,
          sampler: customSettings.sampler || "euler",
          scheduler: customSettings.scheduler || "simple",
          model: "flux1-dev-fp8.safetensors", // Modelo Flux optimizado
          negativePrompt: customSettings.negativePrompt || "low quality, blurry, distorted",
          timeout: Math.max(180, parseInt(customSettings.steps) * 6) // Timeout din√°mico basado en pasos
        } : {
          width: 1280,
          height: 720,
          steps: 25, // Valor por defecto
          cfg: 1,
          guidance: 3.5,
          sampler: "euler",
          scheduler: "simple",
          model: "flux1-dev-fp8.safetensors", // Modelo Flux optimizado
          negativePrompt: "low quality, blurry, distorted",
          timeout: 180 // 3 minutos timeout por defecto
        };
        
        console.log(`‚öôÔ∏è Usando configuraci√≥n ComfyUI:`, {
          resolution: `${options.width}x${options.height}`,
          steps: options.steps,
          guidance: options.guidance,
          sampler: options.sampler,
          scheduler: options.scheduler
        });
        
        // Generar imagen con ComfyUI usando reinicio autom√°tico en caso de timeout
        const result = await generateImageWithAutoRestart(finalPrompt, options);
        
        if (result.success && result.localPath) {
          // Copiar imagen a la carpeta de la secci√≥n
          const imageFileName = `comfyui_seccion_${sectionNumber}_imagen_${index + 1}_${Date.now()}.png`;
          const imageFilePath = path.join(sectionDir, imageFileName);
          
          // Copiar archivo de la ubicaci√≥n temporal a la carpeta de la secci√≥n
          fs.copyFileSync(result.localPath, imageFilePath);
          console.log(`üíæ Imagen ComfyUI ${index + 1} guardada en: ${imageFilePath}`);
          
          // Eliminar la copia temporal de la carpeta outputs general
          try {
            if (fs.existsSync(result.localPath)) {
              fs.unlinkSync(result.localPath);
              console.log(`üóëÔ∏è Copia temporal eliminada de: ${result.localPath}`);
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è No se pudo eliminar copia temporal: ${error.message}`);
          }
          
          // Retornar ruta relativa para acceso web
          const relativePath = path.relative('./public', imageFilePath).replace(/\\/g, '/');
          
          generatedImages.push({
            path: relativePath,
            prompt: finalPrompt,
            filename: imageFileName,
            source: 'IA Local (ComfyUI + Flux)',
            index: index + 1,
            promptId: result.promptId
          });
          
          console.log(`‚úÖ Imagen ${index + 1} generada exitosamente con ComfyUI + Flux`);
        } else {
          throw new Error(`Error en generaci√≥n de ComfyUI: ${result.error || 'Respuesta inv√°lida'}`);
        }
        
        // Peque√±a pausa entre generaciones para no sobrecargar el servidor
        if (index < imagePrompts.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
      } catch (imageError) {
        console.error(`‚ùå Error generando imagen ${index + 1} con ComfyUI:`, imageError.message);
        
        // Mensaje espec√≠fico para conexi√≥n rechazada
        let errorMessage = imageError.message;
        if (imageError.message.includes('ECONNREFUSED') || imageError.message.includes('connect')) {
          errorMessage = 'Servidor ComfyUI no disponible en localhost:8188. Aseg√∫rate de que ComfyUI est√© ejecut√°ndose.';
          console.error(`üîå CONEXI√ìN: ${errorMessage}`);
        }
        
        // Continuar con la siguiente imagen en caso de error
        generatedImages.push({
          path: null,
          prompt: finalPrompt,
          filename: null,
          source: 'IA Local (ComfyUI Error)',
          index: index + 1,
          error: errorMessage
        });
      }
    }
    
    console.log(`üé® Generaci√≥n de ComfyUI completada: ${generatedImages.filter(img => img.path).length}/${imagePrompts.length} exitosas`);
    
    // 3. Cerrar ComfyUI solo si no se debe mantener vivo
    if (!keepAlive) {
      console.log('üõë Cerrando ComfyUI para liberar GPU...');
      await stopComfyUI();
      console.log('‚úÖ ComfyUI cerrado, GPU liberada');
    } else {
      console.log('üîÑ Manteniendo ComfyUI activo para pr√≥ximas secciones...');
    }
    
    return generatedImages;
    
  } catch (error) {
    console.error(`‚ùå Error general en generaci√≥n de ComfyUI:`, error.message);
    
    // Cerrar ComfyUI solo si no se debe mantener vivo, incluso si hay errores
    if (!keepAlive) {
      console.log('üõë Cerrando ComfyUI debido a error...');
      await stopComfyUI();
      console.log('‚úÖ ComfyUI cerrado despu√©s del error');
    } else {
      console.log('‚ö†Ô∏è Error en ComfyUI pero manteni√©ndolo activo para pr√≥ximas secciones...');
    }
    
    throw error;
  }
}

// Funci√≥n para generar archivo project_state.json
function generateProjectStateFile(projectData, requestData) {
  try {
    const { sections, imagePrompts, chapterStructure } = projectData;
    const { 
      topic, folderName, voice, imageModel, scriptStyle, customStyleInstructions, 
      promptModifier, imageCount, skipImages, googleImages, applioVoice 
    } = requestData;
    
    const projectState = {
      topic: topic,
      folderName: folderName,
      originalFolderName: folderName,
      totalSections: sections.length,
      currentSection: sections.length,
      voice: voice || 'Orus',
      imageModel: imageModel || 'gemini2',
      scriptStyle: scriptStyle || 'professional',
      customStyleInstructions: customStyleInstructions || null,
      promptModifier: promptModifier || '',
      imageCount: imageCount || 5,
      skipImages: skipImages || false,
      googleImages: googleImages || false,
      applioVoice: applioVoice || null,
      createdAt: new Date().toISOString(),
      lastModified: new Date().toISOString(),
      completedSections: sections.map((section, index) => ({
        section: section.section,
        script: section.script,
        imageCount: 0,
        hasImages: !skipImages,
        googleImagesMode: googleImages || false,
        imagesSkipped: skipImages || false,
        imagePrompts: imagePrompts[index]?.prompts || [],
        completedAt: new Date().toISOString(),
        scriptFile: {
          path: `outputs/${folderName}/seccion_${section.section}/${folderName}_seccion_${section.section}_guion.txt`,
          filename: `${folderName}_seccion_${section.section}_guion.txt`,
          saved: true
        },
        promptsFile: {
          path: `outputs/${folderName}/seccion_${section.section}/${folderName}_seccion_${section.section}_prompts_imagenes.txt`,
          filename: `${folderName}_seccion_${section.section}_prompts_imagenes.txt`,
          saved: true
        }
      }))
    };
    
    // Guardar el archivo en la carpeta del proyecto
    const baseTopic = topic.split(' ')[0] || 'Proyecto';
    const folderStructure = createProjectStructure(baseTopic, 1, folderName);
    const projectStateFilePath = path.join(folderStructure.projectDir, 'project_state.json');
    
    fs.writeFileSync(projectStateFilePath, JSON.stringify(projectState, null, 2), 'utf8');
    console.log(`üìÑ Archivo project_state.json guardado: ${projectStateFilePath}`);
    
    return projectStateFilePath;
    
  } catch (error) {
    console.error('‚ùå Error generando project_state.json:', error);
    return null;
  }
}

// =====================================
// FUNCIONES DE MEMORIA DE PROMPTS PARA CONSISTENCIA
// =====================================

// Funci√≥n para obtener prompts anteriores de un proyecto para mantener consistencia
function getPreviousImagePrompts(projectKey, currentSection) {
  try {
    const projectStateFile = `./public/outputs/${projectKey}/project_state.json`;
    
    if (!fs.existsSync(projectStateFile)) {
      console.log(`üìù No hay estado previo del proyecto para ${projectKey}`);
      return { previousPrompts: [], contextInfo: null };
    }
    
    const projectState = JSON.parse(fs.readFileSync(projectStateFile, 'utf8'));
    const completedSections = projectState.completedSections || [];
    
    // Verificar que completedSections sea un array
    if (!Array.isArray(completedSections)) {
      console.log(`‚ö†Ô∏è completedSections no es un array, iniciando como array vac√≠o`);
      return { previousPrompts: [], contextInfo: null };
    }
    
    // Obtener los √∫ltimos 2 prompts de secciones anteriores
    const previousSections = completedSections
      .filter(section => section.section < currentSection)
      .sort((a, b) => b.section - a.section) // Ordenar por secci√≥n m√°s reciente primero
      .slice(0, 2); // Tomar las 2 m√°s recientes
    
    const previousPrompts = [];
    let contextInfo = null;
    
    if (previousSections.length > 0) {
      // Extraer prompts de secciones anteriores
      for (const section of previousSections) {
        const sectionPrompts = section.imagePrompts || [];
        if (sectionPrompts.length > 0) {
          // Tomar los primeros 2 prompts de cada secci√≥n para mantener consistencia
          const selectedPrompts = sectionPrompts.slice(0, 2);
          previousPrompts.push(...selectedPrompts.map(prompt => ({
            sectionNumber: section.section,
            prompt: prompt
          })));
        }
      }
      
      // Crear informaci√≥n de contexto para consistencia
      contextInfo = {
        lastSection: previousSections[0].section,
        totalPreviousPrompts: previousPrompts.length,
        projectTopic: projectState.topic,
        projectStyle: projectState.scriptStyle || 'professional'
      };
      
      console.log(`üß† Recuperados ${previousPrompts.length} prompts de ${previousSections.length} secciones anteriores para consistencia`);
    } else {
      console.log(`üìù No hay secciones anteriores para la secci√≥n ${currentSection}`);
    }
    
    return { previousPrompts, contextInfo };
    
  } catch (error) {
    console.error('‚ùå Error obteniendo prompts anteriores:', error);
    return { previousPrompts: [], contextInfo: null };
  }
}

// Funci√≥n para construir contexto de consistencia para el LLM
function buildConsistencyContext(previousPrompts, contextInfo) {
  if (!previousPrompts || previousPrompts.length === 0) {
    return '';
  }
  
  let consistencyContext = `\n\nPARA MANTENER CONSISTENCIA VISUAL:
Bas√°ndote en las im√°genes generadas anteriormente en este proyecto, mant√©n consistencia en la descripci√≥n de personajes, lugares y estilo visual.

PROMPTS DE IM√ÅGENES ANTERIORES (√∫salos como referencia para personajes y lugares):`;
  
  previousPrompts.forEach((item, index) => {
    consistencyContext += `\n${index + 1}. [Secci√≥n ${item.sectionNumber}]: ${item.prompt}`;
  });
  
  consistencyContext += `\n\nREQUISITOS DE CONSISTENCIA:
- Si aparecen los mismos personajes, mant√©n sus caracter√≠sticas f√≠sicas y vestimenta
- Si aparecen los mismos lugares, mant√©n su arquitectura y ambiente
- Mant√©n el mismo estilo art√≠stico y paleta de colores
- Si introduces nuevos elementos, que sean coherentes con lo ya establecido`;
  
  return consistencyContext;
}

// Funci√≥n para integrar instrucciones adicionales en el prompt del LLM
function integrateAdditionalInstructions(basePrompt, additionalInstructions) {
  if (!additionalInstructions || !additionalInstructions.trim()) {
    return basePrompt;
  }
  
  // Encontrar donde insertar las instrucciones adicionales en el prompt del LLM
  const additionalSection = `\n\nINSTRUCCIONES ADICIONALES DEL USUARIO:
${additionalInstructions.trim()}

IMPORTANTE: Integra estas instrucciones adicionales de manera natural en todos los prompts que generes. No las agregues literalmente al final, sino incorp√≥ralas como parte org√°nica de la descripci√≥n de cada imagen.`;

  // Insertar las instrucciones antes de los requisitos obligatorios
  const insertionPoint = basePrompt.indexOf('REQUISITOS OBLIGATORIOS para cada prompt:');
  if (insertionPoint !== -1) {
    return basePrompt.substring(0, insertionPoint) + additionalSection + '\n\n' + basePrompt.substring(insertionPoint);
  } else {
    // Si no encuentra el punto de inserci√≥n, agregar antes del formato de respuesta
    const formatPoint = basePrompt.indexOf('FORMATO DE RESPUESTA OBLIGATORIO:');
    if (formatPoint !== -1) {
      return basePrompt.substring(0, formatPoint) + additionalSection + '\n\n' + basePrompt.substring(formatPoint);
    } else {
      // Como fallback, agregar al final antes del √∫ltimo p√°rrafo
      return basePrompt + additionalSection;
    }
  }
}

// =====================================
// FUNCIONES DE PROGRESO Y GUARDADO AUTOM√ÅTICO
// =====================================

// Funci√≥n para calcular y actualizar el progreso del proyecto
function updateProjectProgress(projectKey, phase, completedItems, totalItems, itemType = 'elemento', estimatedTimePerItem = null) {
  try {
    // Obtener o crear datos de progreso existentes
    if (!projectProgressTracker[projectKey]) {
      projectProgressTracker[projectKey] = {
        projectKey: projectKey,
        currentPhase: phase,
        startTime: Date.now(),
        phases: {
          script: { total: 0, completed: 0, timePerItem: 0 },
          audio: { total: 0, completed: 0, timePerItem: 0 },
          images: { total: 0, completed: 0, timePerItem: 0 }
        },
        lastUpdate: Date.now()
      };
    }
    
    const progressData = projectProgressTracker[projectKey];
    
    // Actualizar datos de la fase actual
    progressData.currentPhase = phase;
    progressData.phases[phase].total = totalItems;
    progressData.phases[phase].completed = completedItems;
    progressData.lastUpdate = Date.now();
    
    // Actualizar tiempo promedio por elemento si se proporciona
    if (estimatedTimePerItem && completedItems > 0) {
      progressData.phases[phase].timePerItem = estimatedTimePerItem / completedItems;
    }
    
    // Calcular progreso general
    const totalPhases = Object.keys(progressData.phases).length;
    let overallProgress = 0;
    
    for (const [phaseName, phaseData] of Object.entries(progressData.phases)) {
      if (phaseData.total > 0) {
        const phaseProgress = (phaseData.completed / phaseData.total) * 100;
        overallProgress += phaseProgress / totalPhases;
      }
    }
    
    progressData.percentage = Math.min(Math.round(overallProgress), 100);
    progressData.currentStep = completedItems;
    progressData.totalSteps = totalItems;
    
    // Calcular tiempo estimado restante
    const elapsed = Date.now() - progressData.startTime;
    const currentPhaseData = progressData.phases[phase];
    
    if (completedItems > 0 && currentPhaseData.timePerItem > 0) {
      const remainingItems = totalItems - completedItems;
      const estimatedRemainingMs = remainingItems * currentPhaseData.timePerItem;
      
      const minutes = Math.floor(estimatedRemainingMs / 60000);
      const seconds = Math.floor((estimatedRemainingMs % 60000) / 1000);
      progressData.estimatedTimeRemaining = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    } else {
      progressData.estimatedTimeRemaining = 'Calculando...';
    }
    
    console.log(`üìä Progreso actualizado - ${phase}: ${completedItems}/${totalItems} (${progressData.percentage}%)`);
    
    return progressData;
    
  } catch (error) {
    console.error('‚ùå Error actualizando progreso:', error);
    return null;
  }
}

// Funci√≥n para guardar el estado progresivo del proyecto
function saveProgressiveProjectState(projectKey, projectData, completedSections = [], completedAudio = [], completedImages = []) {
  try {
    const projectStateFile = `./public/outputs/${projectKey}/project_state.json`;
    
    // Cargar estado existente si existe
    let existingState = {};
    if (fs.existsSync(projectStateFile)) {
      existingState = JSON.parse(fs.readFileSync(projectStateFile, 'utf8'));
    }
    
    // Crear estructura actualizada
    const updatedState = {
      ...existingState,
      ...projectData,
      lastModified: new Date().toISOString(),
      completedSections: completedSections,
      completedAudio: completedAudio,
      completedImages: completedImages,
      resumableState: {
        canResumeScripts: completedSections.length < (projectData.totalSections || 0),
        canResumeAudio: completedSections.length > 0 && completedAudio.length < completedSections.length,
        canResumeImages: completedSections.length > 0 && completedImages.length < completedSections.length,
        nextPhase: getNextPhase(completedSections, completedAudio, completedImages, projectData.totalSections || 0)
      }
    };
    
    // Asegurar que el directorio existe
    const stateDir = path.dirname(projectStateFile);
    if (!fs.existsSync(stateDir)) {
      fs.mkdirSync(stateDir, { recursive: true });
    }
    
    // Guardar estado
    fs.writeFileSync(projectStateFile, JSON.stringify(updatedState, null, 2), 'utf8');
    
    return updatedState;
    
  } catch (error) {
    console.error('‚ùå Error guardando estado progresivo:', error);
    return null;
  }
}

// Funci√≥n auxiliar para determinar la siguiente fase
function getNextPhase(completedSections, completedAudio, completedImages, totalSections) {
  if (completedSections.length < totalSections) {
    return 'scripts';
  } else if (completedAudio.length < completedSections.length) {
    return 'audio';
  } else if (completedImages.length < completedSections.length) {
    return 'images';
  } else {
    return 'completed';
  }
}

// Funci√≥n para obtener el progreso actual del proyecto
function getProjectProgress(projectKey) {
  try {
    const progressFile = `./public/outputs/${projectKey}/progress.json`;
    if (fs.existsSync(progressFile)) {
      return JSON.parse(fs.readFileSync(progressFile, 'utf8'));
    }
    return null;
  } catch (error) {
    console.error('‚ùå Error obteniendo progreso:', error);
    return null;
  }
}

// =====================================
// FUNCIONES DE B√öSQUEDA Y DESCARGA DE IM√ÅGENES DE BING
// =====================================

// Funci√≥n para generar palabras clave espec√≠ficas para cada imagen usando LLM
async function generateImageKeywords(script, topic, imageCount) {
  try {
    console.log(`üß† Generando ${imageCount} conjuntos de palabras clave para im√°genes...`);
    
    const prompt = `Analiza el siguiente gui√≥n de YouTube y genera palabras clave espec√≠ficas en ingl√©s para buscar im√°genes que complementen el contenido.

TEMA: ${topic}

GUI√ìN:
${script}

INSTRUCCIONES:
1. PRIMERO detecta el universo/contexto principal del contenido (ej: World of Warcraft, League of Legends, Nintendo, Historia Medieval, etc.)
2. Genera exactamente ${imageCount} conjuntos de palabras clave para b√∫squeda de im√°genes
3. CADA conjunto DEBE incluir el contexto detectado para evitar im√°genes irrelevantes
4. Cada conjunto debe tener 3-4 palabras simples en ingl√©s
5. Usa t√©rminos CONCRETOS y VISUALES que describan objetos, personajes, escenas

REGLAS DE CONTEXTO AUTOM√ÅTICO:
- Si mencionas "Alianza", "Horda", "Azeroth", "Stormwind", personajes como "Arthas", "Jaina", "Thrall": USA "World of Warcraft" 
- Si mencionas "Champions", "Rift", "Summoner", personajes como "Jinx", "Yasuo", "Garen": USA "League of Legends"
- Si mencionas "Mario", "Nintendo", "Mushroom Kingdom", "Bowser": USA "Nintendo Super Mario"
- Si mencionas "Roma", "Imperio Romano", "Gladiadores", "C√©sar": USA "Ancient Rome"
- Si mencionas "Medieval", "Caballeros", "Castillos", "Rey Arturo": USA "Medieval history"
- Si mencionas "Zelda", "Hyrule", "Link", "Ganondorf": USA "Nintendo Legend of Zelda"
- Para CUALQUIER videojuego: SIEMPRE incluye el nombre del juego espec√≠fico

FORMATO DE RESPUESTA (exactamente ${imageCount} l√≠neas):
[contexto espec√≠fico + descripci√≥n visual]
[contexto espec√≠fico + descripci√≥n visual]
[contexto espec√≠fico + descripci√≥n visual]
...

EJEMPLOS CORRECTOS para diferentes universos:

Para gui√≥n sobre "L√≠deres de la Alianza en World of Warcraft":
World of Warcraft Alliance leaders meeting
WoW Stormwind City throne room
World of Warcraft King Anduin Wrynn
WoW Alliance army banner blue
World of Warcraft Ironforge council

Para gui√≥n sobre "La Horda en World of Warcraft":
World of Warcraft Horde leaders
WoW Orgrimmar city red banners
World of Warcraft Thrall shaman
WoW Horde warriors battle
World of Warcraft orc chieftain

Para gui√≥n sobre "Historia de Roma":
Ancient Rome senate meeting
Roman Empire emperor statue
Ancient Roman gladiator arena
Roman legion soldiers march
Classical Rome architecture

Para gui√≥n sobre "Nintendo Mario":
Nintendo Super Mario character
Mario Bros mushroom kingdom
Nintendo platformer game screenshot
Super Mario vintage console

IMPORTANTE: 
- NUNCA generes keywords gen√©ricas sin contexto
- SIEMPRE incluye el universo/juego/contexto en cada keyword
- USA palabras que describan cosas VISIBLES (personajes, objetos, escenas)
- EVITA conceptos abstractos como "innovation", "challenge", "concept"

Responde SOLO con las ${imageCount} l√≠neas de palabras clave, sin explicaciones adicionales.`;

    console.log(`ü§ñ Enviando prompt a LLM para generar keywords...`);
    
    const response = await generateUniversalContent('gemini-2.5-flash', prompt);
    const keywordsText = response ? response.trim() : '';
    
    console.log(`üìù Respuesta del LLM:`, keywordsText);
    
    // Procesar la respuesta para extraer las palabras clave
    const lines = keywordsText.split('\n').filter(line => line.trim().length > 0);
    const keywords = [];
    
    for (let i = 0; i < imageCount; i++) {
      if (i < lines.length) {
        // Limpiar la l√≠nea de corchetes y caracteres especiales
        const cleanLine = lines[i].replace(/[\[\]]/g, '').trim();
        keywords.push(cleanLine);
      } else {
        // Fallback si no hay suficientes l√≠neas
        keywords.push(`${topic} ${i + 1}`);
      }
    }
    
    console.log(`‚úÖ Palabras clave generadas:`, keywords);
    return keywords;
    
  } catch (error) {
    console.error('‚ùå Error generando palabras clave:', error.message);
    
    // Fallback: generar palabras clave b√°sicas
    const fallbackKeywords = [];
    for (let i = 0; i < imageCount; i++) {
      fallbackKeywords.push(`${topic} part ${i + 1}`);
    }
    
    console.log(`üîÑ Usando keywords de fallback:`, fallbackKeywords);
    return fallbackKeywords;
  }
}

// Funci√≥n para buscar y descargar im√°genes de Bing
async function searchAndDownloadBingImages(keywords, sectionDir) {
  console.log(`üîç Buscando im√°genes en Bing con ${keywords.length} conjuntos de palabras clave`);
  
  try {
    const downloadedImages = [];
    const maxRetries = 3; // M√°ximo 3 intentos por imagen
    
    // Buscar y descargar una imagen para cada conjunto de palabras clave
    for (let i = 0; i < keywords.length; i++) {
      const query = keywords[i];
      console.log(`üì∏ Buscando imagen ${i + 1}/${keywords.length} con: "${query}"`);
      
      let imageDownloaded = false;
      let retryCount = 0;
      
      // Intentar descargar la imagen con reintentos
      while (!imageDownloaded && retryCount < maxRetries) {
        try {
          // Buscar URLs de im√°genes en Bing para este query espec√≠fico
          const imageUrls = await searchBingImages(query, 20); // Buscar 20 opciones para m√°s variedad
          
          if (imageUrls.length > 0) {
            // Intentar con diferentes URLs si la primera falla - usar m√°s opciones
            for (let urlIndex = 0; urlIndex < Math.min(imageUrls.length, 10); urlIndex++) {
              try {
                const imageUrl = imageUrls[urlIndex];
                const filename = `bing_image_${i + 1}.jpg`;
                const filepath = path.join(sectionDir, filename);
                
                console.log(`üì• Descargando imagen ${i + 1} (intento ${retryCount + 1}/${maxRetries}, URL ${urlIndex + 1}): ${imageUrl.substring(0, 80)}...`);
                
                await downloadImageFromUrl(imageUrl, filepath);
                
                downloadedImages.push({
                  filename: filename,
                  path: filepath,
                  url: imageUrl,
                  source: 'bing',
                  keywords: query,
                  caption: `Imagen ${i + 1}: ${query}`
                });
                
                console.log(`‚úÖ Descargada imagen ${i + 1}: ${filename} (${query})`);
                imageDownloaded = true;
                break; // Salir del loop de URLs
                
              } catch (urlError) {
                console.log(`‚ö†Ô∏è Error con URL ${urlIndex + 1}: ${urlError.message}`);
                continue; // Intentar con la siguiente URL
              }
            }
            
            if (!imageDownloaded) {
              retryCount++;
              if (retryCount < maxRetries) {
                console.log(`üîÑ Reintentando imagen ${i + 1} (intento ${retryCount + 1}/${maxRetries})...`);
                await new Promise(resolve => setTimeout(resolve, 2000)); // Pausa antes de reintentar
              }
            }
            
          } else {
            console.log(`‚ö†Ô∏è No se encontraron im√°genes para: "${query}"`);
            retryCount++;
            if (retryCount < maxRetries) {
              console.log(`üîÑ Reintentando b√∫squeda para "${query}" (intento ${retryCount + 1}/${maxRetries})...`);
              await new Promise(resolve => setTimeout(resolve, 2000));
            }
          }
          
        } catch (error) {
          retryCount++;
          console.error(`‚ùå Error en intento ${retryCount} para imagen ${i + 1} (${query}):`, error.message);
          if (retryCount < maxRetries) {
            console.log(`üîÑ Reintentando imagen ${i + 1} en 3 segundos...`);
            await new Promise(resolve => setTimeout(resolve, 3000));
          }
        }
      }
      
      // Si no se pudo descargar la imagen despu√©s de todos los intentos
      if (!imageDownloaded) {
        console.log(`‚ùå FALLO DEFINITIVO: No se pudo descargar imagen ${i + 1} con keywords "${query}" despu√©s de ${maxRetries} intentos`);
        
        // Crear placeholder o imagen vac√≠a para mantener la secuencia
        const filename = `bing_image_${i + 1}.jpg`;
        downloadedImages.push({
          filename: filename,
          path: null, // Sin archivo f√≠sico
          url: null,
          source: 'bing',
          keywords: query,
          caption: `Imagen ${i + 1}: ${query}`,
          failed: true // Marcar como fallida
        });
      }
      
      // Peque√±a pausa entre descargas para no sobrecargar Bing
      if (i < keywords.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    const successfulDownloads = downloadedImages.filter(img => !img.failed).length;
    console.log(`üéâ Descarga completada: ${successfulDownloads}/${keywords.length} im√°genes exitosas`);
    
    if (successfulDownloads < keywords.length) {
      console.log(`‚ö†Ô∏è ADVERTENCIA: ${keywords.length - successfulDownloads} im√°genes fallaron. Los keywords seguir√°n alineados.`);
    }
    
    return downloadedImages;
    
  } catch (error) {
    console.error('‚ùå Error en b√∫squeda y descarga de Bing:', error.message);
    return [];
  }
}

// Funci√≥n para buscar im√°genes en Bing Images usando web scraping
async function searchBingImages(query, count = 5) {
  try {
    const encodedQuery = encodeURIComponent(query);
    const searchUrl = `https://www.bing.com/images/search?q=${encodedQuery}&form=HDRSC2&first=1&cw=1177&ch=778`;
    
    console.log(`üåê Buscando en Bing Images: ${query}`);
    
    const response = await axios.get(searchUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Cache-Control': 'max-age=0'
      },
      timeout: 15000
    });

    const $ = cheerio.load(response.data);
    const imageUrls = [];

    // Buscar im√°genes en diferentes selectores de Bing
    const selectors = [
      'a.iusc',
      '.imgpt img',
      '.img_cont img',
      'img.mimg'
    ];

    for (const selector of selectors) {
      $(selector).each((i, elem) => {
        try {
          let imageUrl = null;
          
          if (selector === 'a.iusc') {
            // Para enlaces con metadatos JSON
            const metadata = $(elem).attr('m');
            if (metadata) {
              const parsed = JSON.parse(metadata);
              imageUrl = parsed.murl || parsed.turl;
            }
          } else {
            // Para elementos img directos
            imageUrl = $(elem).attr('src') || $(elem).attr('data-src') || $(elem).attr('data-img');
          }
          
          if (imageUrl && 
              imageUrl.startsWith('http') && 
              !imageUrl.includes('bing.com') &&
              !imageUrl.includes('microsoft.com') &&
              !imageUrl.includes('data:image') &&
              imageUrl.length > 50 &&
              imageUrls.length < count) {
            
            imageUrls.push(imageUrl);
          }
        } catch (parseError) {
          // Continuar con la siguiente imagen si hay error de parsing
        }
      });
      
      if (imageUrls.length >= count) break;
    }

    console.log(`üì∏ Bing encontr√≥: ${imageUrls.length} URLs de im√°genes`);
    return imageUrls;
    
  } catch (error) {
    console.error('‚ùå Error en b√∫squeda de Bing Images:', error.message);
    return [];
  }
}

// Funci√≥n para descargar una imagen desde URL
async function downloadImageFromUrl(url, filepath) {
  try {
    const response = await axios({
      method: 'GET',
      url: url,
      responseType: 'stream',
      timeout: 15000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Sec-Fetch-Dest': 'image',
        'Sec-Fetch-Mode': 'no-cors',
        'Sec-Fetch-Site': 'cross-site'
      },
      maxRedirects: 5
    });

    const writer = fs.createWriteStream(filepath);
    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
      writer.on('finish', () => {
        // Verificar que el archivo se escribi√≥ correctamente
        if (fs.existsSync(filepath)) {
          const stats = fs.statSync(filepath);
          if (stats.size > 1000) { // Al menos 1KB
            resolve(filepath);
          } else {
            fs.unlinkSync(filepath); // Eliminar archivo corrupto
            reject(new Error('Archivo muy peque√±o, posiblemente corrupto'));
          }
        } else {
          reject(new Error('El archivo no se cre√≥ correctamente'));
        }
      });
      writer.on('error', reject);
      
      // Timeout adicional
      setTimeout(() => {
        writer.destroy();
        reject(new Error('Timeout en descarga de imagen'));
      }, 20000);
    });
  } catch (error) {
    throw new Error(`Error descargando imagen: ${error.message}`);
  }
}

// Funci√≥n para generar prompts seg√∫n el estilo seleccionado
function generateScriptPrompt(style, topic, sections, section, customStyleInstructions = null, chapterStructure = null, previousChapterContent = null, wordsMin = 800, wordsMax = 1100) {
  if (style === 'comedy') {
    return generateComedyPrompt(topic, sections, section, chapterStructure, previousChapterContent, wordsMin, wordsMax);
  } else if (style && style.startsWith('custom_') && customStyleInstructions) {
    return generateCustomPrompt(topic, sections, section, customStyleInstructions, chapterStructure, previousChapterContent, wordsMin, wordsMax);
  } else {
    return generateProfessionalPrompt(topic, sections, section, chapterStructure, previousChapterContent, wordsMin, wordsMax);
  }
}

// Funci√≥n para generar prompt con estilo personalizado
function generateCustomPrompt(topic, sections, section, customInstructions, chapterStructure = null, previousChapterContent = null, wordsMin = 800, wordsMax = 1100) {
  const currentSection = section;
  const totalSections = sections;
  
  // Generar texto de estructura de cap√≠tulos si est√° disponible
  let chapterContext = '';
  if (chapterStructure && chapterStructure.length > 0) {
    chapterContext = `

ESTRUCTURA COMPLETA DE CAP√çTULOS:
${chapterStructure.map((title, index) => `${index + 1}. ${title}`).join('\n')}

CAP√çTULO ACTUAL: ${chapterStructure[section - 1] || `Cap√≠tulo ${section}`}`;
  }

  // Generar contexto de cap√≠tulos anteriores si est√° disponible
  let previousContext = '';
  if (previousChapterContent && previousChapterContent.length > 0) {
    previousContext = `

CONTEXTO DE CAP√çTULOS ANTERIORES (para continuidad narrativa):
${previousChapterContent.map((content, index) => {
      const chapterTitle = chapterStructure && chapterStructure[index] ? chapterStructure[index] : `Cap√≠tulo ${index + 1}`;
      const preview = content.length > 200 ? content.substring(0, 200) + '...' : content;
      return `üìö ${chapterTitle}:\n${preview}`;
    }).join('\n\n')}

IMPORTANTE: TOMA EN CUENTA EL CONTEXTO ANTERIOR para mantener continuidad narrativa, referencias y coherencia en el desarrollo del tema.`;
  }
  
  if (currentSection === 1) {
    // Primera secci√≥n
    return `${customInstructions}

TEMA SOLICITADO: "${topic}"
TOTAL DE SECCIONES: ${sections}${chapterContext}

Vamos a crear un gui√≥n de YouTube dividido en ${sections} cap√≠tulos sobre el tema que el usuario ha solicitado.

POR FAVOR, DAME SOLO EL CAP√çTULO 1 DE ${sections}.

INSTRUCCIONES GENERALES:
- Crea contenido basado exactamente en lo que el usuario ha pedido en el tema
- Si es sobre ficci√≥n, enf√≥cate en los elementos narrativos y creativos
- Si es sobre desarrollo/creaci√≥n, enf√≥cate en los aspectos reales de producci√≥n
- Si es sobre historia, enf√≥cate en hechos hist√≥ricos y datos
- Adapta tu estilo narrativo al tipo de contenido solicitado
- APLICA ESTRICTAMENTE el estilo personalizado especificado arriba
- NO REPITAS IDEAS, SI ES NECESARIO SALTE UN POCO DEL TEMA PARA EXPLORAR NUEVAS PERSPECTIVAS, PUEDES EXPLORAR CURIOSIDADES TAMBIEN, EASTER EGGS, ETC.
${chapterStructure ? `- ENF√ìCATE en el contenido espec√≠fico del CAP√çTULO 1: "${chapterStructure[0] || 'Sin t√≠tulo'}"` : ''}

ESTRUCTURA REQUERIDA PARA EL CAP√çTULO 1:
- Exactamente 3 p√°rrafos detallados
- Entre ${wordsMin} y ${wordsMax} palabras en total para este cap√≠tulo
- Mant√©n el estilo personalizado establecido arriba
- Establece las bases del tema para los siguientes cap√≠tulos
${chapterStructure ? `- Desarrolla el tema espec√≠fico del cap√≠tulo: "${chapterStructure[0] || 'Sin t√≠tulo'}"` : ''}

FORMATO DE RESPUESTA OBLIGATORIO:
- Responde √öNICAMENTE con el texto del gui√≥n
- NO incluyas explicaciones, comentarios, ni texto adicional
- NO incluyas etiquetas como "Cap√≠tulo 1:", "Gui√≥n:", etc.
- NO incluyas notas, aclaraciones o pensamientos
- El texto debe estar listo para ser usado directamente en TTS
- Comienza directamente con el contenido del gui√≥n
- APLICA FIELMENTE el estilo personalizado: ${customInstructions}

IMPORTANTE: 
- Este es el PRIMER cap√≠tulo, establece los fundamentos del tema, da una bienvenida al canal
- NO incluyas despedida ya que habr√° m√°s cap√≠tulos
- Basa tu contenido completamente en lo que el usuario solicita en el tema
- RESPONDE SOLO CON EL TEXTO DEL GUI√ìN, NADA M√ÅS`;
  } else {
    // Secciones posteriores
    return `Ahora dame el cap√≠tulo ${currentSection} de ${totalSections} del mismo tema.${chapterContext}${previousContext}

MANT√âN EXACTAMENTE EL MISMO ESTILO PERSONALIZADO: ${customInstructions}

INSTRUCCIONES CR√çTICAS PARA CONTINUIDAD NARRATIVA:
- Esta es la CONTINUACI√ìN de un video que ya comenz√≥, NO hagas nueva introducci√≥n o bienvenida
- NO repitas conceptos, situaciones o an√©cdotas ya mencionadas en cap√≠tulos anteriores
- CONTIN√öA directamente desde donde se qued√≥ la narrativa anterior
- Usa transiciones naturales apropiadas para tu estilo personalizado
- Haz referencias sutiles al contenido previo cuando sea relevante
- EVITA reiniciar la narrativa - ya estamos dentro del video
- CONSTRUYE sobre las situaciones ya presentadas, explora nuevos aspectos

ESTRUCTURA REQUERIDA PARA EL CAP√çTULO ${currentSection}:
- Exactamente 3 p√°rrafos detallados
- Entre ${wordsMin} y ${wordsMax} palabras en total para este cap√≠tulo
- Mant√©n continuidad narrativa fluida con los cap√≠tulos anteriores
- Progresa de manera l√≥gica en el desarrollo del tema
- Sigue el mismo estilo y enfoque que estableciste en los cap√≠tulos anteriores
- APLICA ESTRICTAMENTE el estilo personalizado: ${customInstructions}
- Explora nuevos aspectos sin repetir contenido ya cubierto
${chapterStructure ? `- ENF√ìCATE en el contenido espec√≠fico del CAP√çTULO ${currentSection}: "${chapterStructure[currentSection - 1] || 'Sin t√≠tulo'}"` : ''}

FORMATO DE RESPUESTA OBLIGATORIO:
- Responde √öNICAMENTE con el texto del gui√≥n
- NO incluyas explicaciones, comentarios, ni texto adicional
- NO incluyas etiquetas como "Cap√≠tulo ${currentSection}:", "Gui√≥n:", etc.
- NO incluyas notas, aclaraciones o pensamientos
- El texto debe estar listo para ser usado directamente en TTS
- Comienza directamente con el contenido del gui√≥n
- INICIA con una transici√≥n natural, NO con bienvenida

${currentSection === totalSections ? `IMPORTANTE: Como este es el √öLTIMO cap√≠tulo (${currentSection}/${totalSections}), DEBES incluir una despedida profesional al final que invite a:
- Comentar sus opiniones sobre el tema presentado
- Suscribirse al canal para m√°s contenido  
- Dar like si disfrutaron el contenido
- Sugerir futuros temas que les gustar√≠a ver

Ejemplo de despedida: "Y as√≠ concluye este episodio sobre [tema]... Si este contenido te ha resultado interesante, d√©janos un like y suscr√≠bete al canal para m√°s contenido. Comp√°rtenos en los comentarios qu√© otros temas te gustar√≠a que cubramos..."` : 'NO incluyas despedida ya que este no es el √∫ltimo cap√≠tulo.'}

üéØ RECORDATORIO CR√çTICO: Debes seguir fielmente este estilo: ${customInstructions}

RECUERDA: ESTE ES UN CAP√çTULO INTERMEDIO DE UN VIDEO YA INICIADO - CONTIN√öA LA NARRATIVA SIN INTRODUCCIONES.`;
  }
  
  if (currentSection === 1) {
    // Primera secci√≥n
    return `${customInstructions}

TEMA SOLICITADO: "${topic}"
TOTAL DE SECCIONES: ${sections}

Vamos a crear un gui√≥n de YouTube dividido en ${sections} secciones sobre el tema que el usuario ha solicitado.

POR FAVOR, DAME SOLO LA SECCI√ìN 1 DE ${sections}.

INSTRUCCIONES GENERALES:
- Crea contenido basado exactamente en lo que el usuario ha pedido en el tema
- Si es sobre ficci√≥n, enf√≥cate en los elementos narrativos y creativos
- Si es sobre desarrollo/creaci√≥n, enf√≥cate en los aspectos reales de producci√≥n
- Si es sobre historia, enf√≥cate en hechos hist√≥ricos y datos
- Adapta tu estilo narrativo al tipo de contenido solicitado
- APLICA ESTRICTAMENTE el estilo personalizado especificado arriba
- NO REPITAS IDEAS, SI ES NECESARIO SALTE UN POCO DEL TEMA PARA EXPLORAR NUEVAS PERSPECTIVAS, PUEDES EXPLORAR CURIOSIDADES TAMBIEN, EASTER EGGS, ETC.

ESTRUCTURA REQUERIDA PARA LA SECCI√ìN 1:
- Exactamente 3 p√°rrafos detallados
- M√°ximo 300 palabras en total para esta secci√≥n
- M√≠nimo 250 palabras por secci√≥n
- Mant√©n el estilo personalizado establecido arriba
- Establece las bases del tema para las siguientes secciones

FORMATO DE RESPUESTA OBLIGATORIO:
- Responde √öNICAMENTE con el texto del gui√≥n
- NO incluyas explicaciones, comentarios, ni texto adicional
- NO incluyas etiquetas como "Secci√≥n 1:", "Gui√≥n:", etc.
- NO incluyas notas, aclaraciones o pensamientos
- El texto debe estar listo para ser usado directamente en TTS
- Comienza directamente con el contenido del gui√≥n
- APLICA FIELMENTE el estilo personalizado: ${customInstructions}

IMPORTANTE: 
- Esta es la PRIMERA secci√≥n, establece los fundamentos del tema, da una bienvenida al canal
- NO incluyas despedida ya que habr√° m√°s secciones
- Basa tu contenido completamente en lo que el usuario solicita en el tema
- RESPONDE SOLO CON EL TEXTO DEL GUI√ìN, NADA M√ÅS`;
  } else {
    // Secciones posteriores
    return `Ahora dame la secci√≥n ${currentSection} de ${totalSections} del mismo tema.

MANT√âN EXACTAMENTE EL MISMO ESTILO PERSONALIZADO: ${customInstructions}${chapterContext}${previousContext}

ESTRUCTURA REQUERIDA PARA LA SECCI√ìN ${currentSection}:
- Exactamente 3 p√°rrafos detallados
- M√°ximo 300 palabras en total para esta secci√≥n
- M√≠nimo 250 palabras por secci√≥n
- Mant√©n continuidad narrativa con las secciones anteriores
- Progresa de manera l√≥gica en el desarrollo del tema
- Sigue el mismo estilo y enfoque que estableciste en las secciones anteriores
- CONECTA directamente con el contenido de los cap√≠tulos anteriores
- Haz referencias sutiles a informaci√≥n ya mencionada cuando sea relevante
- APLICA ESTRICTAMENTE el estilo personalizado: ${customInstructions}

FORMATO DE RESPUESTA OBLIGATORIO:
- Responde √öNICAMENTE con el texto del gui√≥n
- NO incluyas explicaciones, comentarios, ni texto adicional
- NO incluyas etiquetas como "Secci√≥n ${currentSection}:", "Gui√≥n:", etc.
- NO incluyas notas, aclaraciones o pensamientos
- El texto debe estar listo para ser usado directamente en TTS
- Comienza directamente con el contenido del gui√≥n

${currentSection === totalSections ? `IMPORTANTE: Como esta es la √öLTIMA secci√≥n (${currentSection}/${totalSections}), DEBES incluir una despedida profesional al final que invite a:
- Comentar sus opiniones sobre el tema presentado
- Suscribirse al canal para m√°s contenido  
- Dar like si disfrutaron el contenido
- Sugerir futuros temas que les gustar√≠a ver

Ejemplo de despedida: "Y as√≠ concluye este episodio sobre [tema]... Si este contenido te ha resultado interesante, d√©janos un like y suscr√≠bete al canal para m√°s contenido. Comp√°rtenos en los comentarios qu√© otros temas te gustar√≠a que cubramos..."` : 'NO incluyas despedida ya que esta no es la √∫ltima secci√≥n.'}

üéØ RECORDATORIO CR√çTICO: Debes seguir fielmente este estilo: ${customInstructions}

RECUERDA: RESPONDE SOLO CON EL TEXTO DEL GUI√ìN, SIN COMENTARIOS NI EXPLICACIONES ADICIONALES.`;
  }
}

// Funci√≥n para generar prompt estilo profesional (original)
function generateProfessionalPrompt(topic, sections, section, chapterStructure = null, previousChapterContent = null, wordsMin = 800, wordsMax = 1100) {
  // Generar texto de estructura de cap√≠tulos si est√° disponible
  let chapterContext = '';
  if (chapterStructure && chapterStructure.length > 0) {
    chapterContext = `

ESTRUCTURA COMPLETA DE CAP√çTULOS:
${chapterStructure.map((title, index) => `${index + 1}. ${title}`).join('\n')}

CAP√çTULO ACTUAL: ${chapterStructure[section - 1] || `Cap√≠tulo ${section}`}`;
  }

  // Generar contexto de cap√≠tulos anteriores si est√° disponible
  let previousContext = '';
  if (previousChapterContent && previousChapterContent.length > 0) {
    previousContext = `

CONTEXTO DE CAP√çTULOS ANTERIORES (para continuidad narrativa):
${previousChapterContent.map((content, index) => {
      const chapterTitle = chapterStructure && chapterStructure[index] ? chapterStructure[index] : `Cap√≠tulo ${index + 1}`;
      const preview = content.length > 200 ? content.substring(0, 200) + '...' : content;
      return `üìö ${chapterTitle}:\n${preview}`;
    }).join('\n\n')}

IMPORTANTE: TOMA EN CUENTA EL CONTEXTO ANTERIOR para mantener continuidad narrativa, referencias y coherencia en el desarrollo del tema.`;
  }
  
  if (section === 1) {
    return `Eres un escritor profesional especializado en guiones para YouTube.

TEMA SOLICITADO: "${topic}"
TOTAL DE CAP√çTULOS: ${sections}${chapterContext}

Vamos a crear un gui√≥n de YouTube dividido en ${sections} cap√≠tulos sobre el tema que el usuario ha solicitado.

POR FAVOR, DAME SOLO EL CAP√çTULO 1 DE ${sections}.
al ser este el primer cap√≠tulo, da una bienvenida al canal y presenta el tema de manera atractiva.
INSTRUCCIONES GENERALES:
- Crea contenido basado exactamente en lo que el usuario ha pedido en el tema
- Si es sobre ficci√≥n, enf√≥cate en los elementos narrativos y creativos
- Si es sobre desarrollo/creaci√≥n, enf√≥cate en los aspectos reales de producci√≥n
- Si es sobre historia, enf√≥cate en hechos hist√≥ricos y datos
- Adapta tu estilo narrativo al tipo de contenido solicitado
${chapterStructure ? `- ENF√ìCATE en el contenido espec√≠fico del CAP√çTULO 1: "${chapterStructure[0] || 'Sin t√≠tulo'}"` : ''}

ESTRUCTURA REQUERIDA PARA EL CAP√çTULO 1:
- Exactamente 3 p√°rrafos detallados
- Entre ${wordsMin} y ${wordsMax} palabras en total para este cap√≠tulo
- Mant√©n un tono profesional y enganchante
- Establece las bases del tema para los siguientes cap√≠tulos
${chapterStructure ? `- Desarrolla el tema espec√≠fico del cap√≠tulo: "${chapterStructure[0] || 'Sin t√≠tulo'}"` : ''}

FORMATO DE RESPUESTA OBLIGATORIO:
- Responde √öNICAMENTE con el texto del gui√≥n
- NO incluyas explicaciones, comentarios, ni texto adicional
- NO incluyas etiquetas como "Cap√≠tulo 1:", "Gui√≥n:", etc.
- NO incluyas notas, aclaraciones o pensamientos
- El texto debe estar listo para ser usado directamente en TTS
- Comienza directamente con el contenido del gui√≥n

IMPORTANTE: 
- Este es el PRIMER cap√≠tulo, establece los fundamentos del tema
- NO incluyas despedida ya que habr√° m√°s cap√≠tulos
- Basa tu contenido completamente en lo que el usuario solicita en el tema
- RESPONDE SOLO CON EL TEXTO DEL GUI√ìN, NADA M√ÅS`;
  } else {
    return `Ahora dame el cap√≠tulo ${section} de ${sections} del mismo tema.${chapterContext}${previousContext}

INSTRUCCIONES CR√çTICAS PARA CONTINUIDAD NARRATIVA:
- Esta es la CONTINUACI√ìN de un video que ya comenz√≥, NO hagas nueva introducci√≥n o bienvenida
- NO repitas conceptos, datos o an√©cdotas ya mencionados en cap√≠tulos anteriores
- CONTIN√öA directamente desde donde se qued√≥ la narrativa anterior
- Usa transiciones naturales como "Ahora bien...", "Continuando con...", "Adem√°s de esto...", "Por otro lado..."
- Haz referencias sutiles al contenido previo cuando sea relevante (ej: "Como vimos anteriormente...", "Retomando ese punto...")
- EVITA frases como "Bienvenidos", "Hola", "En este video" - ya estamos dentro del video
- CONSTRUYE sobre la informaci√≥n ya presentada, no la repitas

ESTRUCTURA REQUERIDA PARA EL CAP√çTULO ${section}:
- Exactamente 3 p√°rrafos detallados
- Entre ${wordsMin} y ${wordsMax} palabras en total para este cap√≠tulo
- Mant√©n continuidad narrativa fluida con los cap√≠tulos anteriores
- Progresa de manera l√≥gica en el desarrollo del tema
- CONECTA directamente con el contenido de los cap√≠tulos anteriores
- Explora nuevos aspectos del tema sin repetir informaci√≥n ya cubierta
- Si necesitas mencionar algo ya dicho, hazlo brevemente como referencia y expande con nueva informaci√≥n
${chapterStructure ? `- ENF√ìCATE en el contenido espec√≠fico del CAP√çTULO ${section}: "${chapterStructure[section - 1] || 'Sin t√≠tulo'}"` : ''}

FORMATO DE RESPUESTA OBLIGATORIO:
- Responde √öNICAMENTE con el texto del gui√≥n
- NO incluyas explicaciones, comentarios, ni texto adicional
- NO incluyas etiquetas como "Cap√≠tulo ${section}:", "Gui√≥n:", etc.
- NO incluyas notas, aclaraciones o pensamientos
- El texto debe estar listo para ser usado directamente en TTS
- Comienza directamente con el contenido del gui√≥n
- INICIA con una transici√≥n natural, NO con bienvenida

${section === sections ? `IMPORTANTE: Como este es el √öLTIMO cap√≠tulo (${section}/${sections}), DEBES incluir una despedida profesional al final que invite a:
- Comentar sus opiniones sobre el tema presentado
- Suscribirse al canal para m√°s contenido  
- Dar like si disfrutaron el contenido
- Sugerir futuros temas que les gustar√≠a ver

Ejemplo de despedida: "Y as√≠ concluye este episodio sobre [tema]... Si este contenido te ha resultado interesante, d√©janos un like y suscr√≠bete al canal para m√°s contenido. Comp√°rtenos en los comentarios qu√© otros temas te gustar√≠a que cubramos..."` : 'NO incluyas despedida ya que este no es el √∫ltimo cap√≠tulo.'}

RECUERDA: ESTE ES UN CAP√çTULO INTERMEDIO DE UN VIDEO YA INICIADO - NO HAGAS BIENVENIDAS NI INTRODUCCIONES GENERALES.`;
  }
}

// Funci√≥n para generar prompt estilo c√≥mico/sarc√°stico
function generateComedyPrompt(topic, sections, section, chapterStructure = null, previousChapterContent = null, wordsMin = 800, wordsMax = 1100) {
  // Generar texto de estructura de cap√≠tulos si est√° disponible
  let chapterContext = '';
  if (chapterStructure && chapterStructure.length > 0) {
    chapterContext = `

ESTRUCTURA COMPLETA DE CAP√çTULOS:
${chapterStructure.map((title, index) => `${index + 1}. ${title}`).join('\n')}

CAP√çTULO ACTUAL: ${chapterStructure[section - 1] || `Cap√≠tulo ${section}`}`;
  }

  // Generar contexto de cap√≠tulos anteriores si est√° disponible
  let previousContext = '';
  if (previousChapterContent && previousChapterContent.length > 0) {
    previousContext = `

CONTEXTO DE CAP√çTULOS ANTERIORES (para continuidad narrativa):
${previousChapterContent.map((content, index) => {
      const chapterTitle = chapterStructure && chapterStructure[index] ? chapterStructure[index] : `Cap√≠tulo ${index + 1}`;
      const preview = content.length > 200 ? content.substring(0, 200) + '...' : content;
      return `üìö ${chapterTitle}:\n${preview}`;
    }).join('\n\n')}

IMPORTANTE: TOMA EN CUENTA EL CONTEXTO ANTERIOR para mantener continuidad narrativa, referencias y coherencia en el desarrollo del tema.`;
  }
  
  if (section === 1) {
    return `Eres un escritor de guiones creativo para contenido de YouTube.

Tu tarea es construir guiones con un tono sarc√°stico, ir√≥nico, con humor negro, muchas groser√≠as y un chingo de humor absurdo.

TEMA SOLICITADO: "${topic}"
TOTAL DE CAP√çTULOS: ${sections}${chapterContext}

Vamos a crear un gui√≥n de YouTube dividido en ${sections} cap√≠tulos sobre el tema que el usuario ha solicitado.

POR FAVOR, DAME SOLO EL CAP√çTULO 1 DE ${sections}.

üé≠ FORMATO DEL GUION:

El guion debe leerse como una actuaci√≥n, adem√°s de una narraci√≥n cronol√≥gica.
como es el primer capitulo usa una introducci√≥n llamativa para captar la atenci√≥n del espectador.
Usa m√∫ltiples voces indicadas con corchetes, por ejemplo:
[voz de narrador serio], [voz sarc√°stica], [grito desesperado], [voz de ni√±a loca], [voz de viejita], etc.

Las escenas deben sentirse teatrales, exageradas, bizarras y alucinantes.
en algunas ocasiones interpreta lo que los personajes en el guion podrian decir o pensar.
${chapterStructure ? `
üéØ ENFOQUE DEL CAP√çTULO: Centra todo el contenido en desarrollar espec√≠ficamente "${chapterStructure[0] || 'Sin t√≠tulo'}"` : ''}

ESTRUCTURA REQUERIDA PARA EL CAP√çTULO 1:
- Exactamente 3 p√°rrafos detallados
- Entre ${wordsMin} y ${wordsMax} palabras en total para este cap√≠tulo
- Mant√©n un tono sarc√°stico, ir√≥nico y absurdo y muy √°cido.
- Establece las bases del tema para los siguientes cap√≠tulos
${chapterStructure ? `- Desarrolla el tema espec√≠fico del cap√≠tulo: "${chapterStructure[0] || 'Sin t√≠tulo'}"` : ''}

PALABRAS Y EXPRESIONES A USAR:
Usas algunas veces palabras como: pinche, wey, pendejo, cabr√≥n, verga, chinga tu madre, me vale verga, come verga, hijo de la verga.

RESTRICCIONES:
- No se permite usar la palabra "show"
- No se permiten chistes sobre pol√≠ticos ni ex parejas

FORMATO DE RESPUESTA OBLIGATORIO:
- Responde √öNICAMENTE con el texto del gui√≥n
- NO incluyas explicaciones, comentarios, ni texto adicional
- NO incluyas etiquetas como "Cap√≠tulo 1:", "Gui√≥n:", etc.
- El texto debe estar listo para ser usado directamente en TTS
- Comienza directamente con el contenido del gui√≥n

IMPORTANTE: 
- Este es el PRIMER cap√≠tulo, establece los fundamentos del tema
- NO incluyas despedida ya que habr√° m√°s cap√≠tulos
- Basa tu contenido completamente en lo que el usuario solicita en el tema
- RESPONDE SOLO CON EL TEXTO DEL GUI√ìN, NADA M√ÅS`;
  } else {
    return `Ahora dame el cap√≠tulo ${section} de ${sections} del mismo tema.${chapterContext}${previousContext}

Mant√©n el mismo estilo sarc√°stico, ir√≥nico, con humor negro y groser√≠as.

INSTRUCCIONES CR√çTICAS PARA CONTINUIDAD NARRATIVA:
- Esta es la CONTINUACI√ìN de un video que ya comenz√≥, NO hagas nueva introducci√≥n o bienvenida
- NO repitas chistes, groser√≠as o referencias ya mencionadas en cap√≠tulos anteriores  
- CONTIN√öA directamente desde donde se qued√≥ la narrativa anterior
- Usa transiciones c√≥micas naturales apropiadas para el estilo sarc√°stico
- Haz referencias humor√≠sticas al contenido previo cuando sea relevante
- EVITA reiniciar la narrativa - ya estamos dentro del video c√≥mico
- CONSTRUYE sobre las situaciones ya presentadas, explora nuevos aspectos con humor √°cido

ESTRUCTURA REQUERIDA PARA EL CAP√çTULO ${section}:
- Exactamente 3 p√°rrafos detallados
- Entre ${wordsMin} y ${wordsMax} palabras en total para este cap√≠tulo
- Mant√©n continuidad narrativa fluida con los cap√≠tulos anteriores
- Progresa de manera l√≥gica en el desarrollo del tema
- Sigue el mismo estilo c√≥mico y absurdo que estableciste
- CONECTA directamente con el contenido de los cap√≠tulos anteriores
- Haz referencias sutiles a informaci√≥n ya mencionada cuando sea relevante
- Explora nuevos aspectos del tema sin repetir contenido ya cubierto
${chapterStructure ? `- ENF√ìCATE en el contenido espec√≠fico del CAP√çTULO ${section}: "${chapterStructure[section - 1] || 'Sin t√≠tulo'}"` : ''}

üé≠ FORMATO DEL GUION:
- Usa m√∫ltiples voces indicadas con corchetes al menos 4 en cada p√°rrafo
- Usa onomatopeyas y efectos sonoros rid√≠culos
- Las escenas deben sentirse teatrales y exageradas
- INICIA con una transici√≥n natural, NO con bienvenida

PALABRAS Y EXPRESIONES A USAR:
Usa muchas palabras como: pinche, wey, pendejo, cabr√≥n, verga, chinga tu madre, me vale verga, come verga.

FORMATO DE RESPUESTA OBLIGATORIO:
- Responde √öNICAMENTE con el texto del gui√≥n
- NO incluyas explicaciones, comentarios, ni texto adicional
- NO incluyas etiquetas como "Cap√≠tulo ${section}:", "Gui√≥n:", etc.
- El texto debe estar listo para ser usado directamente en TTS
- Comienza directamente con el contenido del gui√≥n

${section === sections ? `IMPORTANTE: Como este es el √öLTIMO cap√≠tulo (${section}/${sections}), DEBES incluir una despedida c√≥mica al final que invite a:
- Comentar sus opiniones sobre el tema presentado
- Suscribirse al canal para m√°s contenido  
- Dar like si disfrutaron el contenido
- Sugerir futuros temas que les gustar√≠a ver

Ejemplo de despedida c√≥mica: "Y as√≠ concluye este pinche episodio sobre [tema]... Si te cagaste de risa, d√©janos un like y suscr√≠bete al canal para m√°s contenido cabr√≥n. Comp√°rtenos en los comentarios qu√© otros temas te gustar√≠a que cubramos, wey..."` : 'NO incluyas despedida ya que este no es el √∫ltimo cap√≠tulo.'}

RECUERDA: ESTE ES UN CAP√çTULO INTERMEDIO DE UN VIDEO YA INICIADO - CONTIN√öA LA NARRATIVA SIN INTRODUCCIONES.`;
  }
}

// NUEVO ENDPOINT PARA GENERACI√ìN AUTOM√ÅTICA POR LOTES
app.post('/generate-batch-automatic', async (req, res) => {
  try {
    const { topic, folderName, voice, totalSections, minWords, maxWords, imageCount, promptModifier, imageModel, llmModel, skipImages, googleImages, localAIImages, geminiGeneratedImages, comfyUISettings, scriptStyle, customStyleInstructions, applioVoice, applioModel, applioPitch, useApplio } = req.body;
    
    console.log('\n' + '='.repeat(80));
    console.log('üöÄ INICIANDO GENERACI√ìN AUTOM√ÅTICA POR LOTES');
    console.log('='.repeat(80));
    console.log(`üéØ Tema: "${topic}"`);
    console.log(`üìä Total de secciones: ${totalSections}`);
    console.log(`üé§ Sistema de audio: ${useApplio ? 'Applio' : 'Google TTS'}`);
    console.log(`üñºÔ∏è Sistema de im√°genes: ${localAIImages ? 'IA Local (ComfyUI)' : googleImages ? 'Google Images' : geminiGeneratedImages ? 'Gemini/Imagen 4' : skipImages ? 'Sin im√°genes' : 'IA en la nube'}`);
    console.log('='.repeat(80) + '\n');
    
    const selectedVoice = voice || 'Orus';
    const sections = totalSections || 3;
    const selectedStyle = scriptStyle || 'professional';
    const numImages = imageCount || 5;
    const wordsMin = minWords || 800;
    const wordsMax = maxWords || 1100;
    const additionalInstructions = promptModifier || '';
    const selectedImageModel = imageModel || 'gemini2';
    const selectedLlmModel = llmModel || 'gemini-2.5-flash';
    let shouldSkipImages = skipImages === true;
    let shouldUseGoogleImages = googleImages === true;
    let shouldUseLocalAI = localAIImages === true;
    
    if (!topic) {
      return res.status(400).json({ error: 'Tema requerido' });
    }

    const allSections = [];
    const allImagePrompts = [];
    
    // Crear clave √∫nica para la conversaci√≥n primero
    // Si hay folderName personalizado, usarlo; sino usar el topic
    const baseNameForKey = folderName && folderName.trim() 
      ? folderName.trim() 
      : topic;
    const projectKey = createSafeFolderName(baseNameForKey);
    console.log(`üîë PROJECT KEY GENERADO: "${projectKey}" (de: "${baseNameForKey}")`);

    // Crear estructura de carpetas usando el mismo projectKey
    const folderStructure = createProjectStructure(topic, 1, projectKey);
    console.log(`üìÅ Estructura de proyecto creada: ${folderStructure.projectDir}`);

    // =======================================================================
    // FASE 1: GENERAR TODOS LOS GUIONES + PROMPTS DE IM√ÅGENES
    // =======================================================================
    console.log('\n' + 'üìù'.repeat(20));
    console.log('üìù FASE 1: GENERANDO TODOS LOS GUIONES Y PROMPTS');
    console.log('üìù'.repeat(20));
    
    const conversation = getOrCreateConversation(projectKey);
    conversation.topic = topic;
    conversation.totalSections = sections;
    conversation.history = [];
    
    // Generar estructura de cap√≠tulos primero
    console.log(`üìã Generando estructura de ${sections} cap√≠tulos...`);
    
    let chapterPrompt;
    if (selectedStyle && selectedStyle.startsWith('custom_') && customStyleInstructions) {
      chapterPrompt = `Eres un experto en crear estructuras narrativas personalizadas.

TEMA SOLICITADO: "${topic}"
TOTAL DE CAP√çTULOS: ${sections}
ESTILO PERSONALIZADO: ${customStyleInstructions}

Tu tarea es crear una ESTRUCTURA NARRATIVA que respete completamente el estilo personalizado definido.

INSTRUCCIONES ESPEC√çFICAS PARA ESTE ESTILO:
- Analiza cuidadosamente las instrucciones del estilo personalizado
- Crea t√≠tulos que reflejen EXACTAMENTE lo que pide el estilo
- Si el estilo menciona "situaciones cotidianas", crea cap√≠tulos sobre actividades diarias del personaje
- Si el estilo habla de "progresi√≥n del d√≠a", organiza los cap√≠tulos cronol√≥gicamente  
- Si pide "t√©cnicas de hipnotizaci√≥n", enf√≥cate en momentos relajantes del personaje
- IGNORA formatos educativos gen√©ricos, sigue SOLO el estilo personalizado

PARA "${topic}" CON ESTE ESTILO ESPEC√çFICO:
Genera t√≠tulos que narren momentos, actividades y situaciones del personaje, no informaci√≥n educativa sobre la serie.

FORMATO DE RESPUESTA OBLIGATORIO:
Debes responder √öNICAMENTE con los t√≠tulos separados por "||CAPITULO||"

VERIFICACI√ìN: Tu respuesta debe tener exactamente ${sections - 1} delimitadores "||CAPITULO||" para generar ${sections} t√≠tulos.

RESPONDE SOLO CON LOS T√çTULOS SEPARADOS POR "||CAPITULO||", NADA M√ÅS.`;
    } else {
      chapterPrompt = `Eres un experto en narrativa para YouTube especializado en contenido educativo y entretenimiento.

TEMA SOLICITADO: "${topic}"
TOTAL DE CAP√çTULOS: ${sections}

Tu tarea es crear una ESTRUCTURA NARRATIVA completa dividiendo el tema en ${sections} cap√≠tulos/secciones coherentes y bien organizadas.

INSTRUCCIONES:
- Crea EXACTAMENTE ${sections} t√≠tulos de cap√≠tulos
- Cada cap√≠tulo debe tener un t√≠tulo descriptivo y atractivo
- Los cap√≠tulos deben seguir un hilo narrativo l√≥gico
- Progresi√≥n natural del tema de inicio a conclusi√≥n
- T√≠tulos que generen curiosidad y mantengan el inter√©s

FORMATO DE RESPUESTA OBLIGATORIO:
Debes responder √öNICAMENTE con los t√≠tulos separados por "||CAPITULO||"

EJEMPLO PARA 3 CAP√çTULOS:
Cap√≠tulo 1: El Origen de la Leyenda||CAPITULO||Cap√≠tulo 2: Los Secretos Revelados||CAPITULO||Cap√≠tulo 3: El Legado Eterno

VERIFICACI√ìN: Tu respuesta debe tener exactamente ${sections - 1} delimitadores "||CAPITULO||" para generar ${sections} t√≠tulos.

RESPONDE SOLO CON LOS T√çTULOS SEPARADOS POR "||CAPITULO||", NADA M√ÅS.`;
    }
    
    let chapterStructure = [];
    try {
      const chapterResponse = await generateUniversalContent(
        selectedLlmModel,
        chapterPrompt,
        "Eres un experto en estructura narrativa. Tu √öNICA tarea es crear t√≠tulos de cap√≠tulos separados por '||CAPITULO||'. NUNCA generes texto adicional fuera de los t√≠tulos."
      );

      const chaptersText = chapterResponse || '';
      chapterStructure = chaptersText.split('||CAPITULO||').filter(title => title.trim()).slice(0, sections);
      
      console.log('üìñ ESTRUCTURA DE CAP√çTULOS GENERADA:');
      chapterStructure.forEach((title, index) => {
        console.log(`üìö Cap√≠tulo ${index + 1}: ${title.trim()}`);
      });
      
      conversation.chapterStructure = chapterStructure;
    } catch (error) {
      console.error('‚ùå Error generando estructura de cap√≠tulos:', error);
      chapterStructure = [];
    }
    
    // Generar todos los guiones
    console.log(`\nüìù Generando guiones para ${sections} secciones...`);
    
    for (let section = 1; section <= sections; section++) {
      console.log(`üìù Generando gui√≥n de la secci√≥n ${section}/${sections}...`);
      
      try {
        const promptContent = generateScriptPrompt(selectedStyle, topic, sections, section, customStyleInstructions, chapterStructure, section === 1 ? null : allSections, wordsMin, wordsMax);
        
        if (section === 1) {
          conversation.history = [{ role: 'user', parts: [{ text: promptContent }] }];
        } else {
          conversation.history.push({ role: 'user', parts: [{ text: promptContent }] });
        }
        
        const scriptResponse = await generateUniversalContent(
          selectedLlmModel,
          conversation.history,  // Pasar el historial completo como segundo par√°metro
          null  // No system instruction adicional
        );
        
        console.log(`üîç DEBUG: scriptResponse tipo:`, typeof scriptResponse);
        console.log(`üîç DEBUG: scriptResponse contenido:`, scriptResponse);
        console.log(`üîç DEBUG: scriptResponse longitud:`, scriptResponse ? scriptResponse.length : 'NULL');
        
        const scriptText = scriptResponse || '';
        conversation.history.push({ role: 'model', parts: [{ text: scriptText }] });
        
        allSections.push({
          section: section,
          title: chapterStructure[section - 1] || `Secci√≥n ${section}`,
          script: scriptText,
          cleanScript: scriptText.replace(/[*_#]/g, '').trim()
        });
        
        console.log(`‚úÖ Gui√≥n ${section} generado (${scriptText.length} caracteres)`);
        
        // Guardar el gui√≥n en archivo TXT
        try {
          const sectionFolderStructure = createProjectStructure(topic, section, projectKey);
          const scriptFileName = `${projectKey}_seccion_${section}_guion.txt`;
          const scriptFilePath = path.join(sectionFolderStructure.sectionDir, scriptFileName);
          
          const scriptContent = `GUI√ìN DE SECCI√ìN ${section}
===============================
Tema: ${topic}
Secci√≥n: ${section} de ${sections}
Cap√≠tulo: ${chapterStructure[section - 1] || `Secci√≥n ${section}`}
Longitud: ${scriptText.length} caracteres
Fecha de generaci√≥n: ${new Date().toLocaleString()}
${folderName ? `Nombre del proyecto: ${folderName}` : ''}

CONTENIDO DEL GUI√ìN:
${scriptText}

===============================
Gui√≥n generado autom√°ticamente por IA
`;
          
          fs.writeFileSync(scriptFilePath, scriptContent, 'utf8');
          console.log(`üíæ Gui√≥n guardado: ${scriptFilePath}`);
          
        } catch (saveError) {
          console.error(`‚ùå Error guardando gui√≥n de secci√≥n ${section}:`, saveError);
        }
        
        // Generar prompts de im√°genes para esta secci√≥n
        if (!shouldSkipImages) {
          console.log(`üé® Generando prompts de im√°genes para secci√≥n ${section}...`);
          
          if (shouldUseGoogleImages) {
            // Para Google Images (Bing): generar keywords de b√∫squeda simples
            console.log(`üîç Generando keywords de b√∫squeda para Google Images/Bing...`);
            
            const keywordsPrompt = `Bas√°ndote en este gui√≥n de la secci√≥n ${section} sobre "${topic}": "${scriptText}", 
            
extrae EXACTAMENTE ${numImages} keywords o frases cortas de b√∫squeda para encontrar im√°genes relacionadas con esta secci√≥n.

IMPORTANTE:
- Cada keyword debe ser de 1-4 palabras m√°ximo
- Deben ser t√©rminos que se puedan buscar en Google Images
- Enf√≥cate en elementos visuales espec√≠ficos mencionados en esta secci√≥n
- DEBES separar cada keyword con "||PROMPT||" (sin espacios adicionales)
- NO incluyas descripciones largas, solo keywords de b√∫squeda

EJEMPLO de respuesta:
castillo medieval||PROMPT||espada dorada||PROMPT||batalla √©pica||PROMPT||drag√≥n volando||PROMPT||h√©roe guerrero

FORMATO DE RESPUESTA OBLIGATORIO:
keyword1||PROMPT||keyword2||PROMPT||keyword3||PROMPT||... hasta keyword${numImages}`;

            const keywordsResponse = await generateUniversalContent(
              selectedLlmModel,
              keywordsPrompt,
              `Eres un experto en SEO y b√∫squeda de im√°genes. Tu √öNICA tarea es extraer keywords simples separados por "||PROMPT||". NO generes descripciones largas.`
            );
            
            const keywordsText = keywordsResponse || '';
            const sectionImagePrompts = keywordsText.split('||PROMPT||').filter(p => p.trim()).slice(0, numImages);
            
            allImagePrompts.push({
              section: section,
              prompts: sectionImagePrompts
            });
            
            console.log(`‚úÖ ${sectionImagePrompts.length} keywords de b√∫squeda generados para secci√≥n ${section}`);
            
          } else {
            // Para IA generativa: generar prompts descriptivos detallados
            console.log(`üé® Generando prompts descriptivos para IA generativa...`);
            
            // Obtener prompts anteriores para mantener consistencia
            console.log(`üß† Recuperando contexto de prompts anteriores...`);
            const { previousPrompts, contextInfo } = getPreviousImagePrompts(projectKey, section);
            
            // Construir contexto de consistencia
            const consistencyContext = buildConsistencyContext(previousPrompts, contextInfo);
          
          // Construir prompt base para el LLM
          let basePrompt = `Bas√°ndote en este gui√≥n de la secci√≥n ${section} sobre "${topic}": "${scriptText}", crea EXACTAMENTE ${numImages} prompts detallados para generar ${numImages} im√°genes que ilustren visualmente el contenido ESPEC√çFICO de esta secci√≥n.

IMPORTANTE: Debes crear EXACTAMENTE ${numImages} prompts, ni m√°s ni menos.

ENFOQUE ESPEC√çFICO PARA ESTA SECCI√ìN:
- Estas im√°genes deben representar SOLO el contenido de la secci√≥n ${section}, no de todo el proyecto
- Cada imagen debe mostrar diferentes aspectos, momentos o elementos clave mencionados en esta secci√≥n espec√≠fica
- NO dividas la secci√≥n en partes cronol√≥gicas - en su lugar, crea ${numImages} perspectivas diferentes del mismo contenido de la secci√≥n
- Enf√≥cate en elementos espec√≠ficos, personajes, lugares, objetos, emociones o conceptos mencionados en esta secci√≥n
- Mant√©n consistencia visual con las secciones anteriores${consistencyContext}

TIPOS DE PROMPTS PARA ESTA SECCI√ìN:
- Imagen principal: La escena o momento central de la secci√≥n
- Detalles importantes: Objetos, elementos o caracter√≠sticas espec√≠ficas mencionadas
- Perspectivas diferentes: Diferentes √°ngulos o enfoques del mismo contenido
- Atm√≥sfera: Im√°genes que capturen el mood o ambiente de la secci√≥n
- Elementos secundarios: Aspectos adicionales que complementen la narrativa de esta secci√≥n

INSTRUCCIONES CR√çTICAS PARA EL FORMATO:
- DEBES crear ${numImages} prompts independientes que representen la MISMA secci√≥n desde diferentes perspectivas
- NO dividas el contenido en secuencia cronol√≥gica - todas las im√°genes son de la MISMA secci√≥n
- DEBES separar cada prompt con "||PROMPT||" (sin espacios adicionales)
- DEBES asegurarte de que haya exactamente ${numImages} prompts en tu respuesta
- Todas las im√°genes deben estar relacionadas con el contenido espec√≠fico de la secci√≥n ${section}
- Incluye detalles espec√≠ficos mencionados en el texto del gui√≥n de esta secci√≥n

REQUISITOS OBLIGATORIOS para cada prompt:
- Formato: Aspecto 16:9 (widescreen)
- Estilo: Realista, alta calidad, 4K

FORMATO DE RESPUESTA OBLIGATORIO:
DEBES presentar EXACTAMENTE ${numImages} prompts separados por "||PROMPT||" (sin espacios antes o despu√©s del delimitador).

ESTRUCTURA REQUERIDA:
Prompt 1 aqu√≠||PROMPT||Prompt 2 aqu√≠||PROMPT||Prompt 3 aqu√≠||PROMPT||... hasta el Prompt ${numImages}

VERIFICACI√ìN FINAL: Tu respuesta debe contener exactamente ${numImages - 1} ocurrencias del delimitador "||PROMPT||" para generar ${numImages} prompts.`;
            
            // Integrar instrucciones adicionales en el prompt del LLM
            const finalPromptForLLM = integrateAdditionalInstructions(basePrompt, additionalInstructions);
            
            console.log(`üß† Creando prompts para secuencia de ${numImages} im√°genes con contexto de consistencia...`);
            if (previousPrompts.length > 0) {
              console.log(`üîó Usando ${previousPrompts.length} prompts anteriores para mantener consistencia`);
            }
            if (additionalInstructions && additionalInstructions.trim()) {
              console.log(`üìù Integrando instrucciones adicionales en el LLM: "${additionalInstructions.trim()}"`);
            }
            
            const imagePromptsResponse = await generateUniversalContent(
              selectedLlmModel,
              finalPromptForLLM,
              `Eres un experto en arte conceptual y narrativa visual. Tu √öNICA tarea es crear prompts separados por "||PROMPT||".`
            );
            
            const promptsText = imagePromptsResponse || '';
            const sectionImagePrompts = promptsText.split('||PROMPT||').filter(p => p.trim()).slice(0, numImages);
            
            allImagePrompts.push({
              section: section,
              prompts: sectionImagePrompts
            });
            
            console.log(`‚úÖ ${sectionImagePrompts.length} keywords de b√∫squeda generados para secci√≥n ${section}`);
          }
        }
        
        // ===============================================================
        // GUARDADO PROGRESIVO Y ACTUALIZACI√ìN DE PROGRESO
        // ===============================================================
        
        console.log(`üìä ACTUALIZANDO PROGRESO: Secci√≥n ${section}/${sections} completada`);
        
        // Calcular tiempo de generaci√≥n de esta secci√≥n
        const sectionStartTime = Date.now() - 30000; // Estimaci√≥n aproximada
        const sectionEndTime = Date.now();
        const sectionDuration = sectionEndTime - sectionStartTime;
        
        // Actualizar progreso de la Fase 1 (Scripts)
        const progressData = updateProjectProgress(
          projectKey, 
          'script', 
          section,      // completedItems (actual)
          sections,     // totalItems 
          'secci√≥n', 
          sectionDuration
        );
        
        // Preparar datos del proyecto para guardado progresivo
        const projectDataForSave = {
          topic: topic,
          folderName: folderName,
          totalSections: sections,
          voice: selectedVoice,
          imageModel: selectedImageModel,
          llmModel: selectedLlmModel,
          scriptStyle: selectedStyle,
          customStyleInstructions: customStyleInstructions,
          promptModifier: additionalInstructions,
          imageCount: numImages,
          skipImages: shouldSkipImages,
          googleImages: shouldUseGoogleImages,
          localAIImages: shouldUseLocalAI,
          useApplio: useApplio || false,
          applioVoice: applioVoice,
          applioModel: applioModel,
          applioPitch: applioPitch,
          chapterStructure: chapterStructure,
          createdAt: new Date().toISOString()
        };
        
        // Crear informaci√≥n de la secci√≥n completada
        const completedSectionData = {
          section: section,
          title: chapterStructure[section - 1] || `Secci√≥n ${section}`,
          script: allSections[section - 1].script,
          imagePrompts: allImagePrompts.find(ip => ip.section === section)?.prompts || [],
          completedAt: new Date().toISOString(),
          scriptFile: {
            path: `outputs/${projectKey}/seccion_${section}/${projectKey}_seccion_${section}_guion.txt`,
            filename: `${projectKey}_seccion_${section}_guion.txt`,
            saved: true
          },
          promptsFile: shouldSkipImages ? null : {
            path: `outputs/${projectKey}/seccion_${section}/${projectKey}_seccion_${section}_prompts_imagenes.txt`,
            filename: `${projectKey}_seccion_${section}_prompts_imagenes.txt`,
            saved: true
          }
        };
        
        // Guardar estado progresivo
        const currentCompletedSections = allSections.map((sec, index) => {
          const sectionData = {
            section: sec.section,
            title: sec.title,
            script: sec.script,
            imagePrompts: allImagePrompts.find(ip => ip.section === sec.section)?.prompts || [],
            completedAt: new Date().toISOString(),
            scriptFile: {
              path: `outputs/${projectKey}/seccion_${sec.section}/${projectKey}_seccion_${sec.section}_guion.txt`,
              filename: `${projectKey}_seccion_${sec.section}_guion.txt`,
              saved: true
            },
            promptsFile: shouldSkipImages ? null : {
              path: `outputs/${projectKey}/seccion_${sec.section}/${projectKey}_seccion_${sec.section}_prompts_imagenes.txt`,
              filename: `${projectKey}_seccion_${sec.section}_prompts_imagenes.txt`,
              saved: true
            }
          };
          return sectionData;
        });
        
        saveProgressiveProjectState(projectKey, projectDataForSave, currentCompletedSections, [], []);
        
      } catch (error) {
        console.error(`‚ùå Error generando secci√≥n ${section}:`, error);
        allSections.push({
          section: section,
          title: `Secci√≥n ${section}`,
          script: `Error generando contenido: ${error.message}`,
          cleanScript: `Error generando contenido: ${error.message}`
        });
      }
    }
    
    console.log(`\n‚úÖ FASE 1 COMPLETADA:`);
    console.log(`üìù ${allSections.length} guiones generados`);
    console.log(`üé® ${allImagePrompts.length} sets de prompts de im√°genes generados`);
    
    res.json({
      success: true,
      phase: 'scripts_completed',
      message: `Fase 1 completada: ${allSections.length} guiones y prompts generados`,
      data: {
        sections: allSections,
        imagePrompts: allImagePrompts,
        chapterStructure: chapterStructure,
        projectKey: projectKey,
        additionalInstructions: additionalInstructions, // Pasar las instrucciones adicionales
        topic: topic,
        folderName: folderName
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error en generaci√≥n autom√°tica por lotes:', error);
    res.status(500).json({ error: 'Error en generaci√≥n autom√°tica: ' + error.message });
  }
});

// ENDPOINT PARA CONTINUAR CON FASE 2: GENERACI√ìN DE AUDIO POR LOTES
app.post('/generate-batch-audio', async (req, res) => {
  try {
    const { projectData, useApplio, voice, applioVoice, applioModel, applioPitch, folderName } = req.body;
    
    console.log('\n' + 'üéµ'.repeat(20));
    console.log('üéµ FASE 2: GENERANDO TODOS LOS ARCHIVOS DE AUDIO');
    console.log('üéµ'.repeat(20));
    
    const { sections, projectKey } = projectData;
    const audioMethod = useApplio ? 'Applio' : 'Google TTS';
    
    // Obtener el tema base del proyecto
    const baseTopic = projectData.sections[0].title.split(':')[0] || 'Proyecto';
    
    console.log(`üé§ Generando audio para ${sections.length} secciones con ${audioMethod}...`);
    
    // Si usamos Applio, inicializarlo una vez
    if (useApplio) {
      console.log('üîÑ Iniciando Applio para generaci√≥n de audio...');
      const applioStarted = await startApplio();
      if (!applioStarted) {
        throw new Error('No se pudo iniciar Applio');
      }
    }
    
    const audioResults = [];
    
    // Generar audio para todas las secciones
    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      console.log(`üéµ Generando audio ${i + 1}/${sections.length}: ${section.title}`);
      
      // Crear estructura de carpetas individual para esta secci√≥n
      const sectionFolderStructure = createProjectStructure(baseTopic, section.section, folderName);
      
      try {
        let audioPath;
        
        if (useApplio) {
          // Generar con Applio
          const selectedApplioVoice = applioVoice || 'es-ES-ElviraNeural.pth';
          const selectedApplioModel = applioModel || 'rmvpe';
          const selectedPitch = applioPitch || 0;
          
          const fileName = `${createSafeFolderName(section.title)}_seccion_${section.section}_${Date.now()}.wav`;
          const filePath = path.join(sectionFolderStructure.sectionDir, fileName);
          
          console.log(`üìÅ Guardando audio en: ${filePath}`);
          
          // Generar audio con Applio
          const result = await applioClient.textToSpeech(section.cleanScript, filePath, {
            model: selectedApplioModel,
            speed: 0,
            pitch: selectedPitch,
            voicePath: selectedApplioVoice
          });
          
          if (!result.success) {
            throw new Error('Applio no gener√≥ el audio correctamente');
          }
          
          // Retornar ruta relativa para acceso web
          audioPath = path.relative('./public', filePath).replace(/\\/g, '/');
          
          console.log(`‚úÖ Audio Applio generado: ${audioPath}`);
          
        } else {
          // Generar con Google TTS
          audioPath = await generateStoryAudio(
            section.cleanScript, 
            voice || 'Orus', 
            sectionFolderStructure.sectionDir, 
            section.title, 
            section.section
          );
          
          console.log(`‚úÖ Audio Google TTS generado: ${audioPath}`);
        }
        
        audioResults.push({
          section: section.section,
          title: section.title,
          audioPath: audioPath,
          success: true
        });

        // üìä GUARDADO PROGRESIVO: Actualizar progreso despu√©s de cada audio
        try {
          const progressData = updateProjectProgress(projectKey, 'audio', i + 1, sections.length);
          
          // Guardar estado del proyecto con audios completados hasta ahora
          const updatedProjectData = {
            ...projectData,
            audioResults: audioResults,
            audioMethod: audioMethod,
            audioConfig: useApplio ? { 
              voice: applioVoice, 
              model: applioModel, 
              pitch: applioPitch 
            } : { voice: voice },
            phase: 'audio',
            lastUpdate: new Date().toISOString()
          };
          
          await saveProgressiveProjectState(projectKey, updatedProjectData, progressData);
          
          console.log(`üìä Progreso guardado: Audio ${i + 1}/${sections.length} (${progressData.percentage}%) - Tiempo estimado restante: ${progressData.estimatedTimeRemaining}`);
          
        } catch (progressError) {
          console.error('‚ö†Ô∏è Error guardando progreso de audio:', progressError.message);
          // No interrumpir la generaci√≥n por errores de guardado
        }
        
      } catch (error) {
        console.error(`‚ùå Error generando audio para secci√≥n ${section.section}:`, error);
        audioResults.push({
          section: section.section,
          title: section.title,
          audioPath: null,
          success: false,
          error: error.message
        });

        // üìä GUARDADO PROGRESIVO: Actualizar progreso incluso en caso de error
        try {
          const progressData = updateProjectProgress(projectKey, 'audio', i + 1, sections.length);
          
          const updatedProjectData = {
            ...projectData,
            audioResults: audioResults,
            audioMethod: audioMethod,
            audioConfig: useApplio ? { 
              voice: applioVoice, 
              model: applioModel, 
              pitch: applioPitch 
            } : { voice: voice },
            phase: 'audio',
            lastUpdate: new Date().toISOString()
          };
          
          await saveProgressiveProjectState(projectKey, updatedProjectData, progressData);
          
          console.log(`üìä Progreso guardado (con error): Audio ${i + 1}/${sections.length} (${progressData.percentage}%)`);
          
        } catch (progressError) {
          console.error('‚ö†Ô∏è Error guardando progreso de audio:', progressError.message);
        }
      }
    }
    
    const successfulAudio = audioResults.filter(r => r.success).length;
    
    console.log(`\n‚úÖ FASE 2 COMPLETADA:`);
    console.log(`üéµ ${successfulAudio}/${sections.length} archivos de audio generados con ${audioMethod}`);
    
    res.json({
      success: true,
      phase: 'audio_completed',
      message: `Fase 2 completada: ${successfulAudio}/${sections.length} audios generados con ${audioMethod}`,
      data: {
        audioResults: audioResults,
        projectKey: projectKey,
        audioMethod: audioMethod
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error en generaci√≥n de audio por lotes:', error);
    res.status(500).json({ error: 'Error en generaci√≥n de audio: ' + error.message });
  }
});

// ENDPOINT PARA GENERAR SOLO AUDIOS FALTANTES CON APPLIO
app.post('/generate-missing-applio-audios', async (req, res) => {
  try {
    const { folderName, applioVoice, applioModel, applioPitch, totalSections, scriptStyle = 'professional', customStyleInstructions = '', wordsMin = 800, wordsMax = 1100 } = req.body;
    
    console.log('\n' + 'üîç'.repeat(20));
    console.log('üîç VERIFICANDO Y GENERANDO AUDIOS FALTANTES CON APPLIO');
    console.log('üîç'.repeat(20));
    
    console.log('üé§ Configuraci√≥n de generaci√≥n:', {
      proyecto: folderName,
      voz: applioVoice,
      modelo: applioModel,
      pitch: applioPitch,
      secciones: totalSections
    });
    
    // Verificar que el proyecto existe
    const projectState = loadProjectState(folderName);
    if (!projectState) {
      return res.status(404).json({ error: 'Proyecto no encontrado' });
    }
    
    // Verificar qu√© audios faltan
    const missingAudioSections = [];
    const projectDir = path.join('./public/outputs', folderName);
    
    for (let i = 0; i < projectState.completedSections.length; i++) {
      const section = projectState.completedSections[i];
      const sectionDir = path.join(projectDir, `seccion_${section.section}`);
      
      // Verificar si la carpeta de la secci√≥n existe
      if (!fs.existsSync(sectionDir)) {
        console.log(`üìÅ Creando carpeta faltante para secci√≥n ${section.section}: ${sectionDir}`);
        fs.mkdirSync(sectionDir, { recursive: true });
      }
      
      // Buscar archivos de audio en la carpeta de la secci√≥n
      let hasAudioFile = false;
      
      if (fs.existsSync(sectionDir)) {
        const files = fs.readdirSync(sectionDir);
        hasAudioFile = files.some(file => 
          file.endsWith('.wav') || 
          file.endsWith('.mp3') || 
          file.endsWith('.m4a') ||
          file.endsWith('.ogg')
        );
        
        if (hasAudioFile) {
          const audioFiles = files.filter(file => 
            file.endsWith('.wav') || file.endsWith('.mp3') || 
            file.endsWith('.m4a') || file.endsWith('.ogg')
          );
          console.log(`‚úÖ Secci√≥n ${section.section} ya tiene audio: ${audioFiles.join(', ')}`);
        }
      }
      
      if (!hasAudioFile) {
        console.log(`üéµ Secci√≥n ${section.section} necesita audio`);
        missingAudioSections.push(section);
      }
    }
    
    console.log(`üìä An√°lisis completo: ${missingAudioSections.length}/${projectState.completedSections.length} secciones necesitan audio`);
    
    if (missingAudioSections.length === 0) {
      return res.json({
        success: true,
        message: 'Todos los audios ya existen, no se gener√≥ ninguno nuevo',
        data: {
          generatedCount: 0,
          totalSections: projectState.completedSections.length,
          skippedSections: projectState.completedSections.length,
          missingAudioSections: []
        }
      });
    }
    
    // Inicializar Applio solo si hay audios que generar
    console.log('üîÑ Iniciando Applio para generaci√≥n de audios faltantes...');
    const applioStarted = await startApplio();
    if (!applioStarted) {
      throw new Error('No se pudo iniciar Applio');
    }
    
    const generationResults = [];
    
    // Generar audio solo para las secciones que lo necesitan
    for (let i = 0; i < missingAudioSections.length; i++) {
      const section = missingAudioSections[i];
      console.log(`üéµ Generando audio faltante ${i + 1}/${missingAudioSections.length}: Secci√≥n ${section.section}`);
      
      try {
        // Obtener el directorio de la secci√≥n
        const sectionDir = path.join(projectDir, `seccion_${section.section}`);
        
        // Crear nombre de archivo √∫nico
        const fileName = `${folderName}_seccion_${section.section}_applio_${Date.now()}.wav`;
        const filePath = path.join(sectionDir, fileName);
        
        console.log(`üìÅ Generando audio en: ${filePath}`);
        console.log(`üìù Script completo: ${section.script.substring(0, 100)}...`);
        
        // Extraer solo el contenido del gui√≥n sin metadatos
        const scriptResult = extractScriptContent(section.script);
        let cleanScript = scriptResult.content;
        
        // Si el script est√° vac√≠o, generar el contenido faltante
        if (scriptResult.isEmpty && scriptResult.hasStructure) {
          console.log(`üîß Generando gui√≥n faltante para secci√≥n ${section.section}...`);
          
          // Obtener informaci√≥n adicional del proyecto para la generaci√≥n
          const chapterTitle = section.title && section.title !== `Secci√≥n ${section.section}` 
            ? section.title 
            : null;
          
          // Obtener secciones anteriores para contexto
          const previousSections = projectState.completedSections
            .filter(s => s.section < section.section)
            .sort((a, b) => a.section - b.section);
          
          const generationResult = await generateMissingScript(
            projectState.topic || 'Proyecto de gaming',
            section.section,
            projectState.totalSections,
            chapterTitle,
            previousSections,
            scriptStyle,
            customStyleInstructions,
            wordsMin,
            wordsMax
          );
          
          if (generationResult.success) {
            cleanScript = generationResult.script;
            console.log(`‚úÖ Gui√≥n generado: ${cleanScript.length} caracteres`);
            
            // Actualizar el archivo TXT con el nuevo contenido
            try {
              const sectionDir = path.join(projectDir, `seccion_${section.section}`);
              const scriptFiles = fs.readdirSync(sectionDir).filter(file => 
                file.endsWith('.txt') && !file.includes('metadata') && !file.includes('keywords')
              );
              
              if (scriptFiles.length > 0) {
                const scriptFilePath = path.join(sectionDir, scriptFiles[0]);
                const originalContent = fs.readFileSync(scriptFilePath, 'utf8');
                
                // Reconstruir el archivo con el nuevo contenido
                const updatedContent = originalContent.replace(
                  /(CONTENIDO DEL GUI√ìN:\s*\n)(.*?)(===============================)/s,
                  `$1${cleanScript}\n\n$3`
                );
                
                fs.writeFileSync(scriptFilePath, updatedContent, 'utf8');
                console.log(`üìù Archivo TXT actualizado con el nuevo gui√≥n`);
              }
            } catch (updateError) {
              console.warn(`‚ö†Ô∏è No se pudo actualizar el archivo TXT:`, updateError.message);
            }
            
          } else {
            console.error(`‚ùå No se pudo generar el gui√≥n: ${generationResult.error}`);
            throw new Error(`No se pudo generar el gui√≥n faltante: ${generationResult.error}`);
          }
        } else if (scriptResult.isEmpty) {
          throw new Error('El script est√° vac√≠o y no se puede generar audio');
        }
        
        console.log(`üßπ Script limpio: ${cleanScript.substring(0, 100)}...`);
        
        // Generar audio con Applio usando solo el contenido del gui√≥n
        const result = await applioClient.textToSpeech(cleanScript, filePath, {
          model: applioModel || 'rmvpe',
          speed: 0,
          pitch: applioPitch || 0,
          voicePath: applioVoice || 'es-ES-ElviraNeural.pth'
        });
        
        if (!result.success) {
          throw new Error('Applio no gener√≥ el audio correctamente');
        }
        
        // Retornar ruta relativa para acceso web
        const audioPath = path.relative('./public', filePath).replace(/\\/g, '/');
        
        generationResults.push({
          section: section.section,
          audioPath: audioPath,
          success: true,
          message: `Audio generado exitosamente`
        });
        
        console.log(`‚úÖ Audio generado: ${audioPath}`);
        
      } catch (error) {
        console.error(`‚ùå Error generando audio para secci√≥n ${section.section}:`, error);
        generationResults.push({
          section: section.section,
          audioPath: null,
          success: false,
          error: error.message
        });
      }
    }
    
    const successfulGeneration = generationResults.filter(r => r.success).length;
    
    console.log(`\n‚úÖ GENERACI√ìN DE AUDIOS FALTANTES COMPLETADA:`);
    console.log(`üéµ ${successfulGeneration}/${missingAudioSections.length} audios faltantes generados con Applio`);
    console.log(`‚è≠Ô∏è ${projectState.completedSections.length - missingAudioSections.length} audios ya exist√≠an`);
    
    res.json({
      success: true,
      message: `${successfulGeneration}/${missingAudioSections.length} audios faltantes generados exitosamente`,
      data: {
        generationResults: generationResults,
        generatedCount: successfulGeneration,
        totalSections: projectState.completedSections.length,
        skippedSections: projectState.completedSections.length - missingAudioSections.length,
        missingAudioSections: missingAudioSections.map(s => s.section),
        applioConfig: {
          voice: applioVoice,
          model: applioModel,
          pitch: applioPitch
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error en generaci√≥n de audios faltantes:', error);
    res.status(500).json({ error: 'Error generando audios faltantes: ' + error.message });
  }
});

// ENDPOINT PARA REGENERAR AUDIOS CON APPLIO (MANTENER PARA COMPATIBILIDAD)
app.post('/regenerate-applio-audios', async (req, res) => {
  try {
    const { folderName, applioVoice, applioModel, applioPitch, totalSections, scriptStyle = 'professional', customStyleInstructions = '', wordsMin = 800, wordsMax = 1100 } = req.body;
    
    console.log('\n' + 'üîÑ'.repeat(20));
    console.log('üîÑ REGENERANDO AUDIOS CON APPLIO');
    console.log('üîÑ'.repeat(20));
    
    console.log('üé§ Configuraci√≥n de regeneraci√≥n:', {
      proyecto: folderName,
      voz: applioVoice,
      modelo: applioModel,
      pitch: applioPitch,
      secciones: totalSections
    });
    
    // Verificar que el proyecto existe
    const projectState = loadProjectState(folderName);
    if (!projectState) {
      return res.status(404).json({ error: 'Proyecto no encontrado' });
    }
    
    // Inicializar Applio
    console.log('üîÑ Iniciando Applio para regeneraci√≥n de audio...');
    const applioStarted = await startApplio();
    if (!applioStarted) {
      throw new Error('No se pudo iniciar Applio');
    }
    
    const regenerationResults = [];
    
    // Regenerar audio para todas las secciones completadas
    for (let i = 0; i < projectState.completedSections.length; i++) {
      const section = projectState.completedSections[i];
      console.log(`üéµ Regenerando audio ${i + 1}/${totalSections}: Secci√≥n ${section.section}`);
      
      try {
        // Obtener el directorio de la secci√≥n
        const projectDir = path.join('./public/outputs', folderName);
        const sectionDir = path.join(projectDir, `seccion_${section.section}`);
        
        // Crear nombre de archivo √∫nico
        const fileName = `${folderName}_seccion_${section.section}_regenerado_${Date.now()}.wav`;
        const filePath = path.join(sectionDir, fileName);
        
        console.log(`üìÅ Regenerando audio en: ${filePath}`);
        console.log(`üìù Script completo: ${section.script.substring(0, 100)}...`);
        
        // Extraer solo el contenido del gui√≥n sin metadatos
        const scriptResult = extractScriptContent(section.script);
        let cleanScript = scriptResult.content;
        
        // Si el script est√° vac√≠o, generar el contenido faltante
        if (scriptResult.isEmpty && scriptResult.hasStructure) {
          console.log(`üîß Generando gui√≥n faltante para secci√≥n ${section.section}...`);
          
          // Obtener informaci√≥n adicional del proyecto para la generaci√≥n
          const chapterTitle = section.title && section.title !== `Secci√≥n ${section.section}` 
            ? section.title 
            : null;
          
          // Obtener secciones anteriores para contexto
          const previousSections = projectState.completedSections
            .filter(s => s.section < section.section)
            .sort((a, b) => a.section - b.section);
          
          const generationResult = await generateMissingScript(
            projectState.topic || 'Proyecto de gaming',
            section.section,
            projectState.totalSections,
            chapterTitle,
            previousSections,
            scriptStyle,
            customStyleInstructions,
            wordsMin,
            wordsMax
          );
          
          if (generationResult.success) {
            cleanScript = generationResult.script;
            console.log(`‚úÖ Gui√≥n generado: ${cleanScript.length} caracteres`);
            
            // Actualizar el archivo TXT con el nuevo contenido
            try {
              const projectDir = path.join('./public/outputs', folderName);
              const sectionDir = path.join(projectDir, `seccion_${section.section}`);
              const scriptFiles = fs.readdirSync(sectionDir).filter(file => 
                file.endsWith('.txt') && !file.includes('metadata') && !file.includes('keywords')
              );
              
              if (scriptFiles.length > 0) {
                const scriptFilePath = path.join(sectionDir, scriptFiles[0]);
                const originalContent = fs.readFileSync(scriptFilePath, 'utf8');
                
                // Reconstruir el archivo con el nuevo contenido
                const updatedContent = originalContent.replace(
                  /(CONTENIDO DEL GUI√ìN:\s*\n)(.*?)(===============================)/s,
                  `$1${cleanScript}\n\n$3`
                );
                
                fs.writeFileSync(scriptFilePath, updatedContent, 'utf8');
                console.log(`üìù Archivo TXT actualizado con el nuevo gui√≥n`);
              }
            } catch (updateError) {
              console.warn(`‚ö†Ô∏è No se pudo actualizar el archivo TXT:`, updateError.message);
            }
            
          } else {
            console.error(`‚ùå No se pudo generar el gui√≥n: ${generationResult.error}`);
            throw new Error(`No se pudo generar el gui√≥n faltante: ${generationResult.error}`);
          }
        } else if (scriptResult.isEmpty) {
          throw new Error('El script est√° vac√≠o y no se puede generar audio');
        }
        
        console.log(`üßπ Script limpio: ${cleanScript.substring(0, 100)}...`);
        
        // Generar audio con Applio usando solo el contenido del gui√≥n
        const result = await applioClient.textToSpeech(cleanScript, filePath, {
          model: applioModel || 'rmvpe',
          speed: 0,
          pitch: applioPitch || 0,
          voicePath: applioVoice || 'es-ES-ElviraNeural.pth'
        });
        
        if (!result.success) {
          throw new Error('Applio no gener√≥ el audio correctamente');
        }
        
        // Retornar ruta relativa para acceso web
        const audioPath = path.relative('./public', filePath).replace(/\\/g, '/');
        
        regenerationResults.push({
          section: section.section,
          audioPath: audioPath,
          success: true,
          message: `Audio regenerado exitosamente`
        });
        
        console.log(`‚úÖ Audio regenerado: ${audioPath}`);
        
      } catch (error) {
        console.error(`‚ùå Error regenerando audio para secci√≥n ${section.section}:`, error);
        regenerationResults.push({
          section: section.section,
          audioPath: null,
          success: false,
          error: error.message
        });
      }
    }
    
    const successfulRegeneration = regenerationResults.filter(r => r.success).length;
    
    console.log(`\n‚úÖ REGENERACI√ìN COMPLETADA:`);
    console.log(`üéµ ${successfulRegeneration}/${totalSections} audios regenerados con Applio`);
    
    res.json({
      success: true,
      message: `${successfulRegeneration}/${totalSections} audios regenerados exitosamente`,
      data: {
        regenerationResults: regenerationResults,
        successfulRegeneration: successfulRegeneration,
        totalSections: totalSections,
        applioConfig: {
          voice: applioVoice,
          model: applioModel,
          pitch: applioPitch
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error en regeneraci√≥n de audios:', error);
    res.status(500).json({ error: 'Error regenerando audios: ' + error.message });
  }
});

// ENDPOINT PARA REGENERAR SOLO LOS GUIONES FALTANTES (SIN AUDIO)
app.post('/generate-missing-scripts', async (req, res) => {
  try {
    const { folderName, scriptStyle = 'professional', customStyleInstructions = '', wordsMin = 800, wordsMax = 1100 } = req.body;
    
    console.log('\n' + 'üìù'.repeat(20));
    console.log('üìù REGENERANDO GUIONES FALTANTES');
    console.log('üìù'.repeat(20));
    
    // Verificar que el proyecto existe
    const projectState = loadProjectState(folderName);
    if (!projectState) {
      return res.status(404).json({ error: 'Proyecto no encontrado' });
    }
    
    console.log(`üìù Verificando guiones faltantes en proyecto: ${folderName}`);
    console.log(`üìä Total de secciones: ${projectState.completedSections.length}`);
    
    // Verificar qu√© secciones tienen guiones vac√≠os
    const missingSectionScripts = [];
    const projectDir = path.join('./public/outputs', folderName);
    
    for (let i = 0; i < projectState.completedSections.length; i++) {
      const section = projectState.completedSections[i];
      const sectionDir = path.join(projectDir, `seccion_${section.section}`);
      
      if (fs.existsSync(sectionDir)) {
        const scriptFiles = fs.readdirSync(sectionDir).filter(file => 
          file.endsWith('.txt') && !file.includes('metadata') && !file.includes('keywords')
        );
        
        if (scriptFiles.length > 0) {
          const scriptFilePath = path.join(sectionDir, scriptFiles[0]);
          const fullContent = fs.readFileSync(scriptFilePath, 'utf8');
          const scriptResult = extractScriptContent(fullContent);
          
          if (scriptResult.isEmpty && scriptResult.hasStructure) {
            console.log(`üìù Secci√≥n ${section.section} necesita regeneraci√≥n de gui√≥n`);
            missingSectionScripts.push({
              ...section,
              scriptFilePath: scriptFilePath,
              originalContent: fullContent
            });
          } else if (scriptResult.content.length > 0) {
            console.log(`‚úÖ Secci√≥n ${section.section} ya tiene gui√≥n (${scriptResult.content.length} caracteres)`);
          }
        }
      }
    }
    
    console.log(`üìä An√°lisis de guiones: ${missingSectionScripts.length}/${projectState.completedSections.length} secciones necesitan regeneraci√≥n`);
    
    if (missingSectionScripts.length === 0) {
      return res.json({
        success: true,
        message: 'Todos los guiones ya existen, no se regener√≥ ninguno',
        data: {
          generatedCount: 0,
          totalSections: projectState.completedSections.length,
          skippedSections: projectState.completedSections.length,
          missingScripts: []
        }
      });
    }
    
    const scriptResults = [];
    
    // Generar guiones solo para las secciones que lo necesitan
    for (let i = 0; i < missingSectionScripts.length; i++) {
      const section = missingSectionScripts[i];
      console.log(`üìù Generando gui√≥n ${i + 1}/${missingSectionScripts.length}: Secci√≥n ${section.section}`);
      
      try {
        // Obtener informaci√≥n adicional del proyecto para la generaci√≥n
        const chapterTitle = section.title && section.title !== `Secci√≥n ${section.section}` 
          ? section.title 
          : null;
        
        // Obtener secciones anteriores para contexto
        const previousSections = projectState.completedSections
          .filter(s => s.section < section.section)
          .sort((a, b) => a.section - b.section);
        
        const generationResult = await generateMissingScript(
          projectState.topic || 'Proyecto de gaming',
          section.section,
          projectState.totalSections,
          chapterTitle,
          previousSections,
          scriptStyle,
          customStyleInstructions,
          wordsMin,
          wordsMax
        );
        
        if (generationResult.success) {
          // Actualizar el archivo TXT con el nuevo contenido
          const updatedContent = section.originalContent.replace(
            /(CONTENIDO DEL GUI√ìN:\s*\n)(.*?)(===============================)/s,
            `$1${generationResult.script}\n\n$3`
          );
          
          fs.writeFileSync(section.scriptFilePath, updatedContent, 'utf8');
          
          scriptResults.push({
            section: section.section,
            scriptLength: generationResult.script.length,
            success: true,
            message: `Gui√≥n generado exitosamente`
          });
          
          console.log(`‚úÖ Gui√≥n generado para secci√≥n ${section.section}: ${generationResult.script.length} caracteres`);
          
        } else {
          scriptResults.push({
            section: section.section,
            success: false,
            error: generationResult.error
          });
          console.error(`‚ùå Error generando gui√≥n para secci√≥n ${section.section}: ${generationResult.error}`);
        }
        
      } catch (error) {
        console.error(`‚ùå Error procesando secci√≥n ${section.section}:`, error);
        scriptResults.push({
          section: section.section,
          success: false,
          error: error.message
        });
      }
    }
    
    const successfulGeneration = scriptResults.filter(r => r.success).length;
    
    console.log(`\n‚úÖ REGENERACI√ìN DE GUIONES COMPLETADA:`);
    console.log(`üìù ${successfulGeneration}/${missingSectionScripts.length} guiones faltantes regenerados`);
    console.log(`‚è≠Ô∏è ${projectState.completedSections.length - missingSectionScripts.length} guiones ya exist√≠an`);
    
    res.json({
      success: true,
      message: `${successfulGeneration}/${missingSectionScripts.length} guiones faltantes regenerados exitosamente`,
      data: {
        scriptResults: scriptResults,
        generatedCount: successfulGeneration,
        totalSections: projectState.completedSections.length,
        skippedSections: projectState.completedSections.length - missingSectionScripts.length,
        missingScripts: missingSectionScripts.map(s => s.section)
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error en regeneraci√≥n de guiones:', error);
    res.status(500).json({ error: 'Error regenerando guiones: ' + error.message });
  }
});

// ENDPOINT PARA CONTINUAR CON FASE 3: GENERACI√ìN DE IM√ÅGENES POR LOTES
app.post('/generate-batch-images', async (req, res) => {
  try {
    const { projectData, skipImages, googleImages, localAIImages, geminiGeneratedImages, imageModel, comfyUISettings, folderName } = req.body;
    
    console.log('\n' + 'üé®'.repeat(20));
    console.log('üé® FASE 3: GENERANDO TODAS LAS IM√ÅGENES');
    console.log('üé®'.repeat(20));
    
    const { sections, imagePrompts, projectKey, additionalInstructions, topic } = projectData;
    let shouldSkipImages = skipImages === true;
    let shouldUseGoogleImages = googleImages === true;
    let shouldUseLocalAI = localAIImages === true;
    let shouldUseGeminiImages = geminiGeneratedImages === true;
    
    console.log(`üìù Instrucciones adicionales recibidas: "${additionalInstructions || 'Ninguna'}"`);
    
    // Crear estructura de carpetas base para este proyecto
    const baseTopic = topic || sections[0].title.split(':')[0] || 'Proyecto';
    
    if (shouldSkipImages) {
      console.log('‚è≠Ô∏è Saltando generaci√≥n de im√°genes...');
      return res.json({
        success: true,
        phase: 'images_skipped',
        message: 'Fase 3: Generaci√≥n de im√°genes omitida',
        data: { projectKey: projectKey }
      });
    }

    const imageMethod = shouldUseLocalAI ? 'ComfyUI (IA Local)' : shouldUseGoogleImages ? 'Google Images' : 'IA en la nube';
    console.log(`üñºÔ∏è Generando im√°genes para ${sections.length} secciones con ${imageMethod}...`);

    const allImageResults = [];

    // Procesar cada secci√≥n
    for (let sectionIndex = 0; sectionIndex < sections.length; sectionIndex++) {
      const section = sections[sectionIndex];
      const sectionImagePrompts = imagePrompts[sectionIndex]?.prompts || [];

      if (sectionImagePrompts.length === 0) {
        console.log(`‚ö†Ô∏è No hay prompts de im√°genes para secci√≥n ${section.section}`);
        continue;
      }

      console.log(`üé® Generando ${sectionImagePrompts.length} im√°genes para secci√≥n ${section.section}: ${section.title}`);

      // Crear estructura de carpetas individual para esta secci√≥n usando el folderName ya normalizado
      const sectionFolderStructure = createProjectStructure(baseTopic, section.section, folderName);      try {
        let sectionImages = [];
        
        if (shouldUseLocalAI) {
          // Determinar si esta es la √∫ltima secci√≥n para cerrar ComfyUI
          const isLastSection = sectionIndex === sections.length - 1;
          
          // Generar con ComfyUI - los prompts ya tienen las instrucciones integradas desde Fase 1
          sectionImages = await generateLocalAIImages(
            sectionImagePrompts,
            '', // Los prompts ya vienen con instrucciones integradas desde Fase 1
            sectionFolderStructure.sectionDir,
            section.section,
            comfyUISettings,
            !isLastSection // keepAlive = true para todas excepto la √∫ltima
          );
          
        } else if (shouldUseGoogleImages) {
          // Buscar im√°genes de Google
          console.log(`üîç Buscando im√°genes de Google para secci√≥n ${section.section}...`);
          
          // CORREGIDO: Pasar todos los keywords de una vez para generar nombres √∫nicos
          const googleImages = await searchAndDownloadBingImages(sectionImagePrompts, sectionFolderStructure.sectionDir);
          
          if (googleImages && googleImages.length > 0) {
            googleImages.forEach((image, index) => {
              sectionImages.push({
                path: image.path,
                prompt: image.keywords,
                filename: image.filename,
                source: 'Google Images',
                index: index + 1
              });
            });
            
            // ‚úÖ NUEVO: Crear images_metadata.json para cargar keywords posteriormente (batch)
            try {
              const metadataPath = path.join(sectionFolderStructure.sectionDir, 'images_metadata.json');
              const metadata = {};
              
              googleImages.forEach((img, index) => {
                metadata[img.filename] = {
                  originalUrl: img.url,
                  keywords: img.keywords || '',
                  timestamp: new Date().toISOString(),
                  source: 'bing',
                  section: section.section
                };
              });
              
              fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2));
              console.log(`üìù Metadata de im√°genes guardada en: ${metadataPath} (batch section ${section.section})`);
            } catch (metadataError) {
              console.warn(`‚ö†Ô∏è Error guardando images_metadata.json (batch): ${metadataError.message}`);
            }
          }
          
        } else {
          // Generar con IA en la nube
          console.log(`ü§ñ Generando con IA en la nube (modelo: ${imageModel})...`);
          
          for (let promptIndex = 0; promptIndex < sectionImagePrompts.length; promptIndex++) {
            const prompt = sectionImagePrompts[promptIndex];
            
            try {
              const enhancedPrompt = `${prompt.trim()}.`;
              const imageResponse = await generateImageWithModel(ai, enhancedPrompt, imageModel);
              
              if (imageResponse.generatedImages && imageResponse.generatedImages.length > 0) {
                const generatedImage = imageResponse.generatedImages[0];
                const imageData = generatedImage.image.imageBytes;
                
                // Guardar imagen
                const timestamp = Date.now();
                const imageFileName = `seccion_${section.section}_imagen_${promptIndex + 1}_${timestamp}.png`;
                const imageFilePath = path.join(sectionFolderStructure.sectionDir, imageFileName);
                
                const imageBuffer = Buffer.from(imageData, 'base64');
                fs.writeFileSync(imageFilePath, imageBuffer);
                
                // Retornar ruta relativa para acceso web
                const relativePath = path.relative('./public', imageFilePath).replace(/\\/g, '/');
                
                sectionImages.push({
                  path: relativePath,
                  prompt: prompt,
                  filename: imageFileName,
                  source: `IA en la nube (${imageModel === 'gemini2' ? 'Gemini 2.0' : 'Imagen 4.0'})`,
                  index: promptIndex + 1
                });
                
                console.log(`‚úÖ Imagen ${promptIndex + 1} generada con IA en la nube`);
                
              } else {
                throw new Error('No se gener√≥ imagen');
              }
              
            } catch (imageError) {
              console.error(`‚ùå Error generando imagen ${promptIndex + 1} con IA:`, imageError);
              sectionImages.push({
                path: null,
                prompt: prompt,
                filename: null,
                source: 'IA en la nube Error',
                index: promptIndex + 1,
                error: imageError.message
              });
            }
          }
        }
        
        // Guardar los prompts de esta secci√≥n en archivo TXT
        try {
          const promptsFileName = `${createSafeFolderName(baseTopic)}_seccion_${section.section}_prompts_imagenes.txt`;
          const promptsFilePath = path.join(sectionFolderStructure.sectionDir, promptsFileName);
          
          const promptsContent = `PROMPTS DE IM√ÅGENES - SECCI√ìN ${section.section}
===============================
Tema: ${baseTopic}
Secci√≥n: ${section.section} de ${sections.length}
T√≠tulo: ${section.title}
Cantidad de prompts: ${sectionImagePrompts.length}
Fecha de generaci√≥n: ${new Date().toLocaleString()}
${folderName ? `Nombre del proyecto: ${folderName}` : ''}
M√©todo de generaci√≥n: ${imageMethod}

PROMPTS GENERADOS:
${sectionImagePrompts.map((prompt, index) => `
${index + 1}. ${prompt.trim()}
`).join('')}

===============================
ESTAD√çSTICAS DE GENERACI√ìN:
- Prompts totales: ${sectionImagePrompts.length}
- Im√°genes exitosas: ${sectionImages.filter(img => img.path).length}
- Im√°genes fallidas: ${sectionImages.filter(img => !img.path).length}

===============================
Generado autom√°ticamente por el sistema de creaci√≥n de contenido (Modo Batch)
`;
          
          fs.writeFileSync(promptsFilePath, promptsContent, 'utf8');
          console.log(`üìù Prompts de secci√≥n ${section.section} guardados en: ${promptsFilePath}`);
          
        } catch (saveError) {
          console.error(`‚ùå Error guardando prompts de secci√≥n ${section.section}:`, saveError);
          // No detener el proceso por este error, solo registrarlo
        }
        
        allImageResults.push({
          section: section.section,
          title: section.title,
          images: sectionImages,
          success: sectionImages.filter(img => img.path).length > 0
        });
        
        const successfulImages = sectionImages.filter(img => img.path).length;
        console.log(`‚úÖ Secci√≥n ${section.section}: ${successfulImages}/${sectionImagePrompts.length} im√°genes generadas`);

        // üìä GUARDADO PROGRESIVO: Actualizar progreso despu√©s de cada secci√≥n de im√°genes
        try {
          const progressData = updateProjectProgress(projectKey, 'images', sectionIndex + 1, sections.length);
          
          // Guardar estado del proyecto con im√°genes completadas hasta ahora
          const updatedProjectData = {
            ...projectData,
            imageResults: allImageResults,
            imageMethod: imageMethod,
            imageConfig: shouldUseLocalAI ? { 
              method: 'localAI', 
              settings: comfyUISettings 
            } : shouldUseGoogleImages ? { 
              method: 'google' 
            } : { 
              method: 'cloud', 
              model: imageModel 
            },
            phase: 'images',
            lastUpdate: new Date().toISOString()
          };
          
          await saveProgressiveProjectState(projectKey, updatedProjectData, progressData);
          
          console.log(`üìä Progreso guardado: Secci√≥n ${sectionIndex + 1}/${sections.length} im√°genes (${progressData.percentage}%) - Tiempo estimado restante: ${progressData.estimatedTimeRemaining}`);
          
        } catch (progressError) {
          console.error('‚ö†Ô∏è Error guardando progreso de im√°genes:', progressError.message);
          // No interrumpir la generaci√≥n por errores de guardado
        }
        
      } catch (error) {
        console.error(`‚ùå Error generando im√°genes para secci√≥n ${section.section}:`, error);
        allImageResults.push({
          section: section.section,
          title: section.title,
          images: [],
          success: false,
          error: error.message
        });

        // üìä GUARDADO PROGRESIVO: Actualizar progreso incluso en caso de error
        try {
          const progressData = updateProjectProgress(projectKey, 'images', sectionIndex + 1, sections.length);
          
          const updatedProjectData = {
            ...projectData,
            imageResults: allImageResults,
            imageMethod: imageMethod,
            imageConfig: shouldUseLocalAI ? { 
              method: 'localAI', 
              settings: comfyUISettings 
            } : shouldUseGoogleImages ? { 
              method: 'google' 
            } : { 
              method: 'cloud', 
              model: imageModel 
            },
            phase: 'images',
            lastUpdate: new Date().toISOString()
          };
          
          await saveProgressiveProjectState(projectKey, updatedProjectData, progressData);
          
          console.log(`üìä Progreso guardado (con error): Secci√≥n ${sectionIndex + 1}/${sections.length} im√°genes (${progressData.percentage}%)`);
          
        } catch (progressError) {
          console.error('‚ö†Ô∏è Error guardando progreso de im√°genes:', progressError.message);
        }
      }
    }
    
    const totalSuccessfulImages = allImageResults.reduce((total, section) => {
      return total + (section.images?.filter(img => img.path).length || 0);
    }, 0);
    
    const totalExpectedImages = imagePrompts.reduce((total, section) => {
      return total + (section.prompts?.length || 0);
    }, 0);
    
    console.log(`\n‚úÖ FASE 3 COMPLETADA:`);
    console.log(`üñºÔ∏è ${totalSuccessfulImages}/${totalExpectedImages} im√°genes generadas con ${imageMethod}`);
    
    // Asegurar que ComfyUI se cierre al final de la fase 3 (solo si se us√≥)
    if (shouldUseLocalAI) {
      console.log('üõë Cerrando ComfyUI al finalizar Fase 3...');
      await stopComfyUI();
      console.log('‚úÖ ComfyUI cerrado, GPU liberada');
    }
    
    // Generar archivo project_state.json para persistencia del proyecto
    try {
      await generateProjectStateFile(projectData, {
        topic,
        voice: selectedVoice,
        totalSections,
        imageCount,
        promptModifier,
        imageModel,
        llmModel,
        scriptStyle,
        customStyleInstructions,
        applioVoice,
        applioModel,
        applioPitch
      });
      console.log('üìÑ Archivo project_state.json generado exitosamente');
    } catch (stateError) {
      console.error('‚ùå Error generando project_state.json:', stateError.message);
    }
    
    res.json({
      success: true,
      phase: 'images_completed',
      message: `Fase 3 completada: ${totalSuccessfulImages}/${totalExpectedImages} im√°genes generadas con ${imageMethod}`,
      data: {
        imageResults: allImageResults,
        projectKey: projectKey,
        imageMethod: imageMethod,
        totalImages: totalSuccessfulImages
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error en generaci√≥n de im√°genes por lotes:', error);
    
    // Asegurar que ComfyUI se cierre en caso de error
    try {
      console.log('üõë Cerrando ComfyUI debido a error en batch...');
      await stopComfyUI();
      console.log('‚úÖ ComfyUI cerrado despu√©s del error');
    } catch (closeError) {
      console.error('‚ùå Error cerrando ComfyUI:', closeError);
    }
    
    res.status(500).json({ error: 'Error en generaci√≥n de im√°genes: ' + error.message });
  }
});

// ENDPOINT PARA OBTENER PROGRESO EN TIEMPO REAL
app.get('/progress/:projectKey', (req, res) => {
  try {
    const { projectKey } = req.params;
    
    if (!projectProgressTracker[projectKey]) {
      return res.json({ 
        success: false, 
        error: 'Proyecto no encontrado' 
      });
    }
    
    const progressData = projectProgressTracker[projectKey];
    
    res.json({
      success: true,
      progress: progressData
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo progreso:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error obteniendo progreso: ' + error.message 
    });
  }
});

app.post('/generate', async (req, res) => {
  try {
    const { topic, folderName, voice, totalSections, currentSection, previousSections, minWords, maxWords, imageCount, promptModifier, imageModel, llmModel, skipImages, googleImages, localAIImages, comfyUISettings, scriptStyle, customStyleInstructions, applioVoice, applioModel, applioPitch } = req.body;
    
    const selectedVoice = voice || 'Orus';
    const sections = totalSections || 3;
    const section = currentSection || 1;
    const wordsMin = minWords || 800;
    const wordsMax = maxWords || 1100;
    const selectedStyle = scriptStyle || 'professional'; // Default al estilo profesional
    const numImages = imageCount || 5; // Default a 5 im√°genes si no se especifica
    const additionalInstructions = promptModifier || ''; // Instrucciones adicionales para im√°genes
    const selectedImageModel = imageModel || 'gemini2';
    const selectedLlmModel = llmModel || 'gemini-2.5-flash';
    let shouldSkipImages = skipImages === true;
    let shouldUseGoogleImages = googleImages === true;
    let shouldUseLocalAI = localAIImages === true;
    
    console.log(`üéØ Solicitud recibida: ${shouldUseLocalAI ? 'IA LOCAL' : shouldUseGoogleImages ? 'ENLACES GOOGLE' : shouldSkipImages ? 'SIN IM√ÅGENES' : numImages + ' im√°genes'} para la secci√≥n ${section}`);
    
    if (!topic) {
      return res.status(400).json({ error: 'Tema requerido' });
    }

    // Crear clave √∫nica para la conversaci√≥n (proyecto)
    // Usar el mismo folderName que se usa para la estructura de carpetas
    const actualFolderName = folderName && folderName.trim() 
      ? createSafeFolderName(folderName.trim())
      : createSafeFolderName(topic);
    const projectKey = actualFolderName;
    const conversation = getOrCreateConversation(projectKey);

    // Crear estructura de carpetas usando el actualFolderName ya normalizado
    const folderStructure = createProjectStructure(topic, section, actualFolderName);
    console.log(`üìÅ Estructura de carpetas creada: ${folderStructure.sectionDir}`);
    
    console.log(`üí¨ Usando conversaci√≥n: ${projectKey} (folderName: "${actualFolderName}")`);
    console.log(`üìù Historial actual: ${conversation.history.length} mensajes`);

    // Paso 1: Generar gui√≥n usando conversaci√≥n continua
    console.log(`üìù Generando gui√≥n de YouTube - Secci√≥n ${section}/${sections} para el tema: ${topic}...`);
    console.log(`üé≠ Usando estilo: ${selectedStyle === 'comedy' ? 'C√≥mico/Sarc√°stico' : 'Profesional'}`);
    
    let promptContent;
    let chapterStructure = null;
    
    if (section === 1) {
      // Primera secci√≥n: Generar estructura completa de cap√≠tulos primero
      conversation.topic = topic;
      conversation.totalSections = sections;
      conversation.currentSection = 1;
      conversation.history = []; // Limpiar historial para nueva conversaci√≥n

      console.log(`üìã PASO 1: Generando estructura de ${sections} cap√≠tulos para el tema: ${topic}...`);
      
      // Generar estructura de cap√≠tulos
      let chapterPrompt;
      
      // Detectar si se est√° usando un estilo personalizado
      if (selectedStyle && selectedStyle.startsWith('custom_') && customStyleInstructions) {
        // Prompt especializado para estilos personalizados
        chapterPrompt = `Eres un experto en crear estructuras narrativas personalizadas.

TEMA SOLICITADO: "${topic}"
TOTAL DE CAP√çTULOS: ${sections}
ESTILO PERSONALIZADO: ${customStyleInstructions}

Tu tarea es crear una ESTRUCTURA NARRATIVA que respete completamente el estilo personalizado definido.

INSTRUCCIONES ESPEC√çFICAS PARA ESTE ESTILO:
- Analiza cuidadosamente las instrucciones del estilo personalizado
- Crea t√≠tulos que reflejen EXACTAMENTE lo que pide el estilo
- Si el estilo menciona "situaciones cotidianas", crea cap√≠tulos sobre actividades diarias del personaje
- Si el estilo habla de "progresi√≥n del d√≠a", organiza los cap√≠tulos cronol√≥gicamente  
- Si pide "t√©cnicas de hipnotizaci√≥n", enf√≥cate en momentos relajantes del personaje
- IGNORA formatos educativos gen√©ricos, sigue SOLO el estilo personalizado

PARA "${topic}" CON ESTE ESTILO ESPEC√çFICO:
Genera t√≠tulos que narren momentos, actividades y situaciones del personaje, no informaci√≥n educativa sobre la serie.

FORMATO DE RESPUESTA OBLIGATORIO:
Debes responder √öNICAMENTE con los t√≠tulos separados por "||CAPITULO||"

VERIFICACI√ìN: Tu respuesta debe tener exactamente ${sections - 1} delimitadores "||CAPITULO||" para generar ${sections} t√≠tulos.

RESPONDE SOLO CON LOS T√çTULOS SEPARADOS POR "||CAPITULO||", NADA M√ÅS.`;
      } else {
        // Prompt est√°ndar para estilos no personalizados  
        chapterPrompt = `Eres un experto en narrativa para YouTube especializado en contenido educativo y entretenimiento.

TEMA SOLICITADO: "${topic}"
TOTAL DE CAP√çTULOS: ${sections}

Tu tarea es crear una ESTRUCTURA NARRATIVA completa dividiendo el tema en ${sections} cap√≠tulos/secciones coherentes y bien organizadas.

INSTRUCCIONES:
- Crea EXACTAMENTE ${sections} t√≠tulos de cap√≠tulos
- Cada cap√≠tulo debe tener un t√≠tulo descriptivo y atractivo
- Los cap√≠tulos deben seguir un hilo narrativo l√≥gico
- Progresi√≥n natural del tema de inicio a conclusi√≥n
- T√≠tulos que generen curiosidad y mantengan el inter√©s

FORMATO DE RESPUESTA OBLIGATORIO:
Debes responder √öNICAMENTE con los t√≠tulos separados por "||CAPITULO||"

EJEMPLO PARA 3 CAP√çTULOS:
Cap√≠tulo 1: El Origen de la Leyenda||CAPITULO||Cap√≠tulo 2: Los Secretos Revelados||CAPITULO||Cap√≠tulo 3: El Legado Eterno

VERIFICACI√ìN: Tu respuesta debe tener exactamente ${sections - 1} delimitadores "||CAPITULO||" para generar ${sections} t√≠tulos.

RESPONDE SOLO CON LOS T√çTULOS SEPARADOS POR "||CAPITULO||", NADA M√ÅS.`;
      }

      console.log(`üîÑ Enviando prompt de cap√≠tulos al modelo ${selectedLlmModel}...`);
      
      try {
        const chapterResponse = await generateUniversalContent(
          selectedLlmModel,
          chapterPrompt,
          "Eres un experto en estructura narrativa. Tu √öNICA tarea es crear t√≠tulos de cap√≠tulos separados por '||CAPITULO||'. NUNCA generes texto adicional fuera de los t√≠tulos."
        );

        console.log(`‚úÖ Respuesta de cap√≠tulos recibida exitosamente`);

        const chaptersText = chapterResponse || '';
        console.log(`üìù Respuesta de estructura: ${chaptersText ? chaptersText.substring(0, 200) + '...' : 'RESPUESTA VAC√çA'}`);
        
        const chapterTitles = chaptersText.split('||CAPITULO||').filter(title => title.trim()).slice(0, sections);
        console.log(`üìö Cap√≠tulos generados: ${chapterTitles.length} de ${sections} solicitados`);
        console.log(`üìñ T√≠tulos: ${chapterTitles.join(', ')}`);
        
        // üìã MOSTRAR ESTRUCTURA COMPLETA DE CAP√çTULOS
        console.log('\n' + '='.repeat(60));
        console.log('üìñ ESTRUCTURA COMPLETA DE CAP√çTULOS GENERADA');
        console.log('='.repeat(60));
        console.log(`üéØ Tema: "${topic}"`);
        console.log(`üìä Total de cap√≠tulos: ${sections}`);
        console.log(`üß† Modelo LLM usado: ${selectedLlmModel}`);
        console.log('‚îÄ'.repeat(60));
        
        if (chapterTitles.length > 0) {
          chapterTitles.forEach((title, index) => {
            const chapterNumber = index + 1;
            const cleanTitle = title.trim();
            console.log(`üìö Cap√≠tulo ${chapterNumber}: ${cleanTitle}`);
          });
        } else {
          console.log('‚ö†Ô∏è No se generaron t√≠tulos de cap√≠tulos');
        }
        
        console.log('='.repeat(60) + '\n');
        
        // Guardar estructura en la conversaci√≥n
        conversation.chapterStructure = chapterTitles;
        chapterStructure = chapterTitles;
        
      } catch (chapterError) {
        console.error('‚ùå ERROR generando estructura de cap√≠tulos:', chapterError);
        console.log('‚ö†Ô∏è Continuando sin estructura de cap√≠tulos...');
        chapterStructure = [];
        conversation.chapterStructure = [];
      }

      console.log(`üìù PASO 2: Generando contenido del Cap√≠tulo 1: ${chapterStructure[0] || 'Sin t√≠tulo'}...`);
      
      // Ahora generar el contenido de la primera secci√≥n con contexto de estructura
      promptContent = generateScriptPrompt(selectedStyle, topic, sections, section, customStyleInstructions, chapterStructure, null, wordsMin, wordsMax);

      // Limpiar historial y agregar mensaje inicial
      conversation.history = [
        { role: 'user', parts: [{ text: promptContent }] }
      ];
      
    } else {
      // Secciones posteriores: Usar estructura existente
      chapterStructure = conversation.chapterStructure || [];
      console.log(`üìñ Usando estructura existente: ${chapterStructure.length} cap√≠tulos`);
      console.log(`üìù Generando Cap√≠tulo ${section}: ${chapterStructure[section - 1] || 'Sin t√≠tulo'}...`);
      
      // ÔøΩ EXTRAER CONTEXTO DE CAP√çTULOS ANTERIORES
      console.log(`üîó Extrayendo contexto de ${section - 1} cap√≠tulos anteriores...`);
      const previousChapterContent = [];
      
      // Obtener el contenido de las respuestas anteriores del asistente
      conversation.history.forEach((message, index) => {
        if (message.role === 'model' && message.parts && message.parts[0] && message.parts[0].text) {
          const content = message.parts[0].text.trim();
          if (content.length > 50) { // Solo incluir respuestas con contenido sustancial
            previousChapterContent.push(content);
          }
        }
      });
      
      console.log(`üìö Cap√≠tulos anteriores encontrados: ${previousChapterContent.length}`);
      if (previousChapterContent.length > 0) {
        console.log(`üìñ √öltimo cap√≠tulo preview: ${previousChapterContent[previousChapterContent.length - 1].substring(0, 100)}...`);
      }
      
      // üìã MOSTRAR PROGRESO DE CAP√çTULOS
      console.log('\n' + '‚îÄ'.repeat(50));
      console.log(`üìö CAP√çTULO ${section} DE ${sections}`);
      console.log('‚îÄ'.repeat(50));
      console.log(`üéØ Tema: "${topic}"`);
      console.log(`üìñ Cap√≠tulo actual: ${chapterStructure[section - 1] || 'Sin t√≠tulo'}`);
      console.log(`üß† Modelo LLM: ${selectedLlmModel}`);
      
      // Mostrar contexto de todos los cap√≠tulos
      console.log('\nüìã Estructura completa:');
      chapterStructure.forEach((title, index) => {
        const chapterNumber = index + 1;
        const isCurrentChapter = chapterNumber === section;
        const statusIcon = chapterNumber < section ? '‚úÖ' : isCurrentChapter ? 'üîÑ' : '‚è≥';
        const cleanTitle = title.trim();
        console.log(`${statusIcon} Cap√≠tulo ${chapterNumber}: ${cleanTitle}`);
      });
      console.log('‚îÄ'.repeat(50) + '\n');
      
      promptContent = generateScriptPrompt(selectedStyle, topic, sections, section, customStyleInstructions, chapterStructure, previousChapterContent, wordsMin, wordsMax);

      // Agregar nueva pregunta al historial
      conversation.history.push({ role: 'user', parts: [{ text: promptContent }] });
    }
    
    // Actualizar secci√≥n actual
    conversation.currentSection = section;

    // Generar respuesta usando el historial de conversaci√≥n
    let systemInstruction;
    if (selectedStyle === 'comedy') {
      systemInstruction = `Eres un escritor de guiones c√≥micos para YouTube con tono sarc√°stico y humor negro. IMPORTANTE: Responde √öNICAMENTE con el texto del gui√≥n, sin explicaciones, comentarios, etiquetas o texto adicional. El texto debe estar listo para TTS. Incluye groser√≠as, humor absurdo y m√∫ltiples voces entre corchetes. ESTRUCTURA OBLIGATORIA: Exactamente 3 p√°rrafos detallados, entre ${wordsMin} y ${wordsMax} palabras total. Solo el gui√≥n puro.`;
    } else if (selectedStyle && selectedStyle.startsWith('custom_') && customStyleInstructions) {
      systemInstruction = `Eres un escritor de guiones para YouTube especializado en el estilo personalizado que el usuario ha definido. IMPORTANTE: Responde √öNICAMENTE con el texto del gui√≥n siguiendo exactamente estas instrucciones de estilo: ${customStyleInstructions}. Sin explicaciones, comentarios, etiquetas o texto adicional. El texto debe estar listo para TTS aplicando fielmente el estilo especificado. ESTRUCTURA OBLIGATORIA: Exactamente 3 p√°rrafos detallados, entre ${wordsMin} y ${wordsMax} palabras total. Solo el gui√≥n puro.`;
    } else {
      systemInstruction = `Eres un escritor profesional de guiones para YouTube. IMPORTANTE: Responde √öNICAMENTE con el texto del gui√≥n, sin explicaciones, comentarios, etiquetas o texto adicional. El texto debe estar listo para TTS. No incluyas pensamientos, notas o aclaraciones. ESTRUCTURA OBLIGATORIA: Exactamente 3 p√°rrafos detallados, entre ${wordsMin} y ${wordsMax} palabras total. Solo el gui√≥n puro.`;
    }

    const scriptResponse = await generateUniversalContent(
      selectedLlmModel,
      conversation.history,
      systemInstruction
    );

    console.log(`üîç scriptResponse:`, typeof scriptResponse, scriptResponse);
    const script = scriptResponse || '';
    console.log(`üîç script extra√≠do:`, typeof script);
    console.log(`üîç script preview:`, script && typeof script === 'string' && script.length > 0 ? script.substring(0, 100) + '...' : 'VAC√çO O INV√ÅLIDO');
    
    // Validar que tenemos contenido v√°lido
    if (!script || typeof script !== 'string' || script.trim().length === 0) {
      throw new Error(`No se pudo extraer contenido v√°lido de la respuesta. Response: ${JSON.stringify(scriptResponse)}`);
    }
    
    // Limpiar el script de cualquier texto adicional no deseado
    const cleanScript = cleanScriptText(script);
    
    // Calcular tokens de entrada y salida
    const inputTokens = estimateTokens(promptContent + (systemInstruction || ''));
    const outputTokens = estimateTokens(cleanScript);
    const totalTokens = inputTokens + outputTokens;
    
    console.log(`üìä TOKENS - Entrada: ${inputTokens}, Salida: ${outputTokens}, Total: ${totalTokens}`);
    
    // Agregar respuesta al historial
    conversation.history.push({ role: 'model', parts: [{ text: cleanScript }] });
    
    // Optimizar historial manteniendo continuidad narrativa
    optimizeConversationHistory(conversation);
    
    // OPTIMIZACI√ìN: Mantener solo los √∫ltimos 4 mensajes (2 intercambios: pregunta+respuesta anteriores)
    // Esto ahorra tokens manteniendo solo el contexto del cap√≠tulo anterior
    const historialAntes = conversation.history.length;
    if (conversation.history.length > 10) { // Activar optimizaci√≥n m√°s tarde
      conversation.history = conversation.history.slice(-8); // Mantener m√°s contexto para continuidad
      console.log(`ÔøΩ OPTIMIZACI√ìN - Historial reducido de ${historialAntes} a ${conversation.history.length} mensajes`);
      console.log(`üí∞ AHORRO DE TOKENS - Eliminados ${historialAntes - conversation.history.length} mensajes antiguos`);
    }
    
    console.log(`‚úÖ Gui√≥n de la secci√≥n ${section} generado usando conversaci√≥n continua`);
    console.log(`üíæ Historial actualizado: ${conversation.history.length} mensajes`);
    
    // Mostrar informaci√≥n de ahorro de tokens
    if (historialAntes > 4) {
      const tokensActuales = conversation.history.reduce((total, msg) => {
        return total + estimateTokens(msg.parts[0].text);
      }, 0);
      console.log(`üìä M√âTRICAS - Tokens actuales en historial: ~${tokensActuales} (optimizado vs ~${tokensActuales * (historialAntes / 4)} sin optimizaci√≥n)`);
    }

    // Guardar el gui√≥n como archivo de texto en la carpeta de la secci√≥n
    try {
      const scriptFileName = `${actualFolderName}_seccion_${section}_guion.txt`;
      const scriptFilePath = path.join(folderStructure.sectionDir, scriptFileName);
      
      const scriptContent = `GUI√ìN DE LA SECCI√ìN ${section}
===============================
Tema: ${topic}
Secci√≥n: ${section} de ${sections}
Fecha de generaci√≥n: ${new Date().toLocaleString()}
${folderName ? `Nombre del proyecto: ${folderName}` : ''}

CONTENIDO DEL GUI√ìN:
${cleanScript}

===============================
Generado autom√°ticamente por el sistema de creaci√≥n de contenido
`;
      
      fs.writeFileSync(scriptFilePath, scriptContent, 'utf8');
      console.log(`üìù Gui√≥n guardado autom√°ticamente en: ${scriptFilePath}`);
    } catch (saveError) {
      console.error('‚ùå Error guardando archivo de gui√≥n:', saveError);
      // No detener el proceso por este error, solo registrarlo
    }

    // Verificar si se deben omitir las im√°genes, usar Google Images o usar IA Local
    if (shouldSkipImages || shouldUseGoogleImages || shouldUseLocalAI) {
      let modeDescription = 'Modo desconocido';
      if (shouldUseLocalAI) {
        modeDescription = 'Generando im√°genes con IA Local (ComfyUI + Flux)';
      } else if (shouldUseGoogleImages) {
        modeDescription = 'Descargando im√°genes espec√≠ficas de Bing';
      } else {
        modeDescription = 'Omitiendo generaci√≥n de im√°genes, pero generando prompts para mostrar';
      }
      
      console.log(`üé® ${modeDescription}`);
      console.log(`üîç DEBUG SKIP - shouldSkipImages: ${shouldSkipImages}`);
      console.log(`üîç DEBUG BING - shouldUseGoogleImages: ${shouldUseGoogleImages}`);
      console.log(`üîç DEBUG AI LOCAL - shouldUseLocalAI: ${shouldUseLocalAI}`);
      console.log(`üîç DEBUG - numImages: ${numImages}`);
      
      let enhancedPrompts = [];
      let downloadedImages = [];
      let localAIImages = []; // Declarar para im√°genes de IA Local
      let imageKeywords = []; // Declarar aqu√≠ para uso posterior
      
      if (shouldUseGoogleImages) {
        console.log(`üîç Generando palabras clave espec√≠ficas y descargando ${numImages} im√°genes de Bing...`);
        
        try {
          // Generar palabras clave espec√≠ficas usando el LLM
          console.log(`üß† Analizando gui√≥n para generar palabras clave espec√≠ficas...`);
          imageKeywords = await generateImageKeywords(cleanScript, topic, numImages);
          
          console.log(`üéØ Palabras clave generadas para ${numImages} im√°genes:`, imageKeywords);
          
          // Descargar im√°genes usando las palabras clave espec√≠ficas
          downloadedImages = await searchAndDownloadBingImages(imageKeywords, folderStructure.sectionDir);
          
          if (downloadedImages.length > 0) {
            console.log(`‚úÖ ${downloadedImages.length} im√°genes descargadas de Bing exitosamente con keywords espec√≠ficas`);
            
            // Guardar keywords en archivo para cargarlas posteriormente
            try {
              const keywordsToSave = downloadedImages.map(img => img.keywords || '').filter(k => k.trim());
              if (keywordsToSave.length > 0) {
                const keywordsFilePath = path.join(folderStructure.sectionDir, `${actualFolderName}_seccion_${section}_keywords.txt`);
                fs.writeFileSync(keywordsFilePath, keywordsToSave.join('\n'), 'utf8');
                console.log(`üíæ Keywords guardadas en: ${keywordsFilePath}`);
              }
            } catch (keywordSaveError) {
              console.warn(`‚ö†Ô∏è Error guardando keywords: ${keywordSaveError.message}`);
            }
            
            // ‚úÖ NUEVO: Crear images_metadata.json para cargar keywords posteriormente
            try {
              const metadataPath = path.join(folderStructure.sectionDir, 'images_metadata.json');
              const metadata = {};
              
              downloadedImages.forEach((img, index) => {
                metadata[img.filename] = {
                  originalUrl: img.url,
                  keywords: img.keywords || '',
                  timestamp: new Date().toISOString(),
                  source: 'bing',
                  section: section
                };
              });
              
              fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2));
              console.log(`üìù Metadata de im√°genes guardada en: ${metadataPath}`);
              console.log(`üìä Metadata guardado:`, metadata);
            } catch (metadataError) {
              console.warn(`‚ö†Ô∏è Error guardando images_metadata.json: ${metadataError.message}`);
            }
            
            // Crear "prompts" mostrando las palabras clave espec√≠ficas que se usaron
            enhancedPrompts = downloadedImages.map((img, index) => 
              `Imagen ${index + 1}: ${img.keywords || img.caption || img.filename}`
            );
            
            console.log(`üìã Prompts generados con keywords:`, enhancedPrompts);
          } else {
            console.log(`‚ö†Ô∏è No se pudieron descargar im√°genes de Bing, generando prompts como fallback`);
            // Fallback: mostrar las keywords que se intentaron usar
            enhancedPrompts = imageKeywords.map((keyword, index) => 
              `Keywords intentadas ${index + 1}: ${keyword}`
            );
          }
        } catch (error) {
          console.error(`‚ùå Error descargando im√°genes de Bing:`, error.message);
          enhancedPrompts = [`Error generando keywords o descargando im√°genes: ${error.message}`];
        }
      } else if (shouldUseLocalAI) {
        console.log(`ü§ñ Generando ${numImages} im√°genes con IA Local (ComfyUI + Flux)...`);
        
        try {
          // Paso 1: Obtener prompts anteriores para mantener consistencia
          console.log(`üß† Recuperando contexto de prompts anteriores...`);
          const { previousPrompts, contextInfo } = getPreviousImagePrompts(projectKey, section);
          
          // Paso 2: Construir contexto de consistencia
          const consistencyContext = buildConsistencyContext(previousPrompts, contextInfo);
          
          // Paso 3: Construir prompt base para el LLM
          let basePrompt = `Bas√°ndote en este gui√≥n de la secci√≥n ${section} sobre "${topic}": "${cleanScript}", crea EXACTAMENTE ${numImages} prompts detallados para generar ${numImages} im√°genes que ilustren visualmente el contenido ESPEC√çFICO de esta secci√≥n.

            IMPORTANTE: Debes crear EXACTAMENTE ${numImages} prompts, ni m√°s ni menos.

            ENFOQUE ESPEC√çFICO PARA ESTA SECCI√ìN:
            - Estas im√°genes deben representar SOLO el contenido de la secci√≥n ${section}, no de todo el proyecto
            - Cada imagen debe mostrar diferentes aspectos, momentos o elementos clave mencionados en esta secci√≥n espec√≠fica
            - NO dividas la secci√≥n en partes cronol√≥gicas - en su lugar, crea ${numImages} perspectivas diferentes del mismo contenido de la secci√≥n
            - Enf√≥cate en elementos espec√≠ficos, personajes, lugares, objetos, emociones o conceptos mencionados en esta secci√≥n
            - Mant√©n consistencia visual con las secciones anteriores${consistencyContext}

            TIPOS DE PROMPTS PARA ESTA SECCI√ìN:
            - Imagen principal: La escena o momento central de la secci√≥n
            - Detalles importantes: Objetos, elementos o caracter√≠sticas espec√≠ficas mencionadas
            - Perspectivas diferentes: Diferentes √°ngulos o enfoques del mismo contenido
            - Atm√≥sfera: Im√°genes que capturen el mood o ambiente de la secci√≥n
            - Elementos secundarios: Aspectos adicionales que complementen la narrativa de esta secci√≥n

            INSTRUCCIONES CR√çTICAS PARA EL FORMATO:
            - DEBES crear ${numImages} prompts independientes que representen la MISMA secci√≥n desde diferentes perspectivas
            - NO dividas el contenido en secuencia cronol√≥gica - todas las im√°genes son de la MISMA secci√≥n`;
          
          // Paso 4: Integrar instrucciones adicionales en el prompt del LLM
          const finalPromptForLLM = integrateAdditionalInstructions(basePrompt, additionalInstructions);
          
          console.log(`üß† Creando prompts para secuencia de ${numImages} im√°genes con contexto de consistencia...`);
          if (previousPrompts.length > 0) {
            console.log(`üîó Usando ${previousPrompts.length} prompts anteriores para mantener consistencia`);
          }
          if (additionalInstructions && additionalInstructions.trim()) {
            console.log(`üìù Integrando instrucciones adicionales en el LLM: "${additionalInstructions.trim()}"`);
          }
          
          const promptsResponse = await generateUniversalContent(
            selectedLlmModel,
            finalPromptForLLM + `
            - DEBES separar cada prompt con "||PROMPT||" (sin espacios adicionales)
            - DEBES asegurarte de que haya exactamente ${numImages} prompts en tu respuesta
            - Las im√°genes deben contar la historia del gui√≥n de forma visual secuencial
            - Incluye detalles espec√≠ficos mencionados en el texto del gui√≥n

            REQUISITOS OBLIGATORIOS para cada prompt:
            - Formato: Aspecto 16:9 (widescreen)
            - Estilo: Realista, alta calidad, 4K
            
            FORMATO DE RESPUESTA OBLIGATORIO:
            DEBES presentar EXACTAMENTE ${numImages} prompts separados por "||PROMPT||" (sin espacios antes o despu√©s del delimitador).
            
            ESTRUCTURA REQUERIDA:
            Prompt 1 aqu√≠||PROMPT||Prompt 2 aqu√≠||PROMPT||Prompt 3 aqu√≠||PROMPT||... hasta el Prompt ${numImages}
            
            VERIFICACI√ìN FINAL: Tu respuesta debe contener exactamente ${numImages - 1} ocurrencias del delimitador "||PROMPT||" para generar ${numImages} prompts.`,
            `Eres un experto en arte conceptual y narrativa visual. Tu √öNICA tarea es crear prompts separados por "||PROMPT||". 

REGLAS CR√çTICAS:
1. SIEMPRE usa el delimitador exacto "||PROMPT||" (sin espacios adicionales)
2. NUNCA generes texto adicional fuera de los prompts
3. CUENTA cuidadosamente para generar el n√∫mero exacto solicitado
4. DIVIDE el contenido equitativamente entre todos los prompts
5. Cada prompt debe ser independiente y descriptivo

Si te piden N prompts, tu respuesta debe tener exactamente (N-1) delimitadores "||PROMPT||".`
          );

          const promptsText = promptsResponse || '';
          console.log(`üìù Respuesta del modelo para IA Local: ${promptsText ? promptsText.substring(0, 200) + '...' : 'RESPUESTA VAC√çA'}`);
          
          const imagePrompts = promptsText.split('||PROMPT||').filter(p => p.trim()).slice(0, numImages);
          console.log(`üé® ${imagePrompts.length} prompts secuenciales generados para IA Local`);

          // Paso 2: Generar las im√°genes usando ComfyUI + Flux
          console.log(`üñºÔ∏è Generando secuencia de ${numImages} im√°genes con ComfyUI + Flux...`);
          
          // Registrar configuraci√≥n recibida
          if (comfyUISettings) {
            console.log(`‚öôÔ∏è Configuraci√≥n ComfyUI recibida del frontend:`, comfyUISettings);
            console.log(`üîß Pasos configurados en frontend: ${comfyUISettings.steps}`);
            console.log(`üéØ Guidance configurado en frontend: ${comfyUISettings.guidance}`);
            console.log(`üìê Resoluci√≥n configurada: ${comfyUISettings.width}x${comfyUISettings.height}`);
          } else {
            console.log(`‚ö†Ô∏è No se recibi√≥ configuraci√≥n ComfyUI, usando valores por defecto`);
          }
          
          localAIImages = await generateLocalAIImages(imagePrompts, additionalInstructions, folderStructure.sectionDir, section, comfyUISettings);
          
          if (localAIImages.length > 0) {
            console.log(`‚úÖ ${localAIImages.length} im√°genes generadas con IA Local exitosamente`);
            
            // Usar los prompts originales como descripci√≥n de las im√°genes generadas
            enhancedPrompts = localAIImages.map((img, index) => 
              `IA Local ${index + 1}: ${img.prompt || imagePrompts[index] || 'Imagen generada'}`
            );
            
            console.log(`üìã Prompts de IA Local generados:`, enhancedPrompts);
          } else {
            console.log(`‚ö†Ô∏è No se pudieron generar im√°genes con IA Local, usando prompts como fallback`);
            enhancedPrompts = imagePrompts.map((prompt, index) => 
              `IA Local prompt ${index + 1}: ${prompt}`
            );
          }
        } catch (error) {
          console.error(`‚ùå Error generando im√°genes con IA Local:`, error.message);
          enhancedPrompts = [`Error generando im√°genes con IA Local: ${error.message}`];
        }
      } else {
        console.log(`üé® Generando prompts para secuencia de ${numImages} im√°genes (solo texto)...`);
        
        // Paso 1: Obtener prompts anteriores para mantener consistencia
        console.log(`üß† Recuperando contexto de prompts anteriores...`);
        const { previousPrompts, contextInfo } = getPreviousImagePrompts(projectKey, section);
        
        // Paso 2: Construir contexto de consistencia
        const consistencyContext = buildConsistencyContext(previousPrompts, contextInfo);
        
        // Paso 3: Construir prompt base para el LLM
        let basePrompt = `Bas√°ndote en este gui√≥n de la secci√≥n ${section} sobre "${topic}": "${cleanScript}", crea EXACTAMENTE ${numImages} prompts detallados para generar ${numImages} im√°genes que ilustren visualmente el contenido ESPEC√çFICO de esta secci√≥n.

          IMPORTANTE: Debes crear EXACTAMENTE ${numImages} prompts, ni m√°s ni menos.

          ENFOQUE ESPEC√çFICO PARA ESTA SECCI√ìN:
          - Estas im√°genes deben representar SOLO el contenido de la secci√≥n ${section}, no de todo el proyecto
          - Cada imagen debe mostrar diferentes aspectos, momentos o elementos clave mencionados en esta secci√≥n espec√≠fica
          - NO dividas la secci√≥n en partes cronol√≥gicas - en su lugar, crea ${numImages} perspectivas diferentes del mismo contenido de la secci√≥n
          - Enf√≥cate en elementos espec√≠ficos, personajes, lugares, objetos, emociones o conceptos mencionados en esta secci√≥n
          - Mant√©n consistencia visual con las secciones anteriores${consistencyContext}

          TIPOS DE PROMPTS PARA ESTA SECCI√ìN:
          - Imagen principal: La escena o momento central de la secci√≥n
          - Detalles importantes: Objetos, elementos o caracter√≠sticas espec√≠ficas mencionadas
          - Perspectivas diferentes: Diferentes √°ngulos o enfoques del mismo contenido
          - Atm√≥sfera: Im√°genes que capturen el mood o ambiente de la secci√≥n
          - Elementos secundarios: Aspectos adicionales que complementen la narrativa de esta secci√≥n

          INSTRUCCIONES CR√çTICAS PARA EL FORMATO:
          - DEBES crear ${numImages} prompts independientes que representen la MISMA secci√≥n desde diferentes perspectivas
          - NO dividas el contenido en secuencia cronol√≥gica - todas las im√°genes son de la MISMA secci√≥n
          - DEBES separar cada prompt con "||PROMPT||" (sin espacios adicionales)
          - DEBES asegurarte de que haya exactamente ${numImages} prompts en tu respuesta
          - Todas las im√°genes deben estar relacionadas con el contenido espec√≠fico de la secci√≥n ${section}
          - Incluye detalles espec√≠ficos mencionados en el texto del gui√≥n

          REQUISITOS OBLIGATORIOS para cada prompt:
          - Formato: Aspecto 16:9 (widescreen)
          
          FORMATO DE RESPUESTA OBLIGATORIO:
          DEBES presentar EXACTAMENTE ${numImages} prompts separados por "||PROMPT||" (sin espacios antes o despu√©s del delimitador).
          
          ESTRUCTURA REQUERIDA:
          Prompt 1 aqu√≠||PROMPT||Prompt 2 aqu√≠||PROMPT||Prompt 3 aqu√≠||PROMPT||... hasta el Prompt ${numImages}
          
          EJEMPLO PARA 3 PROMPTS (adaptar a ${numImages}):
          Un bosque oscuro con √°rboles ancianos||PROMPT||Una batalla √©pica entre guerreros||PROMPT||Un castillo en ruinas bajo la luna
          
          VERIFICACI√ìN FINAL: Tu respuesta debe contener exactamente ${numImages - 1} ocurrencias del delimitador "||PROMPT||" para generar ${numImages} prompts.`;
        
        // Paso 4: Integrar instrucciones adicionales en el prompt del LLM
        const finalPromptForLLM = integrateAdditionalInstructions(basePrompt, additionalInstructions);
        
        console.log(`üß† Creando prompts para secuencia de ${numImages} im√°genes con contexto de consistencia...`);
        if (previousPrompts.length > 0) {
          console.log(`üîó Usando ${previousPrompts.length} prompts anteriores para mantener consistencia`);
        }
        if (additionalInstructions && additionalInstructions.trim()) {
          console.log(`üìù Integrando instrucciones adicionales en el LLM: "${additionalInstructions.trim()}"`);
        }
        
        const promptsResponse = await generateUniversalContent(
          selectedLlmModel,
          finalPromptForLLM,
          `Eres un experto en arte conceptual y narrativa visual. Tu √öNICA tarea es crear prompts separados por "||PROMPT||". 

REGLAS CR√çTICAS:
1. SIEMPRE usa el delimitador exacto "||PROMPT||" (sin espacios adicionales)
2. NUNCA generes texto adicional fuera de los prompts
3. CUENTA cuidadosamente para generar el n√∫mero exacto solicitado
4. DIVIDE el contenido equitativamente entre todos los prompts
5. Cada prompt debe ser independiente y descriptivo

Si te piden N prompts, tu respuesta debe tener exactamente (N-1) delimitadores "||PROMPT||".`
        );

        const promptsText = promptsResponse || '';
        console.log(`üìù DEBUG SKIP - Respuesta del modelo: ${promptsText ? promptsText.substring(0, 200) + '...' : 'RESPUESTA VAC√çA'}`);
        console.log(`üîç DEBUG SKIP - Buscando delimitadores "||PROMPT||" en la respuesta...`);
        
        const imagePrompts = promptsText.split('||PROMPT||').filter(p => p.trim()).slice(0, numImages);
        console.log(`üîç DEBUG SKIP - Delimitadores encontrados: ${promptsText.split('||PROMPT||').length - 1}`);
        console.log(`üîç DEBUG SKIP - Prompts despu√©s del filtro: ${imagePrompts.length}`);
        console.log(`üî¢ DEBUG SKIP - Se solicitaron ${numImages} prompts, se generaron ${imagePrompts.length} prompts v√°lidos`);
        console.log(`üé® DEBUG SKIP - Primeros 3 prompts:`, imagePrompts.slice(0, 3));
        
        // Ya no aplicamos instrucciones adicionales aqu√≠ - est√°n integradas en el LLM
        enhancedPrompts = imagePrompts;
        console.log(`‚úÖ Las instrucciones adicionales ya est√°n integradas en los prompts por el LLM`);
      }

      // Guardar los prompts como archivo de texto en la carpeta de la secci√≥n
      try {
        const promptsFileName = `${folderStructure.safeTopicName}_seccion_${section}_prompts_imagenes.txt`;
        const promptsFilePath = path.join(folderStructure.sectionDir, promptsFileName);
        
        const promptsContent = `PROMPTS DE IM√ÅGENES - SECCI√ìN ${section}
===============================
Tema: ${topic}
Secci√≥n: ${section} de ${sections}
Cantidad de prompts: ${enhancedPrompts.length}
Fecha de generaci√≥n: ${new Date().toLocaleString()}
${folderName ? `Nombre del proyecto: ${folderName}` : ''}
${additionalInstructions ? `Instrucciones adicionales integradas en LLM: ${additionalInstructions}` : 'Sin instrucciones adicionales'}

PROMPTS GENERADOS:
${enhancedPrompts.map((prompt, index) => `
${index + 1}. ${prompt.trim()}
`).join('')}

===============================
NOTA: Estos prompts fueron generados para ilustrar visualmente 
el contenido del gui√≥n pero no se generaron im√°genes porque 
la opci√≥n "Omitir generaci√≥n de im√°genes" estaba activada.

Puedes usar estos prompts en cualquier generador de im√°genes 
como Midjourney, DALL-E, Stable Diffusion, etc.
===============================
Generado autom√°ticamente por el sistema de creaci√≥n de contenido
`;
        
        fs.writeFileSync(promptsFilePath, promptsContent, 'utf8');
        console.log(`üìù Prompts de im√°genes guardados autom√°ticamente en: ${promptsFilePath}`);
        
        // Crear informaci√≥n sobre el archivo de prompts guardado
        const promptsFileRelativePath = path.relative('./public', promptsFilePath).replace(/\\/g, '/');
        
        console.log(`‚úÖ Archivo de prompts creado: ${promptsFileRelativePath}`);
      } catch (saveError) {
        console.error('‚ùå Error guardando archivo de prompts:', saveError);
        // No detener el proceso por este error, solo registrarlo
      }
      
      // Crear informaci√≥n sobre el archivo de gui√≥n guardado
      const scriptFileName = `${folderStructure.safeTopicName}_seccion_${section}_guion.txt`;
      const scriptFilePath = path.relative('./public', path.join(folderStructure.sectionDir, scriptFileName)).replace(/\\/g, '/');

      // Crear informaci√≥n sobre el archivo de prompts guardado
      const promptsFileName = `${folderStructure.safeTopicName}_seccion_${section}_prompts_imagenes.txt`;
      const promptsFilePath = path.relative('./public', path.join(folderStructure.sectionDir, promptsFileName)).replace(/\\/g, '/');

      console.log(`üîç DEBUG SKIP - Enviando respuesta con imagePrompts:`, !!enhancedPrompts);
      console.log(`üîç DEBUG SKIP - imagePrompts.length:`, enhancedPrompts.length);
      console.log(`üîç DEBUG SKIP - imagesSkipped:`, shouldSkipImages && !shouldUseGoogleImages);
      console.log(`üîç DEBUG BING - bingImagesMode:`, shouldUseGoogleImages);
      console.log(`üîç DEBUG BING - downloadedImages.length:`, downloadedImages.length);

      // Construir respuesta seg√∫n el modo
      const response = { 
        script: cleanScript,
        scriptFile: {
          path: scriptFilePath,
          filename: scriptFileName,
          saved: true
        },
        promptsFile: {
          path: promptsFilePath,
          filename: promptsFileName,
          saved: true
        },
        voice: selectedVoice,
        currentSection: section,
        totalSections: sections,
        topic: topic,
        isComplete: section >= sections,
        projectFolder: folderStructure.safeTopicName,
        sectionFolder: `seccion_${section}`,
        folderPath: path.relative('./public', folderStructure.sectionDir).replace(/\\/g, '/'),
        chapterStructure: chapterStructure,
        tokenUsage: {
          inputTokens: inputTokens,
          outputTokens: outputTokens,
          totalTokens: totalTokens,
          model: selectedLlmModel
        }
      };

      // Agregar datos espec√≠ficos seg√∫n el modo
      if (shouldUseLocalAI) {
        // Modo IA Local: incluir im√°genes generadas
        const localImages = localAIImages ? localAIImages.filter(img => img.path) : []; // Solo im√°genes exitosas
        
        response.localAIImages = localImages.map(img => ({
          url: `/${img.path}`,
          caption: `IA Local: ${img.filename ? img.filename.replace(/\.[^/.]+$/, '') : 'Imagen generada'}`,
          filename: img.filename,
          path: img.path,
          prompt: img.prompt
        }));
        response.localAIMode = true;
        response.imagesGenerated = localImages.length;
        response.mode = 'local_ai';
        response.imagePrompts = enhancedPrompts;
        console.log(`ü§ñ Respuesta configurada para modo IA Local con ${localImages.length} im√°genes generadas`);
        
      } else if (shouldUseGoogleImages && downloadedImages.length > 0) {
        // Modo Bing Images: filtrar solo im√°genes exitosas que realmente existen
        const existingImages = downloadedImages.filter(img => {
          // Si la imagen fue marcada como fallida, no incluirla
          if (img.failed) {
            console.log(`‚ö†Ô∏è Imagen marcada como fallida, excluyendo: ${img.filename} (${img.keywords})`);
            return false;
          }
          
          const imagePath = path.join('./public', 'outputs', folderStructure.safeTopicName, `seccion_${section}`, img.filename);
          const exists = fs.existsSync(imagePath);
          if (!exists) {
            console.log(`‚ö†Ô∏è Archivo no encontrado, excluyendo de respuesta: ${img.filename}`);
          }
          return exists;
        });
        
        // Crear arrays de keywords solo para im√°genes exitosas para mantener correspondencia
        const successfulKeywords = existingImages.map(img => img.keywords);
        
        response.downloadedImages = existingImages.map(img => ({
          url: `/outputs/${folderStructure.safeTopicName}/seccion_${section}/${img.filename}`,
          caption: `Imagen de Bing: ${img.filename.replace(/\.[^/.]+$/, '')}`,
          filename: img.filename,
          path: img.path
        }));
        response.bingImagesMode = true;
        response.imagesDownloaded = existingImages.length;
        response.mode = 'bing_images';
        console.log(`‚úÖ Respuesta configurada para modo Bing con ${existingImages.length} im√°genes (${downloadedImages.length} descargadas, ${existingImages.length} existentes)`);
        
        // Usar keywords directamente de las im√°genes exitosas (ya filtradas)
        response.imageKeywords = successfulKeywords;
        console.log(`üéØ Keywords incluidas en respuesta (solo existentes):`, successfulKeywords);
        console.log(`üñºÔ∏è URLs de im√°genes:`, response.downloadedImages.map(img => img.url));
      } else if (shouldUseGoogleImages) {
        // Fallback si no se descargaron im√°genes de Bing
        response.imagePrompts = enhancedPrompts;
        response.bingImagesMode = true;
        response.bingImagesFailed = true;
        response.mode = 'bing_fallback';
        // Incluir las keywords para el bot√≥n de refresh
        if (imageKeywords && imageKeywords.length > 0) {
          response.imageKeywords = imageKeywords;
          console.log(`üéØ Keywords incluidas en respuesta fallback:`, imageKeywords);
        }
        console.log(`‚ö†Ô∏è Modo Bing fall√≥, usando prompts como fallback`);
      } else {
        // Modo skip images normal
        response.imagePrompts = enhancedPrompts;
        response.imagesSkipped = shouldSkipImages;
        response.mode = 'skip_images';
        console.log(`üìù Modo skip images con ${enhancedPrompts.length} prompts`);
      }

      res.json(response);

      console.log(`üö® RESPUESTA FINAL ENVIADA AL FRONTEND:`);
      console.log(`üö® response.downloadedImages:`, response.downloadedImages);
      console.log(`üö® response.bingImagesMode:`, response.bingImagesMode);
      console.log(`üö® response.mode:`, response.mode);
      console.log(`üö® Respuesta completa:`, JSON.stringify(response, null, 2));

      // Guardar estado del proyecto autom√°ticamente
      try {
        const projectData = {
          topic: topic,
          folderName: folderName,
          totalSections: sections,
          currentSection: section,
          voice: selectedVoice,
          imageModel: selectedImageModel,
          llmModel: selectedLlmModel,
          scriptStyle: scriptStyle,
          customStyleInstructions: customStyleInstructions,
          promptModifier: promptModifier,
          imageCount: imageCount,
          skipImages: shouldSkipImages,
          googleImages: shouldUseGoogleImages,
          applioVoice: applioVoice,
          applioModel: applioModel || 'fr-FR-RemyMultilingualNeural',
          applioPitch: applioPitch || 0,
          chapterStructure: chapterStructure
        };
        
        const savedState = saveProjectState(projectData);
        
        if (savedState) {
          // Actualizar secci√≥n completada
          const sectionData = {
            script: cleanScript,
            images: [], // Sin im√°genes en este modo
            imagesSkipped: shouldSkipImages && !shouldUseGoogleImages,
            googleImagesMode: shouldUseGoogleImages,
            imagePrompts: enhancedPrompts,
            scriptFile: {
              path: scriptFilePath,
              filename: scriptFileName,
              saved: true
            },
            promptsFile: {
              path: promptsFilePath,
              filename: promptsFileName,
              saved: true
            }
          };
          
          updateCompletedSection(projectData, section, sectionData);
          console.log(`üíæ Estado del proyecto guardado autom√°ticamente`);
        }
      } catch (saveError) {
        console.error('‚ö†Ô∏è Error guardando estado del proyecto:', saveError);
        // No detener el proceso por este error
      }
      return;
    }

    // Paso 2: Crear prompts para im√°genes secuenciales basadas en el gui√≥n
    console.log(`üé® Generando prompts para secuencia de ${numImages} im√°genes...`);
    
    // Obtener prompts anteriores para mantener consistencia
    console.log(`üß† Recuperando contexto de prompts anteriores...`);
    const { previousPrompts, contextInfo } = getPreviousImagePrompts(projectKey, section);
    
    // Construir contexto de consistencia
    const consistencyContext = buildConsistencyContext(previousPrompts, contextInfo);
    
    // Construir prompt base para el LLM
    let basePrompt = `Bas√°ndote en este gui√≥n de la secci√≥n ${section} sobre "${topic}" ": "${cleanScript}", crea EXACTAMENTE ${numImages} prompts detallados para generar ${numImages} im√°genes que ilustren visualmente el contenido ESPEC√çFICO de esta secci√≥n.

      IMPORTANTE: Debes crear EXACTAMENTE ${numImages} prompts, ni m√°s ni menos.

      ENFOQUE ESPEC√çFICO PARA ESTA SECCI√ìN:
      - Estas im√°genes deben representar SOLO el contenido de la secci√≥n ${section}, no de todo el proyecto
      - Cada imagen debe mostrar diferentes aspectos, momentos o elementos clave mencionados en esta secci√≥n espec√≠fica
      - NO dividas la secci√≥n en partes cronol√≥gicas - en su lugar, crea ${numImages} perspectivas diferentes del mismo contenido de la secci√≥n
      - Enf√≥cate en elementos espec√≠ficos, personajes, lugares, objetos, emociones o conceptos mencionados en esta secci√≥n
      - Mant√©n consistencia visual con las secciones anteriores${consistencyContext}

      TIPOS DE PROMPTS PARA ESTA SECCI√ìN:
      - Imagen principal: La escena o momento central de la secci√≥n
      - Detalles importantes: Objetos, elementos o caracter√≠sticas espec√≠ficas mencionadas
      - Perspectivas diferentes: Diferentes √°ngulos o enfoques del mismo contenido
      - Atm√≥sfera: Im√°genes que capturen el mood o ambiente de la secci√≥n
      - Elementos secundarios: Aspectos adicionales que complementen la narrativa de esta secci√≥n

      INSTRUCCIONES CR√çTICAS PARA EL FORMATO:
      - DEBES crear ${numImages} prompts independientes que representen la MISMA secci√≥n desde diferentes perspectivas
      - NO dividas el contenido en secuencia cronol√≥gica - todas las im√°genes son de la MISMA secci√≥n
      - DEBES separar cada prompt con "||PROMPT||" (sin espacios adicionales)
      - DEBES asegurarte de que haya exactamente ${numImages} prompts en tu respuesta
      - Todas las im√°genes deben estar relacionadas con el contenido espec√≠fico de la secci√≥n ${section}
      - Incluye detalles espec√≠ficos mencionados en el texto del gui√≥n de esta secci√≥n

      REQUISITOS OBLIGATORIOS para cada prompt:
      - Formato: Aspecto 16:9 (widescreen)
      
      FORMATO DE RESPUESTA OBLIGATORIO:
      DEBES presentar EXACTAMENTE ${numImages} prompts separados por "||PROMPT||" (sin espacios antes o despu√©s del delimitador).
      
      ESTRUCTURA REQUERIDA:
      Prompt 1 aqu√≠||PROMPT||Prompt 2 aqu√≠||PROMPT||Prompt 3 aqu√≠||PROMPT||... hasta el Prompt ${numImages}
      
      EJEMPLO PARA 3 PROMPTS (adaptar a ${numImages}):
      Un bosque oscuro con √°rboles ancianos||PROMPT||Una batalla √©pica entre guerreros||PROMPT||Un castillo en ruinas bajo la luna
      
      VERIFICACI√ìN FINAL: Tu respuesta debe contener exactamente ${numImages - 1} ocurrencias del delimitador "||PROMPT||" para generar ${numImages} prompts.`;
    
    // Integrar instrucciones adicionales en el prompt del LLM
    const finalPromptForLLM = integrateAdditionalInstructions(basePrompt, additionalInstructions);
    
    console.log(`üß† Creando prompts para secuencia de ${numImages} im√°genes con contexto de consistencia...`);
    if (previousPrompts.length > 0) {
      console.log(`üîó Usando ${previousPrompts.length} prompts anteriores para mantener consistencia`);
    }
    if (additionalInstructions && additionalInstructions.trim()) {
      console.log(`üìù Integrando instrucciones adicionales en el LLM: "${additionalInstructions.trim()}"`);
    }
    
    const promptsResponse = await ai.models.generateContent({
      model: `models/${selectedLlmModel}`,
      contents: finalPromptForLLM,
      config: {
        systemInstruction: `Eres un experto en arte conceptual y narrativa visual. Tu √öNICA tarea es crear prompts separados por "||PROMPT||". 

REGLAS CR√çTICAS:
1. SIEMPRE usa el delimitador exacto "||PROMPT||" (sin espacios adicionales)
2. NUNCA generes texto adicional fuera de los prompts
3. CUENTA cuidadosamente para generar el n√∫mero exacto solicitado
4. DIVIDE el contenido equitativamente entre todos los prompts
5. Cada prompt debe ser independiente y descriptivo

Si te piden N prompts, tu respuesta debe tener exactamente (N-1) delimitadores "||PROMPT||".`,
      },
    });

    const promptsText = promptsResponse.text || '';
    console.log(`üìù Respuesta del modelo: ${promptsText ? promptsText.substring(0, 200) + '...' : 'RESPUESTA VAC√çA'}`);
    console.log(`üîç Buscando delimitadores "||PROMPT||" en la respuesta...`);
    
    const imagePrompts = promptsText.split('||PROMPT||').filter(p => p.trim()).slice(0, numImages);
    console.log(`üîç Delimitadores encontrados: ${promptsText.split('||PROMPT||').length - 1}`);
    console.log(`üîç Prompts despu√©s del filtro: ${imagePrompts.length}`);
    console.log(`üî¢ Se solicitaron ${numImages} im√°genes, se encontraron ${imagePrompts.length} prompts v√°lidos`);
    
    console.log(`üé® ${imagePrompts.length} prompts secuenciales generados para la secci√≥n ${section}`);

    // Paso 3: Generar las im√°genes secuenciales y guardarlas
    console.log(`üñºÔ∏è Generando secuencia de ${numImages} im√°genes...`);
    const imagePromises = imagePrompts.map(async (prompt, index) => {
      try {
        console.log(`üñºÔ∏è Generando imagen ${index + 1}/${numImages}...`);
        console.log(`üìã Prompt para imagen ${index + 1}: ${prompt.trim().substring(0, 100)}...`);
        
        // Usar el prompt directamente ya que las instrucciones adicionales est√°n integradas en el LLM
        const enhancedPrompt = prompt.trim();
        console.log(`‚úÖ Las instrucciones adicionales ya est√°n integradas en el prompt por el LLM`);
        
        console.log(`üìù Prompt completo para imagen ${index + 1}: ${enhancedPrompt}`);
        console.log(`ü§ñ Usando modelo: ${selectedImageModel === 'gemini2' ? 'Gemini 2.0 Flash (nativo)' : 'Imagen 4.0'}`);

        const imageResponse = await generateImageWithModel(ai, enhancedPrompt, selectedImageModel);

        if (imageResponse.generatedImages && imageResponse.generatedImages.length > 0) {
          const results = [];
          
          // Procesar las im√°genes generadas
          for (let varIndex = 0; varIndex < imageResponse.generatedImages.length; varIndex++) {
            const generatedImage = imageResponse.generatedImages[varIndex];
            const imageData = generatedImage.image.imageBytes;
            
            // Guardar imagen con nombre √∫nico
            const imageFileName = `${folderStructure.safeTopicName}_seccion_${section}_imagen_${index + 1}_${Date.now()}.png`;
            const imageFilePath = path.join(folderStructure.sectionDir, imageFileName);
            const imageBuffer = Buffer.from(imageData, 'base64');
            
            fs.writeFileSync(imageFilePath, imageBuffer);
            console.log(`üíæ Imagen ${index + 1} guardada en: ${imageFilePath}`);
            console.log(`ü§ñ Generada con: ${selectedImageModel === 'gemini2' ? 'Gemini 2.0 Flash' : 'Imagen 4.0'}`);
            
            // Retornar ruta relativa para acceso web
            const relativePath = path.relative('./public', imageFilePath).replace(/\\/g, '/');
            
            results.push({ 
              index: index,
              originalPromptIndex: index,
              variationIndex: varIndex,
              image: imageData,
              imagePath: relativePath,
              prompt: enhancedPrompt,
              model: selectedImageModel === 'gemini2' ? 'Gemini 2.0 Flash' : 'Imagen 4.0'
            });
          }
          
          return results;
        }
        return null;
      } catch (error) {
        console.error(`‚ùå Error generando imagen ${index + 1}:`, error);
        return null;
      }
    });

    const imageResults = await Promise.all(imagePromises);
    // Aplanar el array ya que cada prompt ahora devuelve un array de 3 im√°genes
    const allImages = imageResults.filter(result => result !== null).flat();

    if (allImages.length === 0) {
      return res.status(500).json({ error: 'No se pudo generar ninguna imagen' });
    }

    console.log(`‚úÖ ${allImages.length} im√°genes generadas (${imagePrompts.length} prompts √ó 3 variaciones cada uno) para la secci√≥n ${section}`);

    // Crear informaci√≥n sobre el archivo de gui√≥n guardado
    const scriptFileName = `${folderStructure.safeTopicName}_seccion_${section}_guion.txt`;
    const scriptFilePath = path.relative('./public', path.join(folderStructure.sectionDir, scriptFileName)).replace(/\\/g, '/');

    res.json({ 
      images: allImages,
      script: cleanScript,
      scriptFile: {
        path: scriptFilePath,
        filename: scriptFileName,
        saved: true
      },
      imagePrompts: imagePrompts,
      voice: selectedVoice,
      sequenceType: 'chronological',
      currentSection: section,
      totalSections: sections,
      topic: topic,
      isComplete: section >= sections,
      projectFolder: folderStructure.safeTopicName,
      sectionFolder: `seccion_${section}`,
      folderPath: path.relative('./public', folderStructure.sectionDir).replace(/\\/g, '/'),
      chapterStructure: chapterStructure
    });

    // Guardar estado del proyecto autom√°ticamente
    try {
      const projectData = {
        topic: topic,
        folderName: folderName,
        totalSections: sections,
        currentSection: section,
        voice: selectedVoice,
        imageModel: selectedImageModel,
        llmModel: selectedLlmModel,
        scriptStyle: scriptStyle,
        customStyleInstructions: customStyleInstructions,
        promptModifier: promptModifier,
        imageCount: imageCount,
        skipImages: shouldSkipImages,
        googleImages: shouldUseGoogleImages,
        chapterStructure: chapterStructure
      };
      
      const savedState = saveProjectState(projectData);
      
      if (savedState) {
        // Actualizar secci√≥n completada
        const sectionData = {
          script: cleanScript,
          images: allImages,
          imagesSkipped: false,
          googleImagesMode: false,
          imagePrompts: imagePrompts,
          scriptFile: {
            path: scriptFilePath,
            filename: scriptFileName,
            saved: true
          }
        };
        
        updateCompletedSection(projectData, section, sectionData);
        console.log(`üíæ Estado del proyecto guardado autom√°ticamente`);
      }
    } catch (saveError) {
      console.error('‚ö†Ô∏è Error guardando estado del proyecto:', saveError);
      // No detener el proceso por este error
    }
  } catch (error) {
    console.error('‚ùå Error:', error);
    res.status(500).json({ error: 'Error generando contenido' });
  }
});

// RUTA COMENTADA - Ahora usamos el cliente Applio directo en Node.js
/*
// Nueva ruta simple para generar audio TTS (compatible con applio_tts)
app.post('/applio_tts', async (req, res) => {
  try {
    const { text, sectionDir } = req.body;
    
    if (!text || !text.trim()) {
      return res.status(400).json({ error: 'Texto requerido para generar audio' });
    }

    console.log(`üéµ Intentando TTS para texto: ${text.substring(0, 100)}...`);
    
    // Intentar primero con servidor Applio externo si est√° disponible
    const APPLIO_URL = process.env.APPLIO_SERVER_URL || "http://localhost:5004";
    
    try {
      console.log(`üîó Intentando conexi√≥n con servidor Applio en ${APPLIO_URL}...`);
      const applioResponse = await fetch(`${APPLIO_URL}/applio_tts`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
        timeout: 5000 // 5 segundos timeout
      });
      
      if (applioResponse.ok) {
        console.log(`‚úÖ Servidor Applio respondi√≥ exitosamente`);
        // Reenviar la respuesta del servidor Applio
        const audioBuffer = await applioResponse.buffer();
        res.setHeader('Content-Type', 'audio/wav');
        res.setHeader('Content-Length', audioBuffer.length);
        return res.send(audioBuffer);
      }
    } catch (applioError) {
      console.log(`‚ö†Ô∏è Servidor Applio no disponible: ${applioError.message}`);
      console.log(`üîÑ Intentando con Gemini TTS como fallback...`);
    }
    
    // Fallback a Gemini TTS
    const response = await ai.models.generateContent({
      model: "gemini-2.5-pro-preview-tts",
      contents: [{ 
        parts: [{ 
          text: `Narra el siguiente texto de manera natural y clara: ${text}`
        }] 
      }],
      config: {
        responseModalities: ['AUDIO'],
        speechConfig: {
          voiceConfig: {
            prebuiltVoiceConfig: { 
              voiceName: 'Orus' 
            }
          }
        }
      }
    });

    const audioData = response.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;
    
    if (!audioData) {
      throw new Error('No se pudo generar el audio con Gemini TTS');
    }

    const audioBuffer = Buffer.from(audioData, 'base64');
    
    // Configurar headers para audio streaming
    res.setHeader('Content-Type', 'audio/wav');
    res.setHeader('Content-Length', audioBuffer.length);
    
    // Enviar el audio directamente como stream
    res.send(audioBuffer);
    
  } catch (error) {
    console.error('‚ùå Error en TTS:', error);
    
    // Mensaje m√°s espec√≠fico basado en el tipo de error
    let errorMessage = 'Error generando audio TTS';
    if (error.status === 429) {
      errorMessage = 'Cuota de TTS excedida. Intenta nuevamente en unos minutos o configura servidor Applio.';
    }
    
    res.status(500).json({ error: errorMessage });
  }
});
*/

// Nueva ruta para generar solo el audio del gui√≥n
app.post('/generate-audio', async (req, res) => {
  try {
    const { script, voice, topic, folderName, currentSection, narrationStyle } = req.body;
    
    if (!topic || !currentSection) {
      return res.status(400).json({ error: 'Tema y secci√≥n requeridos para organizar archivos' });
    }

    const selectedVoice = voice || 'Orus';
    const section = currentSection || 1;
    const customNarrationStyle = narrationStyle || null;
    
    // Crear nombre normalizado consistente
    const actualFolderName = folderName && folderName.trim() 
      ? createSafeFolderName(folderName.trim())
      : createSafeFolderName(topic);
    
    // Si no se proporciona script, intentar leerlo del archivo guardado
    let scriptContent = script;
    if (!scriptContent) {
      console.log(`üîç Script no proporcionado, intentando leer archivo de secci√≥n ${section}...`);
      
      try {
        const folderStructure = createProjectStructure(topic, section, actualFolderName);
        const scriptFileName = `${actualFolderName}_seccion_${section}_guion.txt`;
        const scriptFilePath = path.join(folderStructure.sectionDir, scriptFileName);
        
        if (fs.existsSync(scriptFilePath)) {
          scriptContent = fs.readFileSync(scriptFilePath, 'utf8');
          console.log(`‚úÖ Script le√≠do desde archivo: ${scriptFilePath}`);
        } else {
          return res.status(400).json({ error: `No se encontr√≥ el gui√≥n para la secci√≥n ${section}. Archivo esperado: ${scriptFilePath}` });
        }
      } catch (readError) {
        console.error('‚ùå Error leyendo archivo de script:', readError);
        return res.status(400).json({ error: 'No se pudo leer el gui√≥n de la secci√≥n. Aseg√∫rate de que el gui√≥n se haya generado primero.' });
      }
    }
    
    if (!scriptContent || scriptContent.trim() === '') {
      return res.status(400).json({ error: 'Gui√≥n vac√≠o o no v√°lido' });
    }
    
    // Crear estructura de carpetas para el audio usando el nombre normalizado
    const folderStructure = createProjectStructure(topic, section, actualFolderName);
    
    console.log(`üéµ Generando audio del gui√≥n con voz ${selectedVoice}...`);
    if (customNarrationStyle) {
      console.log(`üé≠ Estilo de narraci√≥n personalizado recibido: "${customNarrationStyle}"`);
    }
    
    try {
      const audioFilePath = await generateStoryAudio(scriptContent, selectedVoice, folderStructure.sectionDir, topic, section, customNarrationStyle);
      
      res.json({ 
        success: true,
        audio: audioFilePath,
        voice: selectedVoice,
        projectFolder: folderStructure.safeTopicName,
        sectionFolder: `seccion_${section}`
      });
    } catch (audioError) {
      console.error('‚ùå Error espec√≠fico en generaci√≥n de audio:', audioError.message);
      
      // Responder con informaci√≥n m√°s espec√≠fica sobre el error
      res.status(500).json({ 
        error: 'Error generando audio',
        details: audioError.message,
        suggestion: 'El servicio de Text-to-Speech puede estar temporalmente no disponible. Intenta nuevamente en unos momentos.'
      });
    }
  } catch (error) {
    console.error('‚ùå Error general en endpoint de audio:', error);
    res.status(500).json({ error: 'Error procesando solicitud de audio' });
  }
});

// Nueva ruta para regenerar una imagen espec√≠fica
app.post('/regenerate-image', async (req, res) => {
  try {
    const { prompt, imageIndex, topic, folderName, currentSection, imageModel } = req.body;
    
    if (!prompt || typeof imageIndex !== 'number') {
      return res.status(400).json({ error: 'Prompt e √≠ndice de imagen requeridos' });
    }

    if (!topic || !currentSection) {
      return res.status(400).json({ error: 'Tema y secci√≥n requeridos para organizar archivos' });
    }

    const selectedImageModel = 'gemini2'; // TEMPORAL: Forzar Gemini 2.0 para depuraci√≥n
    console.log(`üîÑ Regenerando imagen ${imageIndex + 1} con nuevo prompt...`);
    console.log(`ü§ñ Forzando uso de Gemini 2.0 Flash para depuraci√≥n...`);
    console.log(`üîç Modelo recibido del frontend: ${imageModel}`);
    console.log(`üîç Modelo que se usar√°: ${selectedImageModel}`);
    
    // Crear estructura de carpetas
    const folderStructure = createProjectStructure(topic, currentSection, folderName);
    
    try {
      console.log(`üîç DEBUG REGENERACION - Iniciando proceso de regeneraci√≥n...`);
      console.log(`üîç DEBUG REGENERACION - Prompt recibido: ${prompt.substring(0, 50)}...`);
      
      // Agregar especificaciones de estilo oscuro 2D al prompt
      const enhancedPrompt = `${prompt.trim()}. `;
      console.log(`üîç DEBUG REGENERACION - Enhanced prompt: ${enhancedPrompt.substring(0, 50)}...`);
      console.log(`üîç DEBUG REGENERACION - Llamando a generateImageWithModel con modelo: ${selectedImageModel}`);

      const imageResponse = await generateImageWithModel(ai, enhancedPrompt, selectedImageModel);
      console.log(`üîç DEBUG REGENERACION - Respuesta recibida:`, !!imageResponse);

      if (imageResponse.generatedImages && imageResponse.generatedImages.length > 0) {
        const regeneratedImages = [];
        
        // Procesar las im√°genes generadas
        for (let varIndex = 0; varIndex < imageResponse.generatedImages.length; varIndex++) {
          const generatedImage = imageResponse.generatedImages[varIndex];
          const imageData = generatedImage.image.imageBytes;
          
          // Guardar imagen regenerada con un nombre √∫nico
          const timestamp = Date.now();
          const imageFileName = `${folderStructure.safeTopicName}_seccion_${currentSection}_imagen_${imageIndex + 1}_regenerated_${timestamp}.png`;
          const imageFilePath = path.join(folderStructure.sectionDir, imageFileName);
          const imageBuffer = Buffer.from(imageData, 'base64');
          
          fs.writeFileSync(imageFilePath, imageBuffer);
          console.log(`üíæ Imagen regenerada ${imageIndex + 1} guardada en: ${imageFilePath}`);
          console.log(`ü§ñ Regenerada con: ${selectedImageModel === 'gemini2' ? 'Gemini 2.0 Flash' : 'Imagen 4.0'}`);
          
          // Retornar ruta relativa para acceso web
          const relativePath = path.relative('./public', imageFilePath).replace(/\\/g, '/');
          
          regeneratedImages.push({
            image: imageData,
            imagePath: relativePath,
            variationIndex: varIndex,
            model: selectedImageModel === 'gemini2' ? 'Gemini 2.0 Flash' : 'Imagen 4.0'
          });
        }
        
        res.json({ 
          success: true,
          images: regeneratedImages,
          prompt: enhancedPrompt,
          imageIndex: imageIndex,
          model: selectedImageModel === 'gemini2' ? 'Gemini 2.0 Flash' : 'Imagen 4.0'
        });
        return;
      }
      
      res.status(500).json({ error: 'No se pudo regenerar la imagen' });
      
    } catch (error) {
      console.error('‚ùå Error regenerando imagen:', error.message);
      res.status(500).json({ 
        error: 'Error regenerando imagen',
        details: error.message
      });
    }
  } catch (error) {
    console.error('‚ùå Error general en endpoint de regenerar imagen:', error);
    res.status(500).json({ error: 'Error procesando solicitud de regeneraci√≥n' });
  }
});

// Nuevo endpoint para generar imagen con ComfyUI + Flux
app.post('/generate-comfyui-image', async (req, res) => {
  try {
    const { prompt, options = {} } = req.body;
    
    if (!prompt) {
      return res.status(400).json({ error: 'Prompt es requerido' });
    }

    console.log(`üé® [PRUEBA COMFYUI] Generando imagen: "${prompt.substring(0, 50)}..."`);
    console.log(`üìä [PRUEBA COMFYUI] Opciones recibidas del frontend:`, options);
    
    try {
      // Configurar opciones (usar las del frontend si est√°n disponibles)
      const comfyOptions = {
        width: parseInt(options.width) || 1280,
        height: parseInt(options.height) || 720,
        steps: parseInt(options.steps) || 25,
        cfg: options.cfg || 1,
        guidance: parseFloat(options.guidance) || 3.5,
        sampler: options.sampler || "euler",
        scheduler: options.scheduler || "simple",
        model: options.model || "flux1-dev-fp8.safetensors",
        negativePrompt: options.negativePrompt || "low quality, blurry, distorted",
        timeout: Math.max(180, parseInt(options.steps) * 6) || 180
      };
      
      console.log(`‚öôÔ∏è [PRUEBA COMFYUI] Configuraci√≥n final que se enviar√° a ComfyUI:`, {
        resolution: `${comfyOptions.width}x${comfyOptions.height}`,
        steps: comfyOptions.steps,
        guidance: comfyOptions.guidance,
        sampler: comfyOptions.sampler,
        scheduler: comfyOptions.scheduler,
        timeout: comfyOptions.timeout
      });
      
      console.log(`üöÄ [PRUEBA COMFYUI] Iniciando generaci√≥n con ${comfyOptions.steps} pasos...`);
      
      // Generar imagen con ComfyUI usando reinicio autom√°tico
      const result = await generateImageWithAutoRestart(prompt, comfyOptions);
      
      if (result.success) {
        res.json({
          success: true,
          imageUrl: result.imageUrl,
          filename: result.filename,
          promptId: result.promptId,
          prompt: prompt,
          options: comfyOptions
        });
      } else {
        res.status(500).json({
          error: 'Error generando imagen con ComfyUI',
          details: result.error || 'Error desconocido'
        });
      }
      
    } catch (error) {
      console.error('‚ùå Error en generaci√≥n ComfyUI:', error.message);
      res.status(500).json({
        error: 'Error interno generando imagen',
        details: error.message
      });
    }
  } catch (error) {
    console.error('‚ùå Error general en endpoint ComfyUI:', error);
    res.status(500).json({ error: 'Error procesando solicitud de ComfyUI' });
  }
});

// Endpoint para verificar estado de ComfyUI
app.get('/comfyui-status', async (req, res) => {
  try {
    const connectionCheck = await comfyUIClient.checkConnection();
    
    if (connectionCheck.success) {
      const modelsInfo = await comfyUIClient.getAvailableModels();
      res.json({
        success: true,
        connected: true,
        stats: connectionCheck.data,
        models: modelsInfo.success ? modelsInfo.models : [],
        fluxAvailable: modelsInfo.success ? modelsInfo.models.includes('flux1-dev-fp8.safetensors') : false
      });
    } else {
      res.json({
        success: false,
        connected: false,
        error: connectionCheck.error
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      connected: false,
      error: error.message
    });
  }
});

// Nueva ruta para generar audio de secci√≥n espec√≠fica usando cliente Applio Node.js
app.post('/generate-section-audio', async (req, res) => {
  try {
    const { script, topic, folderName, currentSection, voice, applioVoice, applioModel, applioPitch } = req.body;
    
    if (!script || !topic || !currentSection) {
      return res.status(400).json({ 
        error: 'Script, tema y n√∫mero de secci√≥n son requeridos' 
      });
    }

    const section = parseInt(currentSection);
    const selectedApplioVoice = applioVoice || "logs\\VOCES\\RemyOriginal.pth";
    const selectedApplioModel = applioModel || "fr-FR-RemyMultilingualNeural";
    const selectedPitch = parseInt(applioPitch) || 0;
    
    // Crear nombre normalizado consistente
    const actualFolderName = folderName && folderName.trim() 
      ? createSafeFolderName(folderName.trim())
      : createSafeFolderName(topic);
    
    // Crear estructura de carpetas usando el nombre normalizado
    const folderStructure = createProjectStructure(topic, section, actualFolderName);
    
    console.log(`üéµ Generando audio con Applio para secci√≥n ${section}...`);
    console.log(`üé§ Voz de Applio seleccionada: ${selectedApplioVoice}`);
    console.log(`üéõÔ∏è Modelo TTS seleccionado: ${selectedApplioModel}`);
    console.log(`üéµ Pitch seleccionado: ${selectedPitch}`);
    
    try {
      // 1. Iniciar Applio autom√°ticamente
      console.log('üöÄ [DEBUG] Iniciando Applio para la secci√≥n...');
      console.log('üîç [DEBUG] Estado antes de startApplio:', {
        applioStarted: applioStarted,
        section: section
      });
      
      const applioStartResult = await startApplio();
      if (!applioStartResult) {
        throw new Error('No se pudo iniciar Applio autom√°ticamente');
      }
      
      console.log('üîç [DEBUG] startApplio completado exitosamente');
      
      // 2. Verificar conexi√≥n con Applio (ya deber√≠a estar listo por startApplio)
      const isConnected = await applioClient.checkConnection();
      if (!isConnected) {
        throw new Error('Applio no est√° disponible en el puerto 6969');
      }
      
      console.log('‚úÖ Applio iniciado y listo para generar audio');
      console.log('üîç [DEBUG] Estado despu√©s de verificaci√≥n:', {
        applioStarted: applioStarted,
        connected: isConnected
      });
      
      // Crear nombre del archivo usando el nombre normalizado consistente
      const fileName = `${actualFolderName}_seccion_${section}_applio_${Date.now()}.wav`;
      const filePath = path.join(folderStructure.sectionDir, fileName);
      
      console.log(`üìÅ Guardando audio en: ${filePath}`);
      
      // Generar audio con Applio
      const result = await applioClient.textToSpeech(script, filePath, {
        model: selectedApplioModel,
        speed: 0,
        pitch: selectedPitch,
        voicePath: selectedApplioVoice
      });
      
      if (!result.success) {
        throw new Error('Applio no gener√≥ el audio correctamente');
      }
      
      console.log(`‚úÖ Audio Applio generado exitosamente: ${filePath}`);
      console.log(`üìä Tama√±o del archivo: ${(result.size / 1024).toFixed(1)} KB`);
      
      // Applio permanece abierto para futuras generaciones
      console.log('‚ÑπÔ∏è Applio permanece abierto para futuras generaciones de audio');
      console.log('üîç [DEBUG] Audio generado, estado de Applio:', {
        applioStarted: applioStarted,
        section: section,
        timestamp: new Date().toISOString()
      });
      
      // Retornar la ruta relativa para acceso web
      const relativePath = path.relative('./public', filePath).replace(/\\/g, '/');
      
      res.json({ 
        success: true,
        audioFile: relativePath,
        method: 'Applio Node.js',
        section: section,
        size: result.size,
        message: `Audio generado con Applio para la secci√≥n ${section}`,
        applioStatus: 'permanece_abierto'
      });
      
      console.log('üîç [DEBUG] Respuesta enviada, Applio sigue disponible');
      
    } catch (applioError) {
      console.error('‚ùå Error con cliente Applio:', applioError);
      console.log('üîç [DEBUG] Error en generaci√≥n, estado de Applio:', {
        applioStarted: applioStarted,
        error: applioError.message
      });
      
      // No cerrar Applio en caso de error, solo registrar el error
      console.log('‚ö†Ô∏è Error generando audio, pero Applio permanece abierto para reintentarlo');
      
      if (applioError.message.includes('6969') || applioError.message.includes('Timeout')) {
        res.status(503).json({ 
          error: 'Applio no disponible',
          details: 'Aseg√∫rate de que Applio est√© corriendo en el puerto 6969',
          suggestion: 'Abre la interfaz de Applio y verifica que est√© en el puerto 6969'
        });
      } else {
        res.status(500).json({ 
          error: 'Error generando audio con Applio',
          details: applioError.message
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error);
    res.status(500).json({ error: 'Error procesando solicitud' });
  }
});

// Ruta para subir archivo para transcripci√≥n
app.post('/upload-audio', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No se recibi√≥ ning√∫n archivo' });
    }

    console.log(`üìÅ Archivo subido: ${req.file.filename}`);
    res.json({ 
      success: true, 
      filePath: req.file.path,
      originalName: req.file.originalname 
    });
    
  } catch (error) {
    console.error('‚ùå Error subiendo archivo:', error);
    res.status(500).json({ error: 'Error subiendo archivo: ' + error.message });
  }
});

// Ruta para obtener pistas de audio de un archivo
app.post('/get-audio-tracks', async (req, res) => {
  try {
    const { filePath } = req.body;
    
    if (!filePath) {
      return res.status(400).json({ error: 'Ruta del archivo requerida' });
    }

    console.log(`üéµ Obteniendo pistas de audio de: ${filePath}`);
    const tracks = await getAudioTracks(filePath);
    
    res.json({ tracks });
  } catch (error) {
    console.error('‚ùå Error obteniendo pistas de audio:', error);
    res.status(500).json({ error: 'Error obteniendo pistas de audio: ' + error.message });
  }
});

// Ruta para transcribir audio/video con Whisper LOCAL
app.post('/transcribe-audio-local', async (req, res) => {
  try {
    const { filePath, audioTrackIndex, modelSize = 'medium', language } = req.body;
    
    if (!filePath) {
      return res.status(400).json({ error: 'Ruta del archivo requerida' });
    }

    console.log(`üé§ Iniciando transcripci√≥n LOCAL de: ${filePath}`);
    console.log(`üîß Modelo: ${modelSize} | Idioma: ${language || 'auto-detectar'}`);
    if (audioTrackIndex !== undefined) {
      console.log(`üì° Usando pista de audio: ${audioTrackIndex}`);
    }

    // Importar din√°micamente el m√≥dulo local de Python
    const { spawn } = await import('child_process');
    
    // Crear script Python temporal para la transcripci√≥n
    const pythonScript = `
# -*- coding: utf-8 -*-
import sys
import json
import os
import subprocess
import tempfile
import shutil
from pathlib import Path

# Configurar codificaci√≥n UTF-8 para Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())

sys.path.append('${process.cwd().replace(/\\/g, '/')}')

from whisper_local import whisper_local

def extract_audio_from_mp4(input_path, output_path, track_index=None):
    """Extrae audio de MP4 usando FFmpeg"""
    try:
        cmd = ['ffmpeg', '-y', '-i', input_path]
        
        if track_index is not None:
            cmd.extend(['-map', f'0:a:{track_index}'])
        else:
            cmd.extend(['-map', '0:a:0'])  # Primera pista de audio por defecto
        
        cmd.extend(['-acodec', 'libmp3lame', '-ab', '192k', output_path])
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"Error FFmpeg: {result.stderr}")
            return False
        
        return True
        
    except Exception as e:
        print(f"Error extrayendo audio: {e}")
        return False

def main():
    file_path = r'${filePath}'
    audio_track_index = ${audioTrackIndex || 'None'}
    model_size = '${modelSize}'
    language = ${language ? `'${language}'` : 'None'}
    
    temp_audio_file = None
    
    try:
        # Verificar que el archivo existe
        if not os.path.exists(file_path):
            raise Exception(f"Archivo no encontrado: {file_path}")
        
        # Determinar archivo de audio a procesar
        if file_path.lower().endswith('.mp4'):
            # Extraer audio de MP4
            temp_audio_file = tempfile.mktemp(suffix='.mp3')
            print(f"Extrayendo audio de MP4 a: {temp_audio_file}")
            
            if not extract_audio_from_mp4(file_path, temp_audio_file, audio_track_index):
                raise Exception("Error extrayendo audio del MP4")
            
            audio_file = temp_audio_file
        else:
            # Usar archivo de audio directamente
            audio_file = file_path
        
        # Cargar modelo si no est√° cargado
        if not whisper_local.is_loaded or whisper_local.model_size != model_size:
            print(f"Cargando modelo {model_size}...")
            if not whisper_local.load_model(model_size):
                raise Exception(f"No se pudo cargar el modelo {model_size}")
        
        # Transcribir
        print(f"Transcribiendo archivo: {os.path.basename(audio_file)}")
        result = whisper_local.transcribe_audio(audio_file, language)
        
        if result['success']:
            print(json.dumps({
                'success': True,
                'transcript': result['transcript'],
                'language': result['language'],
                'duration': result['duration'],
                'model_info': result['model_info'],
                'stats': result['stats']
            }, ensure_ascii=False))
        else:
            print(json.dumps({
                'success': False,
                'error': result['error']
            }, ensure_ascii=False))
            
    except Exception as e:
        print(json.dumps({
            'success': False,
            'error': str(e)
        }, ensure_ascii=False))
    
    finally:
        # Limpiar archivo temporal de audio si se cre√≥
        if temp_audio_file and os.path.exists(temp_audio_file):
            try:
                os.unlink(temp_audio_file)
                print(f"Archivo temporal de audio eliminado: {temp_audio_file}")
            except:
                pass

if __name__ == '__main__':
    main()
`;

    // Escribir script temporal
    const tempScriptPath = path.join(process.cwd(), 'temp', `transcribe_${Date.now()}.py`);
    fs.mkdirSync(path.dirname(tempScriptPath), { recursive: true });
    fs.writeFileSync(tempScriptPath, pythonScript);

    // Ejecutar transcripci√≥n
    const pythonProcess = spawn('python', [tempScriptPath], {
      cwd: process.cwd(),
      stdio: ['pipe', 'pipe', 'pipe'],
      env: { 
        ...process.env, 
        PYTHONIOENCODING: 'utf-8',
        PYTHONUTF8: '1'
      }
    });

    let stdout = '';
    let stderr = '';

    pythonProcess.stdout.on('data', (data) => {
      stdout += data.toString();
    });

    pythonProcess.stderr.on('data', (data) => {
      stderr += data.toString();
    });

    pythonProcess.on('close', (code) => {
      // Limpiar script temporal
      try {
        fs.unlinkSync(tempScriptPath);
      } catch (e) {
        console.warn('No se pudo eliminar script temporal:', e.message);
      }

      // Limpiar archivo de audio temporal
      try {
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log(`üóëÔ∏è Archivo temporal eliminado: ${filePath}`);
        }
      } catch (cleanupError) {
        console.warn('‚ö†Ô∏è No se pudo eliminar archivo temporal:', cleanupError.message);
      }

      if (code !== 0) {
        console.error('‚ùå Error en transcripci√≥n local:', stderr);
        return res.status(500).json({ 
          error: 'Error en transcripci√≥n local: ' + stderr,
          stdout: stdout 
        });
      }

      try {
        // Buscar la √∫ltima l√≠nea que sea JSON v√°lido
        const lines = stdout.trim().split('\n');
        let result = null;
        
        for (let i = lines.length - 1; i >= 0; i--) {
          try {
            result = JSON.parse(lines[i]);
            break;
          } catch (e) {
            continue;
          }
        }

        if (!result) {
          throw new Error('No se pudo parsear el resultado');
        }

        if (result.success) {
          console.log(`‚úÖ Transcripci√≥n LOCAL completada. Caracteres: ${result.transcript.length}`);
          console.log(`üìä Velocidad: ${result.stats.processing_speed.toFixed(1)}x tiempo real`);
          console.log(`üåç Idioma: ${result.language}`);
          
          res.json({
            transcript: result.transcript,
            language: result.language,
            duration: result.duration,
            model_info: result.model_info,
            stats: result.stats,
            method: 'local'
          });
        } else {
          throw new Error(result.error);
        }

      } catch (parseError) {
        console.error('‚ùå Error parseando resultado:', parseError);
        console.log('Raw stdout:', stdout);
        res.status(500).json({ 
          error: 'Error parseando resultado de transcripci√≥n',
          stdout: stdout,
          stderr: stderr 
        });
      }
    });

    pythonProcess.on('error', (error) => {
      console.error('‚ùå Error ejecutando Python:', error);
      res.status(500).json({ error: 'Error ejecutando transcripci√≥n local: ' + error.message });
    });
    
  } catch (error) {
    console.error('‚ùå Error en transcripci√≥n local:', error);
    res.status(500).json({ error: 'Error en transcripci√≥n local: ' + error.message });
  }
});

// Ruta para obtener las voces disponibles de Applio
app.get('/api/applio-voices', (req, res) => {
  try {
    console.log('üé§ Solicitando lista de voces de Applio...');
    const voices = getAvailableVoices();
    
    res.json({
      success: true,
      voices: voices,
      count: voices.length
    });
    
    console.log(`‚úÖ Enviadas ${voices.length} voces al cliente`);
  } catch (error) {
    console.error('‚ùå Error obteniendo voces:', error);
    res.status(500).json({
      success: false,
      error: 'Error al obtener las voces disponibles',
      voices: [{
        name: 'RemyOriginal (Default)',
        path: 'logs\\VOCES\\RemyOriginal.pth',
        displayName: 'RemyOriginal'
      }]
    });
  }
});

// Ruta para obtener informaci√≥n del modelo local
app.get('/whisper-local-info', async (req, res) => {
  try {
    const { spawn } = await import('child_process');
    
    const pythonScript = `
import sys
import json
sys.path.append('${process.cwd().replace(/\\/g, '/')}')

from whisper_local import whisper_local

try:
    info = whisper_local.get_model_info()
    print(json.dumps(info))
except Exception as e:
    print(json.dumps({'error': str(e)}))
`;

    const tempScriptPath = path.join(process.cwd(), 'temp', `info_${Date.now()}.py`);
    fs.mkdirSync(path.dirname(tempScriptPath), { recursive: true });
    fs.writeFileSync(tempScriptPath, pythonScript);

    const pythonProcess = spawn('python', [tempScriptPath], {
      env: { 
        ...process.env, 
        PYTHONIOENCODING: 'utf-8',
        PYTHONUTF8: '1'
      }
    });
    let stdout = '';

    pythonProcess.stdout.on('data', (data) => {
      stdout += data.toString();
    });

    pythonProcess.on('close', (code) => {
      try {
        fs.unlinkSync(tempScriptPath);
      } catch (e) {}

      try {
        const result = JSON.parse(stdout.trim());
        res.json(result);
      } catch (error) {
        res.status(500).json({ error: 'Error obteniendo informaci√≥n del modelo' });
      }
    });

  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Ruta para transcribir audio/video
app.post('/transcribe-audio', async (req, res) => {
  try {
    const { filePath, audioTrackIndex } = req.body;
    
    if (!filePath) {
      return res.status(400).json({ error: 'Ruta del archivo requerida' });
    }

    console.log(`üé§ Iniciando transcripci√≥n de: ${filePath}`);
    if (audioTrackIndex !== undefined) {
      console.log(`üì° Usando pista de audio: ${audioTrackIndex}`);
    }

    const transcript = await transcribeAudio({
      filePath,
      audioTrackIndex,
      onUploadProgress: (percent) => {
        // Aqu√≠ podr√≠as implementar WebSockets para progreso en tiempo real si quisieras
        console.log(`üìä Progreso de transcripci√≥n: ${percent}%`);
      }
    });

    console.log(`‚úÖ Transcripci√≥n completada. Caracteres: ${transcript.length}`);
    
    // Limpiar archivo temporal despu√©s de la transcripci√≥n
    try {
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è Archivo temporal eliminado: ${filePath}`);
      }
    } catch (cleanupError) {
      console.warn('‚ö†Ô∏è No se pudo eliminar archivo temporal:', cleanupError.message);
    }
    
    res.json({ transcript });
    
  } catch (error) {
    console.error('‚ùå Error transcribiendo audio:', error);
    res.status(500).json({ error: 'Error transcribiendo audio: ' + error.message });
  }
});

// Endpoint para generar t√≠tulos, descripci√≥n y etiquetas para YouTube
app.post('/generate-youtube-metadata', async (req, res) => {
  try {
    const { topic, allSections, folderName, thumbnailStyle } = req.body;

    if (!topic || !allSections || allSections.length === 0) {
      return res.status(400).json({ error: 'Tema y secciones requeridos' });
    }

    console.log(`üé¨ Generando metadata de YouTube para: ${topic}`);
    console.log(`üìù N√∫mero de secciones: ${allSections.length}`);
    console.log(`üñºÔ∏è Estilo de miniatura: ${thumbnailStyle || 'default'}`);

    // Combinar todas las secciones en un resumen
    const fullScript = allSections.join('\n\n--- SECCI√ìN ---\n\n');

    // Obtener instrucciones de estilo de miniatura
    const thumbnailInstructions = getThumbnailStyleInstructions(thumbnailStyle || 'default');
    
    console.log(`üé® thumbnailStyle recibido:`, thumbnailStyle);
    console.log(`üìù thumbnailInstructions generadas:`, thumbnailInstructions);

    const prompt = `
Bas√°ndote en el siguiente tema y gui√≥n completo del video, genera metadata optimizada para YouTube:

**TEMA:** ${topic}

**GUI√ìN COMPLETO:**
${fullScript}

Por favor genera:

1. **10 T√çTULOS CLICKBAIT** (cada uno en una l√≠nea, numerados):
   - Usa palabras que generen curiosidad como "QUE PASA CUANDO", "POR QUE", "HICE ESTO Y PASO ESTO", "NO VAS A CREER", "ESTO CAMBI√ì TODO"
   - Que sean pol√©micos pero relacionados al contenido
   - maximo 15 palabras, minimo 10.

2. **DESCRIPCI√ìN PARA VIDEO** (optimizada para SEO):
   - Entre 150-300 palabras
   - Incluye palabras clave relevantes del tema
   - Menciona el contenido principal del video
   - Incluye call-to-action para suscribirse
   - Formato atractivo con emojis

3. **25 ETIQUETAS** (separadas por comas):
   - Palabras clave relacionadas al tema
   - Tags populares del nicho correspondiente
   - T√©rminos de b√∫squeda relevantes
   - Sin espacios en tags compuestos (usar guiones o camelCase)

4. **5 PROMPTS PARA MINIATURAS DE YOUTUBE** (cada uno en una l√≠nea, numerados):
   
   FORMATO OBLIGATORIO - DEBES SEGUIR ESTA ESTRUCTURA EXACTA PARA CADA UNO DE LOS 5 PROMPTS:
   
   "Miniatura de YouTube 16:9 mostrando [descripci√≥n visual muy detallada del contenido relacionado al tema, m√≠nimo 15 palabras] con texto superpuesto '[frase clickbait espec√≠fica relacionada al contenido]' con el texto aplicando el siguiente estilo: ${thumbnailInstructions}"
   
   REGLAS ESTRICTAS - NO GENERAR PROMPTS CORTOS O INCOMPLETOS:
   - CADA prompt debe tener m√≠nimo 25 palabras de descripci√≥n visual
   - CADA prompt debe incluir una frase clickbait espec√≠fica entre comillas
   - CADA prompt debe terminar con la frase completa del estilo
   - NO generar prompts como "el texto con contorno negro" - ESO EST√Å PROHIBIDO
   - TODOS los prompts deben seguir el formato completo
   
   EJEMPLO DE FORMATO CORRECTO (SEGUIR EXACTAMENTE ESTA ESTRUCTURA):
   1. Miniatura de YouTube 16:9 mostrando a Link adulto con expresi√≥n de shock mirando directamente a la c√°mara mientras sostiene la Master Sword brillante, con el Castillo de Hyrule destruido de fondo y llamas rojas. El rostro de Link debe mostrar sorpresa extrema con ojos muy abiertos con texto superpuesto "¬°ZELDA EST√Å MUERTA!" con el texto aplicando el siguiente estilo: ${thumbnailInstructions}

REGLAS ESTRICTAS:
- EXACTAMENTE 5 prompts numerados del 1 al 5
- Cada prompt debe incluir la frase completa del estilo al final
- NO hacer referencias a estilos anteriores
- Descripci√≥n visual espec√≠fica y detallada en cada uno
IMPORTANTE: 
- Genera EXACTAMENTE 5 prompts completos, numerados del 1 al 5
- Cada prompt debe ser una oraci√≥n completa y detallada (m√≠nimo 25 palabras)
- SIEMPRE incluye la frase completa del estilo al final de cada prompt
- NO usar "aplicando el estilo especificado anteriormente" NUNCA
- NO generar prompts cortos como "el texto con contorno negro" - ESTO EST√Å PROHIBIDO
- VERIFICA que cada prompt tenga: descripci√≥n visual + frase clickbait + estilo completo
- Si un prompt sale corto, reescr√≠belo completo


Formato de respuesta:
**T√çTULOS CLICKBAIT:**
1. [t√≠tulo]
2. [t√≠tulo]
...

**DESCRIPCI√ìN:**
[descripci√≥n completa]

**ETIQUETAS:**
tag1, tag2, tag3, ...

**PROMPTS PARA MINIATURAS:**
1. [prompt completo para miniatura]
2. [prompt completo para miniatura]  
3. [prompt completo para miniatura]
4. [prompt completo para miniatura]
5. [prompt completo para miniatura]
    `;

    const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    
    const response = await model.generateContent(prompt);
    const result = await response.response;
    const responseText = await result.text();

    // Validar que los prompts de miniatura no est√©n incompletos
    const thumbnailSection = responseText.match(/\*\*PROMPTS PARA MINIATURAS:\*\*([\s\S]*?)(?=\n\n|$)/);
    if (thumbnailSection) {
      const thumbnailPrompts = thumbnailSection[1].trim().split('\n').filter(line => line.trim());
      
      // Verificar prompts incompletos
      const incompletePrompts = thumbnailPrompts.filter(prompt => {
        const cleanPrompt = prompt.replace(/^\d+\.\s*/, '').trim();
        return cleanPrompt.length < 50 || 
               cleanPrompt.includes('el texto con contorno negro y muy brillante el texto') ||
               !cleanPrompt.includes('con el texto aplicando el siguiente estilo:');
      });
      
      if (incompletePrompts.length > 0) {
        console.log(`‚ö†Ô∏è Detectados ${incompletePrompts.length} prompts incompletos, regenerando...`);
        console.log('Prompts problem√°ticos:', incompletePrompts);
        
        // Regenerar solo la secci√≥n de prompts
        const regeneratePrompt = `
Genera EXACTAMENTE 5 prompts completos para miniaturas de YouTube sobre: ${topic}

FORMATO OBLIGATORIO para cada prompt:
"Miniatura de YouTube 16:9 mostrando [descripci√≥n visual muy detallada, m√≠nimo 20 palabras] con texto superpuesto '[frase clickbait espec√≠fica]' con el texto aplicando el siguiente estilo: ${thumbnailInstructions}"

REGLAS ESTRICTAS:
- Cada prompt debe tener m√≠nimo 30 palabras
- NUNCA generar "el texto con contorno negro y muy brillante el texto"
- TODOS deben incluir la frase completa del estilo al final
- Numerar del 1 al 5

1. [prompt completo]
2. [prompt completo]
3. [prompt completo]
4. [prompt completo]
5. [prompt completo]
        `;
        
        const regenerateResponse = await ai.models.generateContent({
          model: "gemini-2.0-flash-exp",
          contents: [{
            role: "user",
            parts: [{ text: regeneratePrompt }]
          }]
        });
        
        // Reemplazar la secci√≥n de prompts en la respuesta original
        const newThumbnailPrompts = regenerateResponse.text.trim();
        const updatedResponse = responseText.replace(
          /(\*\*PROMPTS PARA MINIATURAS:\*\*)([\s\S]*?)(?=\n\n|$)/,
          `$1\n${newThumbnailPrompts}`
        );
        
        console.log(`‚úÖ Prompts regenerados exitosamente`);
        
        // Guardar los metadatos en archivo con los prompts corregidos
        try {
          const safeFolderName = folderName && folderName.trim() 
            ? createSafeFolderName(folderName.trim())
            : createSafeFolderName(topic);
            
          const outputsDir = path.join('./public/outputs');
          const projectDir = path.join(outputsDir, safeFolderName);
          
          if (!fs.existsSync(outputsDir)) {
            fs.mkdirSync(outputsDir, { recursive: true });
          }
          if (!fs.existsSync(projectDir)) {
            fs.mkdirSync(projectDir, { recursive: true });
          }
          
          const metadataFileName = `${safeFolderName}_metadata_youtube.txt`;
          const metadataFilePath = path.join(projectDir, metadataFileName);
          
          const metadataContent = `METADATA DE YOUTUBE
===============================
Tema: ${topic}
N√∫mero de secciones: ${allSections.length}
${folderName ? `Nombre del proyecto: ${folderName}` : ''}
Fecha de generaci√≥n: ${new Date().toLocaleString()}

CONTENIDO DE METADATA:
${updatedResponse}

===============================
Generado autom√°ticamente por el sistema de creaci√≥n de contenido
`;
          
          fs.writeFileSync(metadataFilePath, metadataContent, 'utf8');
          console.log(`üíæ Metadata de YouTube guardada (con prompts corregidos): ${metadataFilePath}`);
          
        } catch (saveError) {
          console.error('‚ùå Error guardando archivo de metadata:', saveError);
        }
        
        return res.json({ 
          success: true, 
          metadata: updatedResponse,
          message: 'Metadata generada exitosamente (con prompts corregidos)' 
        });
      }
    }

    console.log(`‚úÖ Metadata de YouTube generada exitosamente`);
    
    // Guardar los metadatos en archivo
    try {
      // Usar el mismo sistema que las secciones para determinar el nombre de carpeta
      const safeFolderName = folderName && folderName.trim() 
        ? createSafeFolderName(folderName.trim())
        : createSafeFolderName(topic);
        
      const outputsDir = path.join('./public/outputs');
      const projectDir = path.join(outputsDir, safeFolderName);
      
      // Crear carpetas si no existen
      if (!fs.existsSync(outputsDir)) {
        fs.mkdirSync(outputsDir, { recursive: true });
      }
      if (!fs.existsSync(projectDir)) {
        fs.mkdirSync(projectDir, { recursive: true });
      }
      
      // Guardar en la misma carpeta donde est√°n las secciones del gui√≥n
      const metadataFileName = `${safeFolderName}_metadata_youtube.txt`;
      const metadataFilePath = path.join(projectDir, metadataFileName);
      
      const metadataContent = `METADATA DE YOUTUBE
===============================
Tema: ${topic}
N√∫mero de secciones: ${allSections.length}
${folderName ? `Nombre del proyecto: ${folderName}` : ''}
Fecha de generaci√≥n: ${new Date().toLocaleString()}

CONTENIDO DE METADATA:
${responseText}

===============================
Generado autom√°ticamente por el sistema de creaci√≥n de contenido
`;
      
      fs.writeFileSync(metadataFilePath, metadataContent, 'utf8');
      console.log(`üíæ Metadata de YouTube guardada en la carpeta del proyecto: ${metadataFilePath}`);
      
    } catch (saveError) {
      console.error('‚ùå Error guardando archivo de metadata:', saveError);
      // No detener el proceso por este error, solo registrarlo
    }
    
    res.json({
      success: true,
      metadata: responseText,
      topic: topic,
      sectionsCount: allSections.length
    });

  } catch (error) {
    console.error('‚ùå Error generando metadata de YouTube:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error generando metadata de YouTube: ' + error.message 
    });
  }
});

// ================================
// RUTAS PARA SISTEMA DE PROYECTOS
// ================================

// Ruta para obtener lista de proyectos disponibles
app.get('/api/projects', (req, res) => {
  try {
    console.log('üì° API /api/projects llamada');
    const projects = getAvailableProjects();
    console.log('üìä Proyectos encontrados:', projects.length);
    res.json({ success: true, projects });
  } catch (error) {
    console.error('‚ùå Error obteniendo proyectos:', error);
    res.status(500).json({ success: false, error: 'Error obteniendo proyectos: ' + error.message });
  }
});

// Ruta para cargar un proyecto espec√≠fico
app.get('/api/projects/:folderName', (req, res) => {
  try {
    const { folderName } = req.params;
    const projectState = loadProjectState(folderName);
    
    if (!projectState) {
      return res.status(404).json({ success: false, error: 'Proyecto no encontrado' });
    }
    
    res.json({ success: true, project: projectState });
  } catch (error) {
    console.error('‚ùå Error cargando proyecto:', error);
    res.status(500).json({ success: false, error: 'Error cargando proyecto' });
  }
});

// Endpoint para diagnosticar y reparar un proyecto espec√≠fico
app.get('/api/projects/:folderName/diagnose', (req, res) => {
  try {
    const { folderName } = req.params;
    const projectDir = path.join('./public/outputs', folderName);
    const projectStateFile = path.join(projectDir, 'project_state.json');
    
    console.log(`üîç Diagnosticando proyecto: ${folderName}`);
    
    const diagnosis = {
      projectName: folderName,
      projectDirExists: fs.existsSync(projectDir),
      projectStateFileExists: fs.existsSync(projectStateFile),
      errors: [],
      warnings: [],
      repairAttempted: false,
      repairSuccessful: false
    };
    
    if (!diagnosis.projectDirExists) {
      diagnosis.errors.push('El directorio del proyecto no existe');
      return res.json({ success: false, diagnosis });
    }
    
    if (!diagnosis.projectStateFileExists) {
      diagnosis.errors.push('El archivo project_state.json no existe');
      return res.json({ success: false, diagnosis });
    }
    
    // Leer y analizar el archivo
    try {
      const fileContent = fs.readFileSync(projectStateFile, 'utf8');
      diagnosis.fileSize = fileContent.length;
      diagnosis.filePreview = fileContent.substring(0, 200) + (fileContent.length > 200 ? '...' : '');
      
      if (!fileContent.trim()) {
        diagnosis.errors.push('El archivo JSON est√° vac√≠o');
        return res.json({ success: false, diagnosis });
      }
      
      // Intentar parsear
      try {
        const projectState = JSON.parse(fileContent);
        diagnosis.parseSuccessful = true;
        diagnosis.projectData = {
          topic: projectState.topic,
          totalSections: projectState.totalSections,
          completedSections: projectState.completedSections?.length || 0,
          lastModified: projectState.lastModified
        };
      } catch (parseError) {
        diagnosis.errors.push(`Error de JSON: ${parseError.message}`);
        
        // Intentar reparar
        diagnosis.repairAttempted = true;
        
        if (!fileContent.trim().endsWith('}') && !fileContent.trim().endsWith(']')) {
          let repairedContent = fileContent.trim();
          
          // Contar llaves abiertas vs cerradas
          const openBraces = (repairedContent.match(/\{/g) || []).length;
          const closeBraces = (repairedContent.match(/\}/g) || []).length;
          
          if (openBraces > closeBraces) {
            // Agregar llaves faltantes
            for (let i = 0; i < openBraces - closeBraces; i++) {
              repairedContent += '}';
            }
            
            try {
              const repairedState = JSON.parse(repairedContent);
              
              // Crear backup del archivo original
              const backupPath = projectStateFile + '.backup.' + Date.now();
              fs.copyFileSync(projectStateFile, backupPath);
              
              // Guardar archivo reparado
              fs.writeFileSync(projectStateFile, JSON.stringify(repairedState, null, 2), 'utf8');
              
              diagnosis.repairSuccessful = true;
              diagnosis.repairDetails = `Agregadas ${openBraces - closeBraces} llaves faltantes`;
              diagnosis.backupPath = path.basename(backupPath);
              diagnosis.projectData = {
                topic: repairedState.topic,
                totalSections: repairedState.totalSections,
                completedSections: repairedState.completedSections?.length || 0,
                lastModified: repairedState.lastModified
              };
            } catch (repairError) {
              diagnosis.errors.push(`Error en reparaci√≥n: ${repairError.message}`);
            }
          } else {
            diagnosis.warnings.push('El archivo parece completo pero no se puede parsear');
          }
        }
      }
      
    } catch (readError) {
      diagnosis.errors.push(`Error leyendo archivo: ${readError.message}`);
    }
    
    const isHealthy = diagnosis.errors.length === 0 && (diagnosis.parseSuccessful || diagnosis.repairSuccessful);
    
    res.json({ 
      success: isHealthy, 
      diagnosis,
      message: isHealthy ? 'Proyecto saludable' : 'Proyecto tiene problemas'
    });
    
  } catch (error) {
    console.error('‚ùå Error diagnosticando proyecto:', error);
    res.status(500).json({ success: false, error: 'Error diagnosticando proyecto: ' + error.message });
  }
});

// Endpoint para reconstruir manualmente un proyecto espec√≠fico
app.post('/api/projects/:folderName/reconstruct', (req, res) => {
  try {
    const { folderName } = req.params;
    
    console.log(`üîß Solicitud de reconstrucci√≥n manual para proyecto: ${folderName}`);
    
    const reconstructedState = reconstructProjectState(folderName);
    
    if (!reconstructedState) {
      return res.status(500).json({ 
        success: false, 
        error: 'No se pudo reconstruir el proyecto. Verifica que las carpetas existan.' 
      });
    }
    
    // Guardar el estado reconstruido
    const projectStateFile = path.join('./public/outputs', folderName, 'project_state.json');
    
    // Crear backup del archivo existente si existe
    if (fs.existsSync(projectStateFile)) {
      const backupPath = projectStateFile + '.backup.' + Date.now();
      fs.copyFileSync(projectStateFile, backupPath);
      console.log(`üóÉÔ∏è Backup creado: ${path.basename(backupPath)}`);
    }
    
    fs.writeFileSync(projectStateFile, JSON.stringify(reconstructedState, null, 2), 'utf8');
    
    res.json({ 
      success: true, 
      message: 'Proyecto reconstruido exitosamente',
      data: {
        projectName: folderName,
        totalSections: reconstructedState.totalSections,
        completedSections: reconstructedState.completedSections.length,
        reconstructedAt: reconstructedState.reconstructedAt,
        sectionsAnalyzed: reconstructedState.completedSections.map(s => ({
          section: s.section,
          hasScript: s.hasScript,
          hasAudio: s.hasAudio,
          hasImages: s.hasImages,
          fileCount: s.fileCount
        }))
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error reconstruyendo proyecto:', error);
    res.status(500).json({ success: false, error: 'Error reconstruyendo proyecto: ' + error.message });
  }
});

// Endpoint para obtener im√°genes de una secci√≥n espec√≠fica
app.get('/api/project-images/:folderName/:sectionNumber', (req, res) => {
  try {
    const { folderName, sectionNumber } = req.params;
    const projectDir = path.join('./public/outputs', folderName);
    const sectionDir = path.join(projectDir, `seccion_${sectionNumber}`);
    
    console.log(`üñºÔ∏è Buscando im√°genes en: ${sectionDir}`);
    
    if (!fs.existsSync(sectionDir)) {
      console.log(`üìÅ Directorio de secci√≥n no encontrado: ${sectionDir}`);
      return res.json({ success: true, images: [], keywords: [], prompts: [] });
    }
    
    // Buscar archivos de imagen
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    const files = fs.readdirSync(sectionDir);
    const imageFiles = files.filter(file => 
      imageExtensions.includes(path.extname(file).toLowerCase())
    );
    
    console.log(`üñºÔ∏è Archivos de imagen encontrados: ${imageFiles.length}`);
    
    // Crear URLs para las im√°genes
    const images = imageFiles.map(filename => {
      // Detectar si es imagen de Bing/Google por el nombre del archivo
      const isBingImage = filename.startsWith('bing_image_');
      
      return {
        url: `/outputs/${folderName}/seccion_${sectionNumber}/${filename}`,
        filename: filename,
        caption: `Imagen: ${filename}`,
        path: path.join(sectionDir, filename),
        source: isBingImage ? 'Google Images' : 'AI Generated'
      };
    });
    
    // Buscar archivo de keywords
    let keywords = [];
    const keywordsFile = path.join(sectionDir, `${folderName}_seccion_${sectionNumber}_keywords.txt`);
    if (fs.existsSync(keywordsFile)) {
      try {
        const keywordsContent = fs.readFileSync(keywordsFile, 'utf8');
        keywords = keywordsContent.split('\n').filter(line => line.trim());
        console.log(`üìã Keywords cargadas desde archivo keywords: ${keywords.length}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error leyendo keywords: ${error.message}`);
      }
    } else {
      // Intentar extraer keywords del archivo de prompts como fallback
      const promptsFile = path.join(sectionDir, `${folderName}_seccion_${sectionNumber}_prompts_imagenes.txt`);
      if (fs.existsSync(promptsFile)) {
        try {
          const promptsContent = fs.readFileSync(promptsFile, 'utf8');
          const lines = promptsContent.split('\n');
          
          // Buscar l√≠neas que contengan "Imagen X: [keyword]"
          const keywordLines = lines.filter(line => {
            return line.match(/^\d+\.\s*Imagen\s+\d+:\s*(.+)$/);
          });
          
          keywords = keywordLines.map(line => {
            const match = line.match(/^\d+\.\s*Imagen\s+\d+:\s*(.+)$/);
            return match ? match[1].trim() : '';
          }).filter(keyword => keyword);
          
          console.log(`üìã Keywords extra√≠das desde archivo de prompts: ${keywords.length}`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Error extrayendo keywords desde prompts: ${error.message}`);
        }
      }
    }
    
    // üîç INTENTAR CARGAR KEYWORDS DESDE images_metadata.json
    if (keywords.length === 0) {
      const metadataFile = path.join(sectionDir, 'images_metadata.json');
      console.log(`üîç Buscando archivo de metadata: ${metadataFile}`);
      if (fs.existsSync(metadataFile)) {
        try {
          const metadataContent = fs.readFileSync(metadataFile, 'utf8');
          const metadata = JSON.parse(metadataContent);
          console.log(`üìä Metadata cargado:`, metadata);
          
          // Extraer keywords para cada imagen en orden
          const imageKeywords = [];
          for (const image of images) {
            const filename = image.filename;
            if (metadata[filename] && metadata[filename].keywords) {
              imageKeywords.push(metadata[filename].keywords);
              console.log(`üîë Keyword para ${filename}: ${metadata[filename].keywords}`);
            } else {
              imageKeywords.push(''); // Placeholder vac√≠o si no hay keyword
              console.log(`‚ö†Ô∏è No se encontr√≥ keyword para ${filename}`);
            }
          }
          
          if (imageKeywords.length > 0) {
            keywords = imageKeywords;
            console.log(`üìã Keywords finales cargadas desde images_metadata.json: ${keywords.length} items`);
            console.log(`üìã Keywords array:`, keywords);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Error leyendo images_metadata.json: ${error.message}`);
        }
      } else {
        console.log(`‚ùå Archivo images_metadata.json no encontrado`);
      }
    }
    
    // Buscar archivo de prompts
    let prompts = [];
    const promptsFile = path.join(sectionDir, `${folderName}_seccion_${sectionNumber}_prompts_imagenes.txt`);
    if (fs.existsSync(promptsFile)) {
      try {
        const promptsContent = fs.readFileSync(promptsFile, 'utf8');
        prompts = promptsContent.split('\n').filter(line => line.trim());
        console.log(`üé® Prompts cargados: ${prompts.length}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error leyendo prompts: ${error.message}`);
      }
    }
    
    console.log(`‚úÖ Respondiendo con ${images.length} im√°genes, ${keywords.length} keywords, ${prompts.length} prompts`);
    
    // Si no hay keywords suficientes o hay keywords vac√≠os, llenar con keywords por defecto
    if (keywords.length < images.length) {
      console.log(`‚ö†Ô∏è Hay ${images.length} im√°genes pero solo ${keywords.length} keywords. Rellenando con valores por defecto.`);
      const defaultKeywords = [];
      for (let i = 0; i < images.length; i++) {
        if (keywords[i] && keywords[i].trim()) {
          defaultKeywords.push(keywords[i]);
        } else {
          // Generar keyword por defecto basado en el tema del proyecto
          const projectTopic = folderName.includes('guldan') ? 'guldan' : 'imagen';
          defaultKeywords.push(`${projectTopic} ${i + 1}`);
        }
      }
      keywords = defaultKeywords;
      console.log(`üìã Keywords finales despu√©s del relleno:`, keywords);
    } else {
      // Verificar si hay keywords vac√≠os y rellenarlos
      const defaultKeywords = [];
      let hasEmptyKeywords = false;
      for (let i = 0; i < keywords.length; i++) {
        if (keywords[i] && keywords[i].trim()) {
          defaultKeywords.push(keywords[i]);
        } else {
          // Generar keyword por defecto basado en el tema del proyecto  
          const projectTopic = folderName.includes('guldan') ? 'guldan' : 'imagen';
          defaultKeywords.push(`${projectTopic} ${i + 1}`);
          hasEmptyKeywords = true;
        }
      }
      if (hasEmptyKeywords) {
        keywords = defaultKeywords;
        console.log(`üìã Keywords rellenados (hab√≠an algunos vac√≠os):`, keywords);
      }
    }
    
    res.json({
      success: true, 
      images: images,
      keywords: keywords,
      prompts: prompts,
      sectionNumber: parseInt(sectionNumber)
    });  } catch (error) {
    console.error('‚ùå Error obteniendo im√°genes del proyecto:', error);
    res.status(500).json({ success: false, error: 'Error obteniendo im√°genes del proyecto' });
  }
});

// Ruta para eliminar un proyecto
app.delete('/api/projects/:folderName', (req, res) => {
  try {
    const { folderName } = req.params;
    const projectDir = path.join('./public/outputs', folderName);
    
    if (fs.existsSync(projectDir)) {
      fs.rmSync(projectDir, { recursive: true, force: true });
      console.log(`üóëÔ∏è Proyecto eliminado: ${folderName}`);
      res.json({ success: true, message: 'Proyecto eliminado exitosamente' });
    } else {
      res.status(404).json({ success: false, error: 'Proyecto no encontrado' });
    }
  } catch (error) {
    console.error('‚ùå Error eliminando proyecto:', error);
    res.status(500).json({ success: false, error: 'Error eliminando proyecto' });
  }
});

// Ruta para duplicar un proyecto
app.post('/api/projects/:folderName/duplicate', (req, res) => {
  try {
    const { folderName } = req.params;
    const { newName } = req.body;
    
    const sourceDir = path.join('./public/outputs', folderName);
    const newFolderName = createSafeFolderName(newName);
    const targetDir = path.join('./public/outputs', newFolderName);
    
    if (!fs.existsSync(sourceDir)) {
      return res.status(404).json({ success: false, error: 'Proyecto fuente no encontrado' });
    }
    
    if (fs.existsSync(targetDir)) {
      return res.status(400).json({ success: false, error: 'Ya existe un proyecto con ese nombre' });
    }
    
    // Copiar directorio completo
    fs.cpSync(sourceDir, targetDir, { recursive: true });
    
    // Actualizar el archivo de estado del proyecto duplicado
    const projectStateFile = path.join(targetDir, 'project_state.json');
    if (fs.existsSync(projectStateFile)) {
      const projectState = JSON.parse(fs.readFileSync(projectStateFile, 'utf8'));
      projectState.originalFolderName = newName;
      projectState.folderName = newFolderName;
      projectState.createdAt = new Date().toISOString();
      projectState.lastModified = new Date().toISOString();
      
      fs.writeFileSync(projectStateFile, JSON.stringify(projectState, null, 2), 'utf8');
    }
    
    console.log(`üìã Proyecto duplicado: ${folderName} -> ${newFolderName}`);
    res.json({ 
      success: true, 
      message: 'Proyecto duplicado exitosamente',
      newFolderName: newFolderName
    });
  } catch (error) {
    console.error('‚ùå Error duplicando proyecto:', error);
    res.status(500).json({ success: false, error: 'Error duplicando proyecto' });
  }
});

// Ruta para refrescar una imagen espec√≠fica
app.post('/api/refresh-image', async (req, res) => {
  console.log('üéØ ENDPOINT /api/refresh-image llamado con body:', req.body);
  try {
    const { folderName, imageIndex, sectionNum, keywords, currentImages } = req.body;
    
    console.log('üìã Par√°metros recibidos:', { folderName, imageIndex, sectionNum, keywords: keywords.substring(0, 50) + '...' });
    
    if (!folderName || imageIndex === undefined || !sectionNum || !keywords) {
      console.log('‚ùå Faltan par√°metros requeridos');
      return res.status(400).json({ error: 'Faltan par√°metros requeridos' });
    }

    // Intentar extraer el folderName real desde las URLs de las im√°genes actuales
    let actualFolderName = folderName;
    if (currentImages && currentImages.length > 0) {
      const firstImageUrl = currentImages[0].url;
      const urlMatch = firstImageUrl.match(/\/outputs\/([^\/]+)\//);
      if (urlMatch) {
        actualFolderName = urlMatch[1];
        console.log(`üîç Folder name extra√≠do de URL de imagen: "${actualFolderName}"`);
      }
    }
    
    // Usar la funci√≥n est√°ndar para normalizaci√≥n consistente
    const normalizedFolderName = createSafeFolderName(actualFolderName);
    console.log(`üîÑ Carpeta normalizada: "${folderName}" ‚Üí "${normalizedFolderName}"`);
    
    const imagesDir = path.join('./public/outputs', normalizedFolderName, `seccion_${sectionNum}`);
    console.log('üìÅ Directorio de im√°genes:', imagesDir);
    
    if (!fs.existsSync(imagesDir)) {
      console.log('‚ùå Carpeta no encontrada:', imagesDir);
      return res.status(404).json({ error: 'Carpeta no encontrada' });
    }

    console.log(`üîÑ Refrescando imagen en posici√≥n visual ${imageIndex} con keywords: ${keywords}`);
    
    // Si tenemos el array de im√°genes actuales del frontend, usarlo
    let targetFilename = null;
    
    if (currentImages && currentImages[imageIndex]) {
      // Extraer el nombre del archivo de la URL
      const imageUrl = currentImages[imageIndex].url || currentImages[imageIndex];
      targetFilename = imageUrl.split('/').pop().split('?')[0]; // Remover query params
      console.log(`üéØ Usando mapeo directo del frontend: posici√≥n ${imageIndex} ‚Üí ${targetFilename}`);
    } else {
      // Fallback: usar orden alfab√©tico (comportamiento anterior)
      const files = fs.readdirSync(imagesDir);
      const imageFiles = files.filter(file => 
        /\.(jpg|jpeg|png|gif|webp)$/i.test(file)
      ).sort();
      
      if (imageIndex >= imageFiles.length) {
        return res.status(400).json({ error: '√çndice de imagen inv√°lido' });
      }
      
      targetFilename = imageFiles[imageIndex];
      console.log(`‚ö†Ô∏è Usando fallback alfab√©tico: posici√≥n ${imageIndex} ‚Üí ${targetFilename}`);
    }

    // Verificar que el archivo existe
    const currentImagePath = path.join(imagesDir, targetFilename);
    if (!fs.existsSync(currentImagePath)) {
      return res.status(404).json({ error: `Archivo no encontrado: ${targetFilename}` });
    }

    // Buscar y descargar una nueva imagen con las mismas keywords
    console.log(`üîÑ Buscando nueva imagen con keywords: ${keywords}`);
    
    // Convertir keywords a string si es un array, o usarlo directamente si es string
    const searchQuery = Array.isArray(keywords) ? keywords.join(' ') : keywords;
    const imageUrls = await searchBingImages(searchQuery, 60); // Buscar 60 im√°genes para m√°xima variaci√≥n
    
    if (imageUrls && imageUrls.length > 0) {
      // Obtener URLs de im√°genes existentes para evitar duplicados
      const existingFiles = fs.readdirSync(imagesDir);
      const existingImageUrls = new Set();
      
      // Leer metadata si existe para obtener URLs originales
      const metadataPath = path.join(imagesDir, 'images_metadata.json');
      if (fs.existsSync(metadataPath)) {
        try {
          const metadata = JSON.parse(fs.readFileSync(metadataPath, 'utf8'));
          Object.values(metadata).forEach(img => {
            if (img.originalUrl) existingImageUrls.add(img.originalUrl);
          });
        } catch (error) {
          console.log('‚ö†Ô∏è Error leyendo metadata, continuando sin filtro de duplicados');
        }
      }
      
      // Filtrar URLs que ya tenemos
      const filteredUrls = imageUrls.filter(url => !existingImageUrls.has(url));
      const urlsToUse = filteredUrls.length > 0 ? filteredUrls : imageUrls;
      
      // Seleccionar una imagen aleatoria para obtener variaci√≥n
      const randomIndex = Math.floor(Math.random() * urlsToUse.length);
      const imageUrl = urlsToUse[randomIndex];
      console.log(`üé≤ Seleccionando imagen ${randomIndex + 1} de ${urlsToUse.length} encontradas (${filteredUrls.length > 0 ? 'sin duplicados' : 'total'})`);
      
      // Mantener el mismo nombre base pero con timestamp para evitar cache
      const timestamp = Date.now();
      const extension = imageUrl.split('.').pop()?.split('?')[0] || 'jpg';
      
      // Crear nombre que mantenga la posici√≥n visual
      let newImageName;
      
      // Mejorar extracci√≥n de extensi√≥n para evitar extensiones corruptas
      let validExtension = 'jpg'; // Default seguro
      try {
        const urlParts = imageUrl.split('.');
        if (urlParts.length > 1) {
          const lastPart = urlParts[urlParts.length - 1];
          const cleanExtension = lastPart.split('?')[0].split('/')[0].split('#')[0].toLowerCase();
          // Validar que la extensi√≥n sea v√°lida y no muy larga
          if (/^(jpg|jpeg|png|gif|webp)$/i.test(cleanExtension) && cleanExtension.length <= 5) {
            validExtension = cleanExtension;
          }
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Error extrayendo extensi√≥n de URL, usando jpg por defecto: ${error.message}`);
      }
      
      if (targetFilename.startsWith('bing_image_')) {
        // Mantener el formato bing_image_X para compatibilidad
        const imageNumber = targetFilename.match(/bing_image_(\d+)/)?.[1] || (imageIndex + 1);
        newImageName = `bing_image_${imageNumber}.jpg`;
      } else {
        // Para archivos con otros formatos, usar formato consistente
        newImageName = `image_${imageIndex}_${timestamp}.${validExtension}`;
      }
      
      const newImagePath = path.join(imagesDir, newImageName);
      
      // Descargar la nueva imagen con reintentos
      let downloadSuccess = false;
      let attemptCount = 0;
      const maxAttempts = Math.min(5, urlsToUse.length); // M√°ximo 5 intentos
      
      // Crear ruta temporal para la nueva imagen
      const tempImagePath = newImagePath.replace('.jpg', '_temp.jpg');
      
      while (!downloadSuccess && attemptCount < maxAttempts) {
        try {
          const attemptIndex = (randomIndex + attemptCount) % urlsToUse.length;
          const attemptUrl = urlsToUse[attemptIndex];
          console.log(`üì• Intento ${attemptCount + 1}/${maxAttempts} descargando desde: ${attemptUrl.substring(0, 80)}...`);
          
          // Descargar en archivo temporal primero
          await downloadImageFromUrl(attemptUrl, tempImagePath);
          downloadSuccess = true;
          console.log(`‚úÖ Descarga exitosa en intento ${attemptCount + 1}`);
        } catch (error) {
          attemptCount++;
          console.log(`‚ùå Fallo en intento ${attemptCount}: ${error.message}`);
          if (attemptCount < maxAttempts) {
            console.log(`üîÑ Reintentando con otra URL...`);
          }
        }
      }
      
      if (!downloadSuccess) {
        // Limpiar archivo temporal si fall√≥ la descarga
        if (fs.existsSync(tempImagePath)) {
          fs.unlinkSync(tempImagePath);
          console.log(`üóëÔ∏è Archivo temporal borrado tras fallo: ${tempImagePath}`);
        }
        console.log(`‚ùå No se pudo descargar ninguna imagen despu√©s de ${maxAttempts} intentos`);
        return res.status(500).json({ error: 'No se pudo descargar una nueva imagen despu√©s de varios intentos' });
      }

      // Solo borrar la imagen anterior DESPU√âS de confirmar que la nueva se descarg√≥ exitosamente
      if (fs.existsSync(currentImagePath)) {
        fs.unlinkSync(currentImagePath);
        console.log(`üóëÔ∏è Imagen anterior borrada: ${currentImagePath}`);
      }
      
      // Mover imagen temporal a ubicaci√≥n final
      fs.renameSync(tempImagePath, newImagePath);
      console.log(`üìÅ Imagen temporal movida a ubicaci√≥n final: ${newImagePath}`);
      
      // Actualizar metadata para rastrear URL original
      const metadataFilePath = path.join(imagesDir, 'images_metadata.json');
      let metadata = {};
      
      if (fs.existsSync(metadataFilePath)) {
        try {
          metadata = JSON.parse(fs.readFileSync(metadataFilePath, 'utf8'));
        } catch (error) {
          console.log('‚ö†Ô∏è Error leyendo metadata existente, creando nuevo');
        }
      }
      
      metadata[newImageName] = {
        originalUrl: imageUrl,
        keywords: searchQuery,
        timestamp: timestamp,
        refreshed: true
      };
      
      try {
        fs.writeFileSync(metadataFilePath, JSON.stringify(metadata, null, 2));
        console.log(`üìù Metadata actualizada para ${newImageName}`);
      } catch (error) {
        console.log('‚ö†Ô∏è Error guardando metadata:', error.message);
      }
      
      console.log(`‚úÖ Nueva imagen descargada: ${newImagePath}`);
      console.log(`üéØ Mapeo mantenido: posici√≥n visual ${imageIndex} ‚Üí ${newImageName}`);
      
      // Devolver la informaci√≥n de la nueva imagen
      res.json({ 
        success: true,
        message: `Imagen ${imageIndex + 1} refrescada exitosamente`,
        newImageUrl: `/outputs/${normalizedFolderName}/seccion_${sectionNum}/${newImageName}`,
        filename: newImageName,
        imageIndex: imageIndex
      });
    } else {
      res.status(404).json({ error: 'No se pudo encontrar una nueva imagen' });
    }

  } catch (error) {
    console.error('‚ùå Error al refrescar imagen:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

// ================================
// ENDPOINTS PARA GENERACI√ìN DE VIDEO
// ================================

// Almac√©n de progreso en memoria para cada sesi√≥n de video
const videoProgressStore = new Map();

// Funci√≥n helper para actualizar progreso de video
function updateVideoProgress(sessionId, percent, message) {
  videoProgressStore.set(sessionId, { percent, message, timestamp: Date.now() });
  console.log(`[VIDEO-${sessionId}] ${Math.round(percent)}% - ${message}`);
}

// Endpoint para progreso de video en tiempo real usando Server-Sent Events
app.get('/video-progress/:sessionId', (req, res) => {
  const sessionId = req.params.sessionId;
  
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Cache-Control'
  });

  // Funci√≥n para enviar progreso
  const sendProgress = (data) => {
    res.write(`data: ${JSON.stringify(data)}\n\n`);
  };

  // Enviar progreso inicial
  const initialProgress = videoProgressStore.get(sessionId) || { percent: 0, message: 'Iniciando generaci√≥n de video...' };
  sendProgress(initialProgress);

  // Verificar progreso cada segundo
  const progressInterval = setInterval(() => {
    const progress = videoProgressStore.get(sessionId);
    if (progress) {
      sendProgress(progress);
      
      // Si est√° completo, limpiar despu√©s de un tiempo
      if (progress.percent >= 100) {
        setTimeout(() => {
          videoProgressStore.delete(sessionId);
          clearInterval(progressInterval);
        }, 30000); // Limpiar despu√©s de 30 segundos
      }
    }
  }, 1000);

  // Limpiar al cerrar conexi√≥n
  req.on('close', () => {
    clearInterval(progressInterval);
  });
});

// Endpoint para generar video desde el proyecto
app.post('/generate-project-video', async (req, res) => {
  const sessionId = Date.now().toString(); // ID √∫nico para esta sesi√≥n
  
  try {
    updateVideoProgress(sessionId, 0, 'Iniciando procesamiento de video...');
    
    const { 
      folderName, 
      duration = 3, 
      animationType = 'zoom-out', 
      quality = 'standard' 
    } = req.body;
    
    // Enviar sessionId al cliente para que pueda conectarse al progreso
    res.setHeader('X-Video-Session-ID', sessionId);
    
    if (!folderName) {
      return res.status(400).json({ error: 'Nombre de carpeta requerido' });
    }

    console.log(`üé¨ Iniciando generaci√≥n de video para proyecto: ${folderName}`);
    console.log(`üé¨ Configuraci√≥n: duraci√≥n=${duration}s, animaci√≥n=${animationType}, calidad=${quality}`);

    updateVideoProgress(sessionId, 5, 'Analizando estructura del proyecto...');
    
    // Normalizar nombre de la carpeta
    const normalizedFolderName = createSafeFolderName(folderName);
    const projectPath = path.join(process.cwd(), 'public', 'outputs', normalizedFolderName);
    
    if (!fs.existsSync(projectPath)) {
      return res.status(404).json({ error: 'Proyecto no encontrado' });
    }

    // Organizar archivos por secciones
    updateVideoProgress(sessionId, 10, 'Organizando archivos por secciones...');
    const secciones = await organizarArchivosPorSecciones(projectPath);
    
    if (secciones.length === 0) {
      return res.status(404).json({ error: 'No se encontraron secciones con im√°genes' });
    }

    console.log(`üé¨ Encontradas ${secciones.length} secciones para procesar`);
    updateVideoProgress(sessionId, 15, `Encontradas ${secciones.length} secciones para procesar`);
    
    // Generar video
    const outputPath = await procesarVideoCompleto(secciones, normalizedFolderName, duration, animationType, quality, sessionId);
    
    // Verificar que el archivo existe antes de enviarlo
    if (!fs.existsSync(outputPath)) {
      throw new Error('El archivo de video no se gener√≥ correctamente');
    }
    
    console.log('üé¨ Enviando video al cliente');
    updateVideoProgress(sessionId, 100, '¬°Video completado y listo para descarga!');
    
    const filename = `${normalizedFolderName}_video_completo.mp4`;
    
    res.download(outputPath, filename, (err) => {
      if (err) {
        console.error('‚ùå Error enviando video:', err);
      } else {
        console.log('‚úÖ Video enviado exitosamente');
        
        // Limpiar archivo temporal despu√©s de un tiempo
        setTimeout(() => {
          try {
            if (fs.existsSync(outputPath)) {
              fs.unlinkSync(outputPath);
              console.log('üóëÔ∏è Archivo temporal de video limpiado');
            }
          } catch (e) {
            console.log('‚ö†Ô∏è No se pudo limpiar archivo temporal:', e.message);
          }
        }, 60000); // Limpiar despu√©s de 1 minuto
      }
    });

  } catch (error) {
    console.error('‚ùå Error al procesar video:', error);
    updateVideoProgress(sessionId, 0, `Error: ${error.message}`);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

// Endpoint para generar video simple (sin animaciones)
app.post('/generate-simple-video', async (req, res) => {
  try {
    const { folderName } = req.body;
    
    if (!folderName) {
      return res.status(400).json({ error: 'Nombre de carpeta requerido' });
    }

    console.log(`üé¨ Iniciando generaci√≥n de video simple para proyecto: ${folderName}`);
    console.log(`üé¨ Configuraci√≥n: duraci√≥n autom√°tica basada en audio (sin animaciones)`);
    
    // Normalizar nombre de la carpeta
    const normalizedFolderName = createSafeFolderName(folderName);
    const projectPath = path.join(process.cwd(), 'public', 'outputs', normalizedFolderName);
    
    if (!fs.existsSync(projectPath)) {
      return res.status(404).json({ error: 'Proyecto no encontrado' });
    }

    // Organizar archivos por secciones
    const secciones = await organizarArchivosPorSecciones(projectPath);
    
    if (secciones.length === 0) {
      return res.status(404).json({ error: 'No se encontraron secciones con im√°genes' });
    }

    console.log(`üé¨ Encontradas ${secciones.length} secciones para procesar (modo simple)`);
    
    // Generar video simple (sin animaciones) - sin par√°metro duration
    const outputPath = await procesarVideoSimple(secciones, normalizedFolderName);
    
    // Verificar que el archivo existe antes de enviarlo
    if (!fs.existsSync(outputPath)) {
      throw new Error('El archivo de video no se gener√≥ correctamente');
    }
    
    console.log('üé¨ Enviando video simple al cliente');
    
    const filename = `${normalizedFolderName}_video_simple.mp4`;
    
    res.download(outputPath, filename, (err) => {
      if (err) {
        console.error('‚ùå Error enviando video simple:', err);
      } else {
        console.log('‚úÖ Video simple enviado exitosamente');
        
        // Limpiar archivo temporal despu√©s de un tiempo
        setTimeout(() => {
          try {
            if (fs.existsSync(outputPath)) {
              fs.unlinkSync(outputPath);
              console.log('üóëÔ∏è Archivo temporal de video simple limpiado');
            }
          } catch (e) {
            console.log('‚ö†Ô∏è No se pudo limpiar archivo temporal:', e.message);
          }
        }, 60000); // Limpiar despu√©s de 1 minuto
      }
    });

  } catch (error) {
    console.error('‚ùå Error al procesar video simple:', error);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

// Funci√≥n para organizar archivos por secciones desde el proyecto
async function organizarArchivosPorSecciones(projectPath) {
  const secciones = [];
  
  try {
    console.log(`üîç Explorando directorio del proyecto: ${projectPath}`);
    const items = fs.readdirSync(projectPath);
    console.log(`üìÅ Elementos encontrados en ${projectPath}:`, items);
    
    // Buscar carpetas de secciones
    for (const item of items) {
      const itemPath = path.join(projectPath, item);
      const stats = fs.statSync(itemPath);
      
      console.log(`üîç Revisando elemento: ${item} (${stats.isDirectory() ? 'directorio' : 'archivo'})`);
      
      if (stats.isDirectory() && item.startsWith('seccion_')) {
        console.log(`üéØ Carpeta de secci√≥n encontrada: ${item}`);
        const numeroSeccion = parseInt(item.replace('seccion_', ''));
        const imagenes = [];
        const audios = [];
        
        // Buscar archivos en la carpeta de secci√≥n
        const sectionFiles = fs.readdirSync(itemPath);
        console.log(`üìÇ Archivos en ${item}:`, sectionFiles);
        
        for (const file of sectionFiles) {
          const filePath = path.join(itemPath, file);
          const fileStats = fs.statSync(filePath);
          
          if (fileStats.isFile()) {
            const ext = path.extname(file).toLowerCase();
            console.log(`üìÑ Archivo: ${file} - Extensi√≥n: ${ext}`);
            
            if (['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'].includes(ext)) {
              imagenes.push({
                path: filePath,
                name: file,
                mtime: fileStats.mtime
              });
              console.log(`üñºÔ∏è Imagen agregada: ${file}`);
            } else if (['.mp3', '.wav', '.m4a', '.aac', '.ogg'].includes(ext)) {
              audios.push({
                path: filePath,
                name: file
              });
              console.log(`üéµ Audio agregado: ${file}`);
            } else {
              console.log(`‚ö†Ô∏è Archivo ignorado (extensi√≥n no reconocida): ${file}`);
            }
          }
        }
        
        if (imagenes.length > 0) {
          console.log(`üîç DEBUG: Ordenando ${imagenes.length} im√°genes en secci√≥n ${numeroSeccion}`);
          console.log(`üîç DEBUG: Antes de ordenar:`, imagenes.map(img => img.name));
          
          // Ordenar im√°genes por nombre para mantener orden consistente
          imagenes.sort((a, b) => a.name.localeCompare(b.name, undefined, { numeric: true }));
          
          console.log(`üîç DEBUG: Despu√©s de ordenar:`, imagenes.map(img => img.name));
          
          console.log(`üìÅ Secci√≥n ${numeroSeccion} encontrada: ${imagenes.length} im√°genes, ${audios.length} audios`);
          console.log(`üñºÔ∏è Im√°genes en secci√≥n ${numeroSeccion}:`, imagenes.map(img => img.name));
          console.log(`üéµ Audios en secci√≥n ${numeroSeccion}:`, audios.map(aud => aud.name));
          
          secciones.push({
            numero: numeroSeccion,
            nombre: `Secci√≥n ${numeroSeccion}`,
            imagenes: imagenes,
            audios: audios,
            path: itemPath
          });
        } else {
          console.log(`‚ö†Ô∏è Secci√≥n ${numeroSeccion} no tiene im√°genes v√°lidas`);
        }
      } else if (stats.isDirectory()) {
        console.log(`üìÅ Directorio ignorado (no es secci√≥n): ${item}`);
      }
    }
    
    // Ordenar secciones por n√∫mero
    secciones.sort((a, b) => a.numero - b.numero);
    
    console.log(`üé¨ Secciones encontradas: ${secciones.length}`);
    secciones.forEach(seccion => {
      console.log(`  - ${seccion.nombre}: ${seccion.imagenes.length} im√°genes, ${seccion.audios.length} audios`);
    });
    
    console.log(`üìä Total: ${secciones.length} secciones, ${secciones.reduce((total, s) => total + s.imagenes.length, 0)} im√°genes totales`);
    
    return secciones;
    
  } catch (error) {
    console.error('‚ùå Error organizando archivos:', error);
    return [];
  }
}

// Funci√≥n principal para procesar video completo
async function procesarVideoCompleto(secciones, projectName, duration, animationType, quality, sessionId) {
  const outputDir = path.join(process.cwd(), 'temp');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  const finalOutputPath = path.join(outputDir, `${projectName}_video_${Date.now()}.mp4`);
  const videosSeccionesTemp = [];
  
  try {
    // Procesar cada secci√≥n individualmente
    for (let i = 0; i < secciones.length; i++) {
      const seccion = secciones[i];
      const progresoBase = 20 + (i * 60 / secciones.length);
      
      updateVideoProgress(sessionId, progresoBase, `Procesando ${seccion.nombre}...`);
      
      const videoSeccionPath = await procesarSeccionVideo(seccion, duration, animationType, quality, sessionId, progresoBase, secciones.length);
      
      if (videoSeccionPath && fs.existsSync(videoSeccionPath)) {
        videosSeccionesTemp.push(videoSeccionPath);
        console.log(`‚úÖ ${seccion.nombre} procesada: ${videoSeccionPath}`);
      }
    }
    
    if (videosSeccionesTemp.length === 0) {
      throw new Error('No se pudieron procesar las secciones');
    }
    
    // Combinar todas las secciones
    updateVideoProgress(sessionId, 85, 'Combinando todas las secciones...');
    await combinarSeccionesVideo(videosSeccionesTemp, finalOutputPath, sessionId);
    
    // Limpiar videos temporales de secciones
    videosSeccionesTemp.forEach(video => {
      try {
        if (fs.existsSync(video)) {
          fs.unlinkSync(video);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo limpiar video temporal:', e.message);
      }
    });
    
    return finalOutputPath;
    
  } catch (error) {
    // Limpiar videos temporales en caso de error
    videosSeccionesTemp.forEach(video => {
      try {
        if (fs.existsSync(video)) {
          fs.unlinkSync(video);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo limpiar video temporal:', e.message);
      }
    });
    throw error;
  }
}

// Funci√≥n para procesar una secci√≥n individual
async function procesarSeccionVideo(seccion, duration, animationType, quality, sessionId, progresoBase, totalSecciones) {
  try {
    const outputPath = path.join(process.cwd(), 'temp', `seccion_${seccion.numero}_${Date.now()}.mp4`);
    
    // Validar que la secci√≥n tiene im√°genes
    if (!seccion.imagenes || seccion.imagenes.length === 0) {
      throw new Error(`${seccion.nombre} no tiene im√°genes para procesar`);
    }
    
    // Buscar archivo de audio para esta secci√≥n
    let audioPath = null;
    let finalDuration = duration; // Duraci√≥n por defecto
    
    if (seccion.audios && seccion.audios.length > 0) {
      // Usar el primer archivo de audio encontrado
      audioPath = seccion.audios[0].path;
      if (fs.existsSync(audioPath)) {
        console.log(`üéµ Audio encontrado para ${seccion.nombre}: ${audioPath}`);
        
        // Obtener duraci√≥n del audio usando ffprobe
        try {
          const audioDuration = await getAudioDuration(audioPath);
          if (audioDuration > 0) {
            // Calcular duraci√≥n por imagen bas√°ndose en el audio
            finalDuration = audioDuration / seccion.imagenes.length;
            console.log(`ÔøΩ Duraci√≥n del audio: ${audioDuration} segundos`);
            console.log(`üìê Duraci√≥n calculada por imagen: ${finalDuration.toFixed(2)} segundos`);
          } else {
            console.warn(`‚ö†Ô∏è No se pudo obtener duraci√≥n v√°lida del audio, usando duraci√≥n fija: ${duration}s`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Error obteniendo duraci√≥n del audio: ${error.message}, usando duraci√≥n fija: ${duration}s`);
        }
      } else {
        console.warn(`‚ö†Ô∏è Archivo de audio no existe: ${audioPath}`);
        audioPath = null;
      }
    } else {
      console.log(`üì¢ No se encontr√≥ audio para ${seccion.nombre}`);
    }
    
    // Validar que todas las im√°genes existen y obtener sus rutas absolutas
    const imagenesValidadas = [];
    for (const imagen of seccion.imagenes) {
      let imagePath = imagen.path;
      
      // Si la ruta no es absoluta, convertirla
      if (!path.isAbsolute(imagePath)) {
        imagePath = path.resolve(imagePath);
      }
      
      if (!fs.existsSync(imagePath)) {
        console.error(`‚ùå Imagen no encontrada: ${imagePath}`);
        throw new Error(`Imagen no encontrada: ${imagePath}`);
      }
      
      // Verificar que es un archivo de imagen v√°lido
      const ext = path.extname(imagePath).toLowerCase();
      if (!['.jpg', '.jpeg', '.png', '.bmp', '.gif', '.webp'].includes(ext)) {
        console.error(`‚ùå Formato de imagen no soportado: ${ext}`);
        throw new Error(`Formato de imagen no soportado: ${ext}`);
      }
      
      imagenesValidadas.push(imagePath);
      console.log(`‚úÖ Imagen validada: ${imagePath}`);
    }
    
    console.log(`üé¨ Procesando ${seccion.nombre} con ${imagenesValidadas.length} im√°genes validadas${audioPath ? ' y audio' : ''}`);
    console.log(`‚è±Ô∏è Duraci√≥n por imagen: ${finalDuration.toFixed(2)} segundos`);
    
    // Procesar cada imagen con transiciones usando Canvas
    const transitionTypes = ['zoom-in', 'zoom-out', 'pan-right', 'pan-left', 'fade-in', 'slide-in-left', 'slide-in-right', 'rotate-zoom'];
    const framesPorSegundo = 30;
    
    if (imagenesValidadas.length === 1) {
      // Una sola imagen - generar directamente al archivo final
      const imagePath = imagenesValidadas[0];
      const transitionType = 'zoom-out'; // Usar zoom-out para imagen √∫nica
      
      console.log(`üé¨ Procesando imagen √∫nica con transici√≥n ${transitionType}`);
      
      // Generar video con transici√≥n
      await generateImageVideoWithTransitions(imagePath, outputPath, finalDuration, transitionType, framesPorSegundo);
      
      // Agregar audio si existe
      if (audioPath) {
        const tempVideo = path.join(path.dirname(outputPath), `temp_${path.basename(outputPath)}`);
        fs.renameSync(outputPath, tempVideo);
        
        const ffmpegArgs = ['-i', tempVideo, '-i', audioPath, '-c:v', 'copy', '-c:a', 'aac', '-shortest', outputPath];
        
        await new Promise((resolve, reject) => {
          const ffmpeg = spawn('ffmpeg', ffmpegArgs, { stdio: 'pipe' });
          ffmpeg.on('close', (code) => {
            if (code === 0) {
              // Limpiar archivo temporal
              if (fs.existsSync(tempVideo)) fs.unlinkSync(tempVideo);
              resolve();
            } else {
              reject(new Error(`FFmpeg fall√≥ con c√≥digo ${code}`));
            }
          });
        });
      }
    } else {
      // M√∫ltiples im√°genes - generar videos temporales y concatenar
      const tempVideos = [];
      
      for (let i = 0; i < imagenesValidadas.length; i++) {
        const imagePath = imagenesValidadas[i];
        const transitionType = 'zoom-out'; // Usar siempre zoom-out
        const tempVideoPath = path.join(path.dirname(outputPath), `temp_${i}_${Date.now()}.mp4`);
        
        console.log(`üé¨ Procesando imagen ${i + 1}/${imagenesValidadas.length} con transici√≥n ${transitionType}`);
        
        // Generar video con transici√≥n para esta imagen
        await generateImageVideoWithTransitions(imagePath, tempVideoPath, finalDuration, transitionType, framesPorSegundo);
        tempVideos.push(tempVideoPath);
      }
      
      // Concatenar videos con transiciones de desvanecimiento
      await concatenateVideosWithCrossfade(tempVideos, audioPath, outputPath);
      
      // Limpiar archivos temporales
      tempVideos.forEach(video => {
        if (fs.existsSync(video)) fs.unlinkSync(video);
      });
    }
    
    console.log(`‚úÖ Video de secci√≥n ${seccion.nombre} generado con transiciones: ${outputPath}`);
    return outputPath; // Devolver la ruta del video generado
        
  } catch (error) {
    console.error(`‚ùå Error en procesarSeccionVideo:`, error);
    throw error;
  }
}

// Funci√≥n auxiliar para obtener la duraci√≥n del audio
function getAudioDuration(audioPath) {
  return new Promise((resolve, reject) => {
    const ffprobeProcess = spawn('ffprobe', [
      '-v', 'quiet',
      '-show_entries', 'format=duration',
      '-of', 'csv=p=0',
      audioPath
    ]);
    
    let ffprobeOutput = '';
    
    ffprobeProcess.stdout.on('data', (data) => {
      ffprobeOutput += data.toString();
    });
    
    ffprobeProcess.on('close', (code) => {
      if (code === 0) {
        const duration = parseFloat(ffprobeOutput.trim());
        resolve(duration);
      } else {
        reject(new Error(`ffprobe fall√≥ con c√≥digo ${code}`));
      }
    });
    
    ffprobeProcess.on('error', (err) => {
      reject(err);
    });
  });
}

// Funci√≥n para combinar todas las secciones
async function combinarSeccionesVideo(videosSeccionesTemp, finalOutputPath, sessionId) {
  return new Promise((resolve, reject) => {
    updateVideoProgress(sessionId, 90, 'Concatenando todas las secciones...');
    
    const listFile = path.join(process.cwd(), 'temp', `concat_list_${Date.now()}.txt`);
    const listContent = videosSeccionesTemp.map(video => `file '${video}'`).join('\n');
    
    fs.writeFileSync(listFile, listContent);
    
    const args = [
      '-f', 'concat',
      '-safe', '0',
      '-i', listFile,
      '-c', 'copy',
      '-y',
      finalOutputPath
    ];
    
    const ffmpegProcess = spawn('ffmpeg', args);
    
    let stderrData = '';
    
    ffmpegProcess.stderr.on('data', (data) => {
      stderrData += data.toString();
    });
    
    ffmpegProcess.on('close', (code) => {
      // Limpiar archivo de lista temporal
      try {
        if (fs.existsSync(listFile)) {
          fs.unlinkSync(listFile);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo limpiar archivo de lista:', e.message);
      }
      
      if (code === 0) {
        console.log('‚úÖ Video final concatenado exitosamente');
        updateVideoProgress(sessionId, 95, 'Video final generado exitosamente');
        resolve(finalOutputPath);
      } else {
        console.error('‚ùå Error en concatenaci√≥n FFmpeg:', stderrData);
        reject(new Error(`FFmpeg fall√≥ con c√≥digo ${code}`));
      }
    });
    
    ffmpegProcess.on('error', (err) => {
      console.error('‚ùå Error ejecutando FFmpeg:', err);
      reject(err);
    });
  });
}

// Funci√≥n para procesar video simple (sin animaciones)
async function procesarVideoSimple(secciones, projectName) {
  const outputDir = path.join(process.cwd(), 'temp');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  const finalOutputPath = path.join(outputDir, `${projectName}_video_simple_${Date.now()}.mp4`);
  const videosSeccionesTemp = [];
  
  try {
    console.log(`üé¨ Procesando video simple con ${secciones.length} secciones`);
    
    // Procesar cada secci√≥n individualmente (sin par√°metro duration)
    for (let i = 0; i < secciones.length; i++) {
      const seccion = secciones[i];
      
      console.log(`üìπ Procesando secci√≥n ${i + 1}/${secciones.length}: ${seccion.nombre}`);
      
      const videoSeccionPath = await procesarSeccionVideoSimple(seccion);
      
      if (videoSeccionPath && fs.existsSync(videoSeccionPath)) {
        videosSeccionesTemp.push(videoSeccionPath);
        console.log(`‚úÖ ${seccion.nombre} procesada (simple): ${videoSeccionPath}`);
      }
    }
    
    if (videosSeccionesTemp.length === 0) {
      throw new Error('No se pudieron procesar las secciones');
    }
    
    // Combinar todas las secciones
    console.log('üîó Combinando todas las secciones (video simple)...');
    await combinarSeccionesVideoSimple(videosSeccionesTemp, finalOutputPath);
    
    // Limpiar videos temporales de secciones
    videosSeccionesTemp.forEach(video => {
      try {
        if (fs.existsSync(video)) {
          fs.unlinkSync(video);
          console.log(`üóëÔ∏è Video temporal limpiado: ${path.basename(video)}`);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo limpiar video temporal:', e.message);
      }
    });
    
    return finalOutputPath;
    
  } catch (error) {
    // Limpiar videos temporales en caso de error
    videosSeccionesTemp.forEach(video => {
      try {
        if (fs.existsSync(video)) {
          fs.unlinkSync(video);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo limpiar video temporal:', e.message);
      }
    });
    throw error;
  }
}

// Funci√≥n para procesar una secci√≥n individual sin animaciones
async function procesarSeccionVideoSimple(seccion) {
  try {
    const outputPath = path.join(process.cwd(), 'temp', `seccion_simple_${seccion.numero}_${Date.now()}.mp4`);
    
    // Validar que la secci√≥n tiene im√°genes
    if (!seccion.imagenes || seccion.imagenes.length === 0) {
      throw new Error(`${seccion.nombre} no tiene im√°genes para procesar`);
    }
    
    // Buscar archivo de audio para esta secci√≥n
    let audioPath = null;
    let finalDuration = 3; // Duraci√≥n por defecto si no hay audio (3 segundos por imagen)
    
    if (seccion.audios && seccion.audios.length > 0) {
      // Usar el primer archivo de audio encontrado
      audioPath = seccion.audios[0].path;
      if (fs.existsSync(audioPath)) {
        console.log(`üéµ Audio encontrado para ${seccion.nombre}: ${audioPath}`);
        
        // Obtener duraci√≥n del audio usando ffprobe
        try {
          const audioDuration = await getAudioDuration(audioPath);
          if (audioDuration > 0) {
            // ‚úÖ CORREGIDO: No dividir la duraci√≥n, usar duraci√≥n completa
            // Calcular duraci√≥n por imagen para que el video dure lo mismo que el audio
            finalDuration = audioDuration / seccion.imagenes.length;
            console.log(`üéµ Duraci√≥n del audio: ${audioDuration.toFixed(2)} segundos`);
            console.log(`üìê Duraci√≥n calculada por imagen: ${finalDuration.toFixed(2)} segundos`);
            console.log(`üìê Duraci√≥n total del video: ${(finalDuration * seccion.imagenes.length).toFixed(2)} segundos`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è No se pudo obtener duraci√≥n del audio: ${error.message}`);
        }
      } else {
        console.warn(`‚ö†Ô∏è Archivo de audio no existe: ${audioPath}`);
        audioPath = null;
      }
    } else {
      console.log(`üì¢ No se encontr√≥ audio para ${seccion.nombre}, usando duraci√≥n por defecto: ${finalDuration}s por imagen`);
    }
    
    // Validar que todas las im√°genes existen
    const imagenesValidadas = [];
    console.log(`üîç DEBUG: Procesando im√°genes de ${seccion.nombre}:`);
    console.log(`üîç DEBUG: seccion.imagenes array:`, seccion.imagenes.map(img => img.name));
    
    for (const imagen of seccion.imagenes) {
      let imagePath = imagen.path;
      
      console.log(`üîç DEBUG: Procesando imagen: ${imagen.name} - Path: ${imagePath}`);
      
      // Si la ruta no es absoluta, convertirla
      if (!path.isAbsolute(imagePath)) {
        imagePath = path.resolve(imagePath);
      }
      
      if (!fs.existsSync(imagePath)) {
        console.error(`‚ùå Imagen no encontrada: ${imagePath}`);
        throw new Error(`Imagen no encontrada: ${imagePath}`);
      }
      
      // Verificar que es un archivo de imagen v√°lido
      const ext = path.extname(imagePath).toLowerCase();
      if (!['.jpg', '.jpeg', '.png', '.bmp', '.gif', '.webp'].includes(ext)) {
        console.error(`‚ùå Formato de imagen no soportado: ${ext}`);
        throw new Error(`Formato de imagen no soportado: ${ext}`);
      }
      
      imagenesValidadas.push(imagePath);
      console.log(`‚úÖ Imagen validada: ${path.basename(imagePath)} (${imagenesValidadas.length}/${seccion.imagenes.length})`);
    }
    
    console.log(`üîç DEBUG: Orden final de im√°genes para ${seccion.nombre}:`);
    imagenesValidadas.forEach((img, index) => {
      console.log(`  ${index + 1}. ${path.basename(img)}`);
    });
    
    console.log(`üìπ Procesando ${seccion.nombre} con ${imagenesValidadas.length} im√°genes validadas${audioPath ? ' y audio' : ''} (SIN ANIMACIONES)`);
    
    // Crear video simple usando solo im√°genes est√°ticas
    await generarVideoSimpleConImagenesOptimizado(imagenesValidadas, audioPath, outputPath, finalDuration);
    
    console.log(`‚úÖ Video simple de secci√≥n ${seccion.nombre} generado: ${outputPath}`);
    return outputPath;
        
  } catch (error) {
    console.error(`‚ùå Error en procesarSeccionVideoSimple:`, error);
    throw error;
  }
}

// Funci√≥n para generar video simple con im√°genes est√°ticas
async function generarVideoSimpleConImagenes(imagenes, audioPath, outputPath, duracionPorImagen) {
  return new Promise((resolve, reject) => {
    console.log(`üìπ Generando video simple con ${imagenes.length} im√°genes est√°ticas`);
    console.log(`‚è±Ô∏è Duraci√≥n por imagen: ${duracionPorImagen.toFixed(2)} segundos`);
    
    // ‚úÖ NUEVO ENFOQUE: Crear lista de archivos para concat demuxer pero sin audio
    const listFile = path.join(path.dirname(outputPath), `imagelist_${Date.now()}.txt`);
    
    // Verificar que todas las im√°genes existen
    console.log(`üîç Verificando existencia de ${imagenes.length} im√°genes:`);
    for (let i = 0; i < imagenes.length; i++) {
      const imagePath = imagenes[i];
      if (fs.existsSync(imagePath)) {
        console.log(`‚úÖ Imagen ${i+1}: ${path.basename(imagePath)} - EXISTE`);
      } else {
        console.error(`‚ùå Imagen ${i+1}: ${path.basename(imagePath)} - NO EXISTE`);
        return reject(new Error(`Imagen no encontrada: ${imagePath}`));
      }
    }
    
    // Crear lista de concatenaci√≥n con duraciones precisas
    const imageList = imagenes.map(imagePath => {
      return `file '${imagePath.replace(/\\/g, '/')}'
duration ${duracionPorImagen.toFixed(3)}`;
    }).join('\n');
    
    // Agregar la √∫ltima imagen una vez m√°s sin duraci√≥n (requerimiento de concat demuxer)
    const finalImageList = imageList + `\nfile '${imagenes[imagenes.length - 1].replace(/\\/g, '/')}'`;
    
    fs.writeFileSync(listFile, finalImageList);
    console.log(`üìù Lista de im√°genes creada: ${listFile}`);
    console.log(`ÔøΩ Contenido de la lista (${imagenes.length} im√°genes):`);
    console.log(finalImageList);
    
    // Usar spawn directo como VideoCreator para m√°xima velocidad
    const args = [
      '-f', 'concat',
      '-safe', '0',
      '-i', listFile
    ];
    
    // Si hay audio, agregarlo
    if (audioPath) {
      args.push('-i', audioPath);
      console.log(`üéµ Audio agregado: ${path.basename(audioPath)}`);
    }
    
    // Configuraci√≥n optimizada VideoCreator style
    args.push(
      '-vf', 'scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2:black',
      '-c:v', 'libx264',
      '-preset', 'fast',
      '-crf', '23',
      '-pix_fmt', 'yuv420p',
      '-movflags', '+faststart'
    );
    
    // Si hay audio, configurarlo
    if (audioPath) {
      args.push(
        '-c:a', 'aac',
        '-b:a', '128k',
        '-map', '0:v',  // Video del concat
        '-map', '1:a'   // Audio del segundo input
      );
    }
    
    args.push('-y', outputPath);
    
    console.log('üìπ Comando FFmpeg (VideoCreator style):', `ffmpeg ${args.join(' ')}`);
    
    const ffmpegProcess = spawn('ffmpeg', args);
    
    let stderrData = '';
    
    ffmpegProcess.stderr.on('data', (data) => {
      stderrData += data.toString();
      
      // Extraer progreso del stderr
      const progressMatch = stderrData.match(/time=(\d{2}):(\d{2}):(\d{2})/);
      if (progressMatch) {
        const [, hours, minutes, seconds] = progressMatch;
        const currentTime = parseInt(hours) * 3600 + parseInt(minutes) * 60 + parseInt(seconds);
        const totalTime = duracionPorImagen * imagenes.length;
        const percent = Math.min((currentTime / totalTime) * 100, 100);
        
        if (percent > 0) {
          console.log(`‚è≥ Progreso video simple: ${Math.round(percent)}%`);
        }
      }
    });
    
    ffmpegProcess.on('close', (code) => {
      // Limpiar archivo de lista temporal
      try {
        if (fs.existsSync(listFile)) {
          fs.unlinkSync(listFile);
          console.log('üóëÔ∏è Archivo de lista temporal limpiado');
        }
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo limpiar archivo de lista:', e.message);
      }
      
      if (code === 0) {
        console.log('‚úÖ Video simple generado exitosamente con m√©todo VideoCreator');
        
        // Verificar propiedades del video generado
        if (fs.existsSync(outputPath)) {
          const stats = fs.statSync(outputPath);
          console.log(`üìä Archivo generado: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
          
          // Verificar duraci√≥n real
          exec(`ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${outputPath}"`, (error, stdout) => {
            if (!error && stdout.trim()) {
              const actualDuration = parseFloat(stdout.trim());
              console.log(`‚è±Ô∏è Duraci√≥n real del video: ${actualDuration.toFixed(2)} segundos`);
              console.log(`üéØ Duraci√≥n esperada: ${(duracionPorImagen * imagenes.length).toFixed(2)} segundos`);
            }
          });
        }
        
        resolve(outputPath);
      } else {
        console.error('‚ùå Error en FFmpeg (VideoCreator method):', stderrData);
        reject(new Error(`FFmpeg exited with code ${code}: ${stderrData}`));
      }
    });
    
    ffmpegProcess.on('error', (err) => {
      console.error('‚ùå Error ejecutando FFmpeg:', err);
      
      // Limpiar archivo de lista temporal en caso de error
      try {
        if (fs.existsSync(listFile)) {
          fs.unlinkSync(listFile);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo limpiar archivo de lista:', e.message);
      }
      
      reject(err);
    });
  });
}

// Funci√≥n optimizada para generar video simple con im√°genes (m√©todo videos temporales)
async function generarVideoSimpleConImagenesOptimizado(imagenes, audioPath, outputPath, duracionPorImagen) {
  return new Promise(async (resolve, reject) => {
    console.log(`üìπ Generando video simple con ${imagenes.length} im√°genes est√°ticas (m√©todo videos temporales)`);
    console.log(`‚è±Ô∏è Duraci√≥n por imagen: ${duracionPorImagen.toFixed(2)} segundos`);
    
    // Verificar que todas las im√°genes existen
    console.log(`üîç Verificando existencia de ${imagenes.length} im√°genes:`);
    for (let i = 0; i < imagenes.length; i++) {
      const imagePath = imagenes[i];
      if (fs.existsSync(imagePath)) {
        console.log(`‚úÖ Imagen ${i+1}: ${path.basename(imagePath)} - EXISTE`);
      } else {
        console.error(`‚ùå Imagen ${i+1}: ${path.basename(imagePath)} - NO EXISTE`);
        return reject(new Error(`Imagen no encontrada: ${imagePath}`));
      }
    }
    
    const tempDir = path.join(process.cwd(), 'temp');
    const tempVideos = [];
    
    try {
      // Crear videos temporales de cada imagen
      console.log(`üé¨ Creando ${imagenes.length} videos temporales...`);
      
      for (let i = 0; i < imagenes.length; i++) {
        const imagePath = imagenes[i];
        const tempVideoPath = path.join(tempDir, `temp_vid_${i}_${Date.now()}.mp4`);
        
        console.log(`üì∏ Procesando imagen ${i + 1}/${imagenes.length}: ${path.basename(imagePath)}`);
        
        await new Promise((resolveVid, rejectVid) => {
          ffmpeg()
            .input(imagePath)
            .inputOptions([
              '-loop', '1',
              '-t', duracionPorImagen.toString()
            ])
            .outputOptions([
              '-vf', 'scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2:black',
              '-c:v', 'libx264',
              '-profile:v', 'main',
              '-level', '3.1',
              '-crf', '23',
              '-preset', 'fast',
              '-pix_fmt', 'yuv420p',
              '-r', '30'
            ])
            .output(tempVideoPath)
            .on('end', () => {
              console.log(`‚úÖ Video temporal ${i + 1} creado`);
              tempVideos.push(tempVideoPath);
              resolveVid();
            })
            .on('error', (err) => {
              console.error(`‚ùå Error creando video temporal ${i + 1}:`, err);
              rejectVid(err);
            })
            .run();
        });
      }
      
      // Crear lista para concat demuxer
      const listFile = path.join(tempDir, `concat_list_${Date.now()}.txt`);
      const listContent = tempVideos.map(video => `file '${video.replace(/\\/g, '/')}'`).join('\n');
      
      fs.writeFileSync(listFile, listContent);
      console.log(`üìù Lista de concatenaci√≥n creada con ${tempVideos.length} videos`);
      
      // Concatenar videos y agregar audio
      const command = ffmpeg();
      
      command.input(listFile)
        .inputOptions([
          '-f', 'concat',
          '-safe', '0'
        ]);
      
      if (audioPath) {
        command.input(audioPath);
        console.log(`üéµ Audio agregado: ${path.basename(audioPath)}`);
      }
      
      const outputOptions = [
        '-c:v', 'copy', // No recodificar video
        '-movflags', '+faststart'
      ];
      
      if (audioPath) {
        outputOptions.push('-c:a', 'aac');
        outputOptions.push('-b:a', '128k');
        outputOptions.push('-ar', '44100');
        outputOptions.push('-map', '0:v');
        outputOptions.push('-map', '1:a');
      }
      
      command
        .outputOptions(outputOptions)
        .output(outputPath)
        .on('start', (commandLine) => {
          console.log('üìπ Comando FFmpeg (concatenaci√≥n final):', commandLine);
        })
        .on('progress', (progress) => {
          if (progress.percent) {
            console.log(`‚è≥ Progreso concatenaci√≥n: ${Math.round(progress.percent)}%`);
          }
        })
        .on('end', () => {
          console.log('‚úÖ Video simple generado exitosamente');
          
          // Limpiar archivos temporales
          tempVideos.forEach(tempVideo => {
            try {
              if (fs.existsSync(tempVideo)) {
                fs.unlinkSync(tempVideo);
                console.log(`üóëÔ∏è Video temporal limpiado: ${path.basename(tempVideo)}`);
              }
            } catch (e) {
              console.log('‚ö†Ô∏è No se pudo limpiar video temporal:', e.message);
            }
          });
          
          try {
            if (fs.existsSync(listFile)) {
              fs.unlinkSync(listFile);
              console.log('üóëÔ∏è Lista temporal limpiada');
            }
          } catch (e) {
            console.log('‚ö†Ô∏è No se pudo limpiar lista temporal:', e.message);
          }
          
          // Verificar duraci√≥n final
          if (fs.existsSync(outputPath)) {
            const stats = fs.statSync(outputPath);
            console.log(`üìä Archivo generado: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
            
            exec(`ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${outputPath}"`, (error, stdout) => {
              if (!error && stdout.trim()) {
                const actualDuration = parseFloat(stdout.trim());
                console.log(`‚è±Ô∏è Duraci√≥n real del video: ${actualDuration.toFixed(2)} segundos`);
                console.log(`üéØ Duraci√≥n esperada: ${(duracionPorImagen * imagenes.length).toFixed(2)} segundos`);
              }
            });
          }
          
          resolve(outputPath);
        })
        .on('error', (err) => {
          console.error('‚ùå Error en concatenaci√≥n final:', err);
          
          // Limpiar archivos temporales en caso de error
          tempVideos.forEach(tempVideo => {
            try {
              if (fs.existsSync(tempVideo)) {
                fs.unlinkSync(tempVideo);
              }
            } catch (e) {
              // Ignorar errores de limpieza
            }
          });
          
          try {
            if (fs.existsSync(listFile)) {
              fs.unlinkSync(listFile);
            }
          } catch (e) {
            // Ignorar errores de limpieza
          }
          
          reject(err);
        })
        .run();
        
    } catch (error) {
      console.error('‚ùå Error en proceso de generaci√≥n:', error);
      
      // Limpiar archivos temporales en caso de error
      tempVideos.forEach(tempVideo => {
        try {
          if (fs.existsSync(tempVideo)) {
            fs.unlinkSync(tempVideo);
          }
        } catch (e) {
          // Ignorar errores de limpieza
        }
      });
      
      reject(error);
    }
  });
}

// Funci√≥n mejorada para generar video simple con im√°genes est√°ticas
async function generarVideoSimpleConImagenesV2(imagenes, audioPath, outputPath, duracionPorImagen) {
  return new Promise((resolve, reject) => {
    console.log(`üìπ Generando video simple con ${imagenes.length} im√°genes est√°ticas`);
    console.log(`‚è±Ô∏è Duraci√≥n por imagen: ${duracionPorImagen.toFixed(2)} segundos`);
    
    // ‚úÖ NUEVO ENFOQUE: Crear videos individuales y luego concatenarlos
    const tempVideos = [];
    const tempDir = path.join(process.cwd(), 'temp');
    
    // Funci√≥n para crear video de una sola imagen
    const createSingleImageVideo = (imagePath, duration, index) => {
      return new Promise((resolveImg, rejectImg) => {
        const tempVideoPath = path.join(tempDir, `temp_img_${index}_${Date.now()}.mp4`);
        
        console.log(`üñºÔ∏è Creando video para imagen ${index + 1}: ${path.basename(imagePath)}`);
        
        const command = ffmpeg();
        command.input(imagePath)
          .inputOptions([
            '-loop', '1',
            '-t', duration.toString()
          ])
          .outputOptions([
            '-vf', 'scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2:black',
            '-c:v', 'libx264',
            '-profile:v', 'high',
            '-level', '4.0',
            '-crf', '23',
            '-preset', 'fast',
            '-pix_fmt', 'yuv420p',
            '-r', '30',
            '-vsync', 'cfr'
          ])
          .output(tempVideoPath)
          .on('end', () => {
            console.log(`‚úÖ Video temporal ${index + 1} creado: ${path.basename(tempVideoPath)}`);
            resolveImg(tempVideoPath);
          })
          .on('error', (err) => {
            console.error(`‚ùå Error creando video temporal ${index + 1}:`, err);
            rejectImg(err);
          })
          .run();
      });
    };
    
    // Crear videos temporales para cada imagen
    const createAllTempVideos = async () => {
      console.log(`üé¨ Creando ${imagenes.length} videos temporales...`);
      
      for (let i = 0; i < imagenes.length; i++) {
        try {
          const tempVideo = await createSingleImageVideo(imagenes[i], duracionPorImagen, i);
          tempVideos.push(tempVideo);
        } catch (error) {
          throw new Error(`Error creando video temporal ${i + 1}: ${error.message}`);
        }
      }
      
      console.log(`‚úÖ Todos los videos temporales creados: ${tempVideos.length}`);
    };
    
    // Concatenar todos los videos temporales
    const concatenateVideos = () => {
      return new Promise((resolveCat, rejectCat) => {
        console.log(`üîó Concatenando ${tempVideos.length} videos temporales...`);
        
        // Crear lista de concatenaci√≥n para videos
        const listFile = path.join(tempDir, `videolist_${Date.now()}.txt`);
        const videoList = tempVideos.map(video => `file '${video.replace(/\\/g, '/')}'`).join('\n');
        
        fs.writeFileSync(listFile, videoList);
        console.log(`üìù Lista de videos creada: ${listFile}`);
        console.log(`üìù Videos a concatenar:\n${videoList}`);
        
        const command = ffmpeg();
        
        // Concatenar videos
        command.input(listFile)
          .inputOptions([
            '-f', 'concat',
            '-safe', '0'
          ]);
        
        // Agregar audio si existe
        if (audioPath) {
          command.input(audioPath);
        }
        
        const outputOptions = [
          '-c:v', 'copy', // No recodificar video
          '-movflags', '+faststart',
          '-avoid_negative_ts', 'make_zero'
        ];
        
        // Si hay audio, configurarlo
        if (audioPath) {
          outputOptions.push('-c:a', 'aac');
          outputOptions.push('-b:a', '128k');
          outputOptions.push('-ar', '44100');
          outputOptions.push('-map', '0:v'); // Video concatenado
          outputOptions.push('-map', '1:a'); // Audio
        }
        
        command
          .outputOptions(outputOptions)
          .output(outputPath)
          .on('start', (commandLine) => {
            console.log('üìπ Comando FFmpeg para concatenaci√≥n final:', commandLine);
          })
          .on('progress', (progress) => {
            if (progress.percent) {
              console.log(`‚è≥ Progreso concatenaci√≥n: ${Math.round(progress.percent)}%`);
            }
          })
          .on('end', () => {
            console.log('‚úÖ Video final concatenado exitosamente');
            
            // Limpiar archivos temporales
            tempVideos.forEach(tempVideo => {
              try {
                if (fs.existsSync(tempVideo)) {
                  fs.unlinkSync(tempVideo);
                  console.log(`üóëÔ∏è Video temporal limpiado: ${path.basename(tempVideo)}`);
                }
              } catch (e) {
                console.log('‚ö†Ô∏è No se pudo limpiar video temporal:', e.message);
              }
            });
            
            try {
              if (fs.existsSync(listFile)) {
                fs.unlinkSync(listFile);
                console.log('üóëÔ∏è Lista temporal limpiada');
              }
            } catch (e) {
              console.log('‚ö†Ô∏è No se pudo limpiar lista temporal:', e.message);
            }
            
            resolveCat();
          })
          .on('error', (err) => {
            console.error('‚ùå Error en concatenaci√≥n final:', err);
            rejectCat(err);
          })
          .run();
      });
    };
    
    // Ejecutar proceso completo
    createAllTempVideos()
      .then(() => concatenateVideos())
      .then(() => {
        console.log('‚úÖ Video simple generado exitosamente con m√©todo de concatenaci√≥n');
        
        // Verificar duraci√≥n final
        if (fs.existsSync(outputPath)) {
          const stats = fs.statSync(outputPath);
          console.log(`üìä Archivo generado: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
          
          exec(`ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${outputPath}"`, (error, stdout) => {
            if (!error && stdout.trim()) {
              const actualDuration = parseFloat(stdout.trim());
              console.log(`‚è±Ô∏è Duraci√≥n real del video: ${actualDuration.toFixed(2)} segundos`);
              console.log(`üéØ Duraci√≥n esperada: ${(duracionPorImagen * imagenes.length).toFixed(2)} segundos`);
            }
          });
        }
        
        resolve(outputPath);
      })
      .catch((error) => {
        console.error('‚ùå Error en proceso de generaci√≥n:', error);
        
        // Limpiar archivos temporales en caso de error
        tempVideos.forEach(tempVideo => {
          try {
            if (fs.existsSync(tempVideo)) {
              fs.unlinkSync(tempVideo);
            }
          } catch (e) {
            // Ignorar errores de limpieza
          }
        });
        
        reject(error);
      });
  });
}

// Funci√≥n para combinar secciones de video simple
async function combinarSeccionesVideoSimple(videosSeccionesTemp, finalOutputPath) {
  return new Promise((resolve, reject) => {
    console.log('üîó Concatenando todas las secciones del video simple...');
    
    const listFile = path.join(process.cwd(), 'temp', `concat_list_simple_${Date.now()}.txt`);
    const listContent = videosSeccionesTemp.map(video => `file '${video}'`).join('\n');
    
    fs.writeFileSync(listFile, listContent);
    
    const args = [
      '-f', 'concat',
      '-safe', '0',
      '-i', listFile,
      '-c', 'copy',
      '-y',
      finalOutputPath
    ];
    
    const ffmpegProcess = spawn('ffmpeg', args);
    
    let stderrData = '';
    
    ffmpegProcess.stderr.on('data', (data) => {
      stderrData += data.toString();
    });
    
    ffmpegProcess.on('close', (code) => {
      // Limpiar archivo de lista temporal
      try {
        if (fs.existsSync(listFile)) {
          fs.unlinkSync(listFile);
        }
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo limpiar archivo de lista:', e.message);
      }
      
      if (code === 0) {
        console.log('‚úÖ Video simple final concatenado exitosamente');
        resolve(finalOutputPath);
      } else {
        console.error('‚ùå Error en concatenaci√≥n FFmpeg (video simple):', stderrData);
        reject(new Error(`FFmpeg fall√≥ con c√≥digo ${code}`));
      }
    });
    
    ffmpegProcess.on('error', (err) => {
      console.error('‚ùå Error ejecutando FFmpeg (video simple):', err);
      reject(err);
    });
  });
}

// ================================
// FUNCIONES DE ANIMACI√ìN AVANZADAS CON TRANSICIONES
// ================================

// Funci√≥n para generar frames animados usando Canvas con transiciones avanzadas
async function generateAnimatedFrames(imagePath, outputPath, duration, animationType, smoothness = 'standard', useGPU = false) {
  // FPS optimizado seg√∫n el nivel de suavidad seleccionado
  let fps = 25;
  
  if (smoothness === 'standard') {
    if (duration > 10) fps = 20;      // 20 FPS para videos de 10-30s
    if (duration > 30) fps = 15;      // 15 FPS para videos de 30-60s
    if (duration > 60) fps = 10;      // 10 FPS para videos de 1-2 minutos  
    if (duration > 120) fps = 8;      // 8 FPS para videos muy largos (>2 min)
  } else if (smoothness === 'smooth') {
    if (duration > 10) fps = 25;      // 25 FPS para videos de 10-30s
    if (duration > 30) fps = 20;      // 20 FPS para videos de 30-60s
    if (duration > 60) fps = 15;      // 15 FPS para videos de 1-2 minutos  
    if (duration > 120) fps = 12;     // 12 FPS para videos muy largos (>2 min)
  } else if (smoothness === 'ultra') {
    if (duration > 10) fps = 30;      // 30 FPS para videos de 10-30s
    if (duration > 30) fps = 25;      // 25 FPS para videos de 30-60s
    if (duration > 60) fps = 20;      // 20 FPS para videos de 1-2 minutos  
    if (duration > 120) fps = 15;     // 15 FPS para videos muy largos (>2 min)
  }
  
  const totalFrames = duration * fps;
  const tempDir = path.join(process.cwd(), 'temp_frames');
  
  console.log(`üé¨ Generando ${totalFrames} frames a ${fps} FPS para duraci√≥n de ${duration}s (calidad: ${smoothness})`);
  
  // Crear directorio temporal para los frames
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
  }
  
  try {
    // Verificar que es un archivo de imagen v√°lido
    const validImageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    const fileExtension = path.extname(imagePath).toLowerCase();
    
    console.log(`üñºÔ∏è Procesando archivo: ${imagePath}`);
    console.log(`üìÑ Extensi√≥n detectada: "${fileExtension}"`);
    
    if (!validImageExtensions.includes(fileExtension)) {
      throw new Error(`Tipo de imagen no soportado: "${fileExtension}" para archivo ${path.basename(imagePath)}`);
    }
    
    // Verificar que el archivo existe
    if (!fs.existsSync(imagePath)) {
      throw new Error(`Archivo no encontrado: ${imagePath}`);
    }
    
    console.log(`üìÇ Cargando imagen: ${path.basename(imagePath)} (${fileExtension})`);
    
    // Cargar la imagen original
    const image = await loadImage(imagePath);
    
    // Para videos muy largos, usar lotes m√°s grandes para mejor rendimiento
    const batchSize = duration > 60 ? 20 : 50; // Lotes m√°s peque√±os para videos largos
    
    for (let batchStart = 0; batchStart < totalFrames; batchStart += batchSize) {
      const batchEnd = Math.min(batchStart + batchSize, totalFrames);
      
      console.log(`üé• Procesando frames ${batchStart + 1}-${batchEnd} de ${totalFrames}`);
      
      // Generar frames del lote actual
      for (let frame = batchStart; frame < batchEnd; frame++) {
        const progress = frame / (totalFrames - 1); // 0 a 1
        
        // Funci√≥n de easing para suavizar las transiciones (ease-in-out cubic)
        const easeInOutCubic = (t) => {
          return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
        };
        
        // Funci√≥n de easing suave (ease-out sine) para movimientos m√°s naturales
        const easeOutSine = (t) => {
          return Math.sin((t * Math.PI) / 2);
        };
        
        // Aplicar easing al progreso para animaciones m√°s fluidas
        const easedProgress = easeInOutCubic(progress);
        
        // Crear canvas de 1920x1080
        const canvas = createCanvas(1920, 1080);
        const ctx = canvas.getContext('2d');
        
        // Fondo negro
        ctx.fillStyle = 'black';
        ctx.fillRect(0, 0, 1920, 1080);
        
        // Calcular aspect ratio de la imagen original y del canvas
        const imageAspectRatio = image.width / image.height;
        const canvasAspectRatio = 1920 / 1080;
        
        // Calcular dimensiones manteniendo aspect ratio
        let baseWidth, baseHeight;
        
        if (imageAspectRatio > canvasAspectRatio) {
          // Imagen m√°s ancha: ajustar por ancho
          baseWidth = 1920;
          baseHeight = 1920 / imageAspectRatio;
        } else {
          // Imagen m√°s alta: ajustar por alto
          baseHeight = 1080;
          baseWidth = 1080 * imageAspectRatio;
        }
        
        // Calcular posici√≥n centrada
        const baseCenterX = (1920 - baseWidth) / 2;
        const baseCenterY = (1080 - baseHeight) / 2;
        
        // Aplicar efectos de animaci√≥n manteniendo aspect ratio
        let drawWidth, drawHeight, drawX, drawY;
        
        switch (animationType) {
          case 'zoom-in':
            // Zoom in: escala de 1.0 a 1.3 con easing suave
            const zoomInScale = 1 + (easedProgress * 0.3);
            drawWidth = baseWidth * zoomInScale;
            drawHeight = baseHeight * zoomInScale;
            drawX = baseCenterX - ((drawWidth - baseWidth) / 2);
            drawY = baseCenterY - ((drawHeight - baseHeight) / 2);
            break;
            
          case 'zoom-out':
            // Zoom out: escala de 1.3 a 1.0 con easing suave
            const zoomOutScale = 1.3 - (easedProgress * 0.3);
            drawWidth = baseWidth * zoomOutScale;
            drawHeight = baseHeight * zoomOutScale;
            drawX = baseCenterX - ((drawWidth - baseWidth) / 2);
            drawY = baseCenterY - ((drawHeight - baseHeight) / 2);
            break;
            
          case 'pan-right':
            // Pan derecha: imagen m√°s grande que se mueve con easing suave
            const panScale = 1.2;
            drawWidth = baseWidth * panScale;
            drawHeight = baseHeight * panScale;
            const panOffsetX = ((drawWidth - baseWidth) / 2) + ((drawWidth - 1920) * easedProgress);
            drawX = baseCenterX - panOffsetX;
            drawY = baseCenterY - ((drawHeight - baseHeight) / 2);
            break;
            
          case 'pan-left':
            // Pan izquierda: imagen m√°s grande que se mueve al rev√©s con easing suave
            const leftPanScale = 1.2;
            drawWidth = baseWidth * leftPanScale;
            drawHeight = baseHeight * leftPanScale;
            const leftPanOffsetX = ((drawWidth - baseWidth) / 2) + ((drawWidth - 1920) * (1 - easedProgress));
            drawX = baseCenterX - leftPanOffsetX;
            drawY = baseCenterY - ((drawHeight - baseHeight) / 2);
            break;
            
          case 'fade-in':
            // Fade in: opacidad de 0 a 1
            drawWidth = baseWidth;
            drawHeight = baseHeight;
            drawX = baseCenterX;
            drawY = baseCenterY;
            ctx.globalAlpha = easedProgress;
            break;
            
          case 'slide-in-left':
            // Deslizar desde la izquierda
            drawWidth = baseWidth;
            drawHeight = baseHeight;
            drawX = baseCenterX - (1920 * (1 - easedProgress));
            drawY = baseCenterY;
            break;
            
          case 'slide-in-right':
            // Deslizar desde la derecha
            drawWidth = baseWidth;
            drawHeight = baseHeight;
            drawX = baseCenterX + (1920 * (1 - easedProgress));
            drawY = baseCenterY;
            break;
            
          case 'rotate-zoom':
            // Rotaci√≥n con zoom
            const rotateZoomScale = 1 + (easedProgress * 0.2);
            const rotation = easedProgress * Math.PI * 2; // Una rotaci√≥n completa
            drawWidth = baseWidth * rotateZoomScale;
            drawHeight = baseHeight * rotateZoomScale;
            
            ctx.save();
            ctx.translate(1920/2, 1080/2);
            ctx.rotate(rotation);
            ctx.translate(-drawWidth/2, -drawHeight/2);
            drawX = 0;
            drawY = 0;
            break;
            
          case 'none':
          default:
            // Sin animaci√≥n: imagen est√°tica centrada manteniendo aspect ratio
            drawWidth = baseWidth;
            drawHeight = baseHeight;
            drawX = baseCenterX;
            drawY = baseCenterY;
        }
        
        // Dibujar la imagen en el canvas manteniendo aspect ratio
        ctx.drawImage(image, drawX, drawY, drawWidth, drawHeight);
        
        // Restaurar contexto si se us√≥ transformaci√≥n
        if (animationType === 'rotate-zoom') {
          ctx.restore();
        }
        
        // Resetear alpha si se us√≥
        if (animationType === 'fade-in') {
          ctx.globalAlpha = 1;
        }
        
        // Guardar el frame como imagen con calidad ajustada seg√∫n duraci√≥n
        const quality = duration > 60 ? 0.7 : 0.85; // Menor calidad para videos largos
        const framePath = path.join(tempDir, `frame_${String(frame).padStart(6, '0')}.jpg`);
        const buffer = canvas.toBuffer('image/jpeg', { quality });
        fs.writeFileSync(framePath, buffer);
      }
      
      // Forzar liberaci√≥n de memoria entre lotes
      if (global.gc) {
        global.gc();
      }
    }
    
    // Convertir frames a video usando FFmpeg con aceleraci√≥n GPU opcional
    await new Promise((resolve, reject) => {
      const videoCodec = useGPU ? 'h264_nvenc' : 'libx264';
      const outputOptions = [
        '-c:v', videoCodec,
        '-pix_fmt', 'yuv420p',
        '-t', duration.toString()
      ];
      
      if (useGPU) {
        // Opciones optimizadas para NVENC
        outputOptions.push(
          '-preset', 'fast',        // Preset r√°pido para NVENC
          '-rc', 'vbr',             // Variable bitrate
          '-cq', '23',              // Calidad constante
          '-b:v', '8M',             // Bitrate target
          '-maxrate', '15M',        // Bitrate m√°ximo
          '-bufsize', '30M'         // Buffer size
        );
      } else {
        // Opciones para CPU
        outputOptions.push('-preset', duration > 60 ? 'ultrafast' : 'fast');
      }
      
      console.log(`üé¨ Convirtiendo frames a video usando ${useGPU ? 'GPU (NVENC)' : 'CPU'}...`);
      
      ffmpeg()
        .input(path.join(tempDir, 'frame_%06d.jpg'))
        .inputOptions(['-framerate', fps.toString()])
        .outputOptions(outputOptions)
        .output(outputPath)
        .on('end', () => {
          console.log(`‚úÖ Video generado exitosamente con ${useGPU ? 'aceleraci√≥n GPU' : 'CPU'}`);
          resolve();
        })
        .on('error', reject)
        .run();
    });
    
    // Limpiar frames temporales
    const files = fs.readdirSync(tempDir);
    for (const file of files) {
      fs.unlinkSync(path.join(tempDir, file));
    }
    
  } catch (error) {
    throw error;
  }
}

// Funci√≥n para generar video de una imagen con transiciones usando Canvas
async function generateImageVideoWithTransitions(imagePath, outputPath, duration, animationType = 'zoom-out', fps = 30) {
  return new Promise(async (resolve, reject) => {
    try {
      console.log(`üé¨ Generando video con transici√≥n ${animationType} para ${path.basename(imagePath)}`);
      
      // Generar video completo con animaci√≥n
      await generateAnimatedFrames(imagePath, outputPath, duration, animationType, 'standard', false);
      
      console.log(`‚úÖ Video con transici√≥n generado: ${path.basename(outputPath)}`);
      resolve(outputPath);
      
    } catch (error) {
      console.error('Error en generateImageVideoWithTransitions:', error);
      reject(error);
    }
  });
}

// Funci√≥n para concatenar videos con transici√≥n crossfade
async function concatenateVideosWithCrossfade(videoPaths, audioPath, outputPath) {
  return new Promise((resolve, reject) => {
    console.log(`üé¨ Concatenando ${videoPaths.length} videos con transici√≥n crossfade...`);
    
    if (videoPaths.length === 0) {
      reject(new Error('No hay videos para concatenar'));
      return;
    }
    
    if (videoPaths.length === 1) {
      // Si solo hay un video, no necesitamos crossfade
      const command = ffmpeg(videoPaths[0]);
      if (audioPath) {
        command.input(audioPath);
      }
      command
        .outputOptions(['-c:v libx264', '-crf 23', '-preset medium'])
        .output(outputPath)
        .on('end', () => {
          console.log('‚úÖ Video √∫nico procesado correctamente');
          resolve(outputPath);
        })
        .on('error', (err) => {
          console.error('Error procesando video √∫nico:', err);
          reject(err);
        })
        .run();
      return;
    }
    
    // Para m√∫ltiples videos, creamos filtros de crossfade
    const command = ffmpeg();
    
    // Agregar todos los videos como inputs
    videoPaths.forEach(videoPath => {
      command.input(videoPath);
    });
    
    // Agregar audio si existe
    if (audioPath) {
      command.input(audioPath);
    }
    
    // Construir el filtro complejo para crossfade
    const filterComplex = [];
    const crossfadeDuration = 0.5; // 0.5 segundos de crossfade
    
    // Para m√∫ltiples videos, usaremos un enfoque m√°s simple: concatenar con fade
    // Primero, creamos un filtro que ajusta cada video para que tenga fade out al final
    for (let i = 0; i < videoPaths.length; i++) {
      if (i === 0) {
        // Primer video: solo fade out al final
        filterComplex.push(`[${i}:v]fade=t=out:st=9.5:d=0.5[v${i}]`);
      } else if (i === videoPaths.length - 1) {
        // √öltimo video: solo fade in al inicio
        filterComplex.push(`[${i}:v]fade=t=in:st=0:d=0.5[v${i}]`);
      } else {
        // Videos del medio: fade in y fade out
        filterComplex.push(`[${i}:v]fade=t=in:st=0:d=0.5,fade=t=out:st=9.5:d=0.5[v${i}]`);
      }
    }
    
    // Ahora concatenamos todos los videos con fade
    const inputLabels = videoPaths.map((_, i) => `[v${i}]`).join('');
    filterComplex.push(`${inputLabels}concat=n=${videoPaths.length}:v=1:a=0[outv]`);
    
    const outputOptions = [
      '-filter_complex', filterComplex.join(';'),
      '-map', '[outv]',
      '-c:v', 'libx264',
      '-crf', '23',
      '-preset', 'medium',
      '-pix_fmt', 'yuv420p'
    ];
    
    // Si hay audio, mapearlo tambi√©n
    if (audioPath) {
      outputOptions.push('-map', `${videoPaths.length}:a`);
      outputOptions.push('-c:a', 'aac');
      outputOptions.push('-b:a', '128k');
    }
    
    command
      .outputOptions(outputOptions)
      .output(outputPath)
      .on('start', (commandLine) => {
        console.log('üé¨ Comando FFmpeg para crossfade:', commandLine);
      })
      .on('progress', (progress) => {
        if (progress.percent) {
          console.log(`‚è≥ Progreso crossfade: ${Math.round(progress.percent)}%`);
        }
      })
      .on('end', () => {
        console.log('‚úÖ Videos concatenados con crossfade exitosamente');
        resolve(outputPath);
      })
      .on('error', (err) => {
        console.error('‚ùå Error en concatenaci√≥n con crossfade:', err);
        reject(err);
      })
      .run();
  });
}

// Endpoint para probar el sistema autom√°tico de ComfyUI
app.post('/test-comfyui-auto', async (req, res) => {
  try {
    console.log('üß™ Iniciando prueba del sistema autom√°tico de ComfyUI...');
    
    // Probar iniciar ComfyUI
    const started = await startComfyUI();
    if (!started) {
      return res.status(500).json({ 
        success: false, 
        error: 'No se pudo iniciar ComfyUI autom√°ticamente' 
      });
    }
    
    // Esperar un momento y luego cerrarlo
    console.log('‚è≥ Esperando 5 segundos antes de cerrar...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const stopped = await stopComfyUI();
    
    res.json({ 
      success: true, 
      message: 'Sistema autom√°tico de ComfyUI probado exitosamente',
      started: started,
      stopped: stopped
    });
    
  } catch (error) {
    console.error('‚ùå Error en prueba autom√°tica:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message 
    });
  }
});

// Endpoint para probar el sistema autom√°tico de Applio
app.post('/test-applio-auto', async (req, res) => {
  try {
    console.log('üß™ Iniciando prueba del sistema autom√°tico de Applio...');
    
    // Probar iniciar Applio
    const started = await startApplio();
    if (!started) {
      return res.status(500).json({ 
        success: false, 
        error: 'No se pudo iniciar Applio autom√°ticamente' 
      });
    }
    
    // Verificar conexi√≥n despu√©s del inicio
    console.log('‚úÖ Verificando conexi√≥n con Applio...');
    const isConnected = await applioClient.checkConnection();
    
    res.json({ 
      success: true, 
      message: 'Sistema autom√°tico de Applio probado exitosamente - Applio permanece abierto',
      started: started,
      connected: isConnected,
      status: 'Applio permanece ejecut√°ndose para futuras pruebas'
    });
    
  } catch (error) {
    console.error('‚ùå Error en prueba autom√°tica de Applio:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message 
    });
  }
});

app.listen(PORT, async () => {
  console.log(`üöÄ Servidor corriendo en http://localhost:${PORT}`);
  
  // Verificar conexi√≥n con ComfyUI
  try {
    const connectionCheck = await comfyUIClient.checkConnection();
    if (connectionCheck.success) {
      console.log(`‚úÖ Conectado exitosamente a ComfyUI en http://127.0.0.1:8188`);
      
      // Obtener modelos disponibles
      const modelsInfo = await comfyUIClient.getAvailableModels();
      if (modelsInfo.success) {
        console.log(`üì¶ Modelos disponibles en ComfyUI: ${modelsInfo.models.length}`);
        if (modelsInfo.models.includes('flux1-dev-fp8.safetensors')) {
          console.log(`üéØ Modelo Flux encontrado y listo para usar`);
        } else {
          console.warn(`‚ö†Ô∏è Modelo Flux no encontrado. Modelos disponibles:`, modelsInfo.models.slice(0, 3));
        }
      }
    } else {
      console.warn(`‚ö†Ô∏è No se pudo conectar a ComfyUI: ${connectionCheck.error}`);
      console.warn(`üîß Aseg√∫rate de que ComfyUI est√© ejecut√°ndose en http://127.0.0.1:8188`);
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è Error verificando ComfyUI: ${error.message}`);
    console.warn(`üîß Las funciones de IA local requerir√°n que ComfyUI est√© ejecut√°ndose`);
  }
});

// Manejadores para cerrar ComfyUI y Applio cuando la aplicaci√≥n se cierre
process.on('SIGINT', async () => {
  console.log('\nüõë Cerrando aplicaci√≥n...');
  console.log('üîÑ Cerrando ventana CMD de ComfyUI...');
  await stopComfyUI();
  console.log('üîÑ Cerrando ventana CMD de Applio...');
  await stopApplio();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë Terminando aplicaci√≥n...');
  console.log('üîÑ Cerrando ventana CMD de ComfyUI...');
  await stopComfyUI();
  console.log('üîÑ Cerrando ventana CMD de Applio...');
  await stopApplio();
  process.exit(0);
});

process.on('beforeExit', async () => {
  console.log('üîÑ Cerrando ventanas CMD antes de salir...');
  await stopComfyUI();
  await stopApplio();
});
